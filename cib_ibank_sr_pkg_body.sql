create or replace PACKAGE BODY        cib_ibank_sr_pkg AS


  procedure executeStandingInstructions as
    v_year                         integer := 0;
    v_month                        integer := 0;
    v_day                          integer := 0;
    v_day_of_week                  varchar2(100);
    v_hour                         integer := 0;
    v_minute                       integer := 0;
    v_second                       integer := 0;
    v_err_message                  VARCHAR2(3000);
    v_response_code                varchar2(100);
    v_isRunning                    varchar2(100);
    v_BatchId                      varchar2(200);
    v_BatchId_Detail_Id            varchar2(200);
    v_schedule_calendar_Id         varchar2(200);
    v_processingstatus             varchar2(10);
    v_recordexist                  INTEGER;
    v_acct_balance                 NUMBER;
    v_amount                       NUMBER;
    r_transaction_schedule_summary TRANSACTION_SCHEDULE_SUMMARY%rowtype;
    r_transaction_schedule_details TRANSACTION_SCHEDULE_DETAIL%rowtype;
  
  begin
    v_response_code := 'N';
    select to_char(sysdate, 'FmDay', 'nls_date_language=english')
      into v_day_of_week
      from dual;
    --  select extract(year from sysdate) as year_,extract(month from sysdate) as month_,extract(day from sysdate) as day_,EXTRACT(HOUR FROM SYSTIMESTAMP) AS CURRENT_HOUR,EXTRACT(MINUTE FROM SYSTIMESTAMP) AS CURRENT_MINUTE into v_year,v_month,v_day,v_hour,v_minute,v_second from dual;
  
    select extract(year from sysdate),
           extract(month from sysdate),
           extract(day from sysdate),
           (EXTRACT(HOUR FROM SYSTIMESTAMP) + 1),
           EXTRACT(MINUTE FROM SYSTIMESTAMP),
           EXTRACT(SECOND FROM SYSTIMESTAMP)
      into v_year, v_month, v_day, v_hour, v_minute, v_second
      from dual;
    if (v_hour = 24) then
      v_hour := 0;
    end if;
    -- TRANSACTION_SCHEDULE_SUMMARY
    FOR item IN (
                 --one time 1
                 SELECT a.*
                   FROM TRANSACTION_SCHEDULE_CALENDAR a
                   join TRANSACTION_SCHEDULE_SUMMARY b
                     on b.BATCH_ID = a.BATCH_ID
                    and b.RECORD_STATUS_ID = 2
                    and APPROVAL_STATUS_ID = 2
                    and trunc(SCHEDULE_START_DATE) <= trunc(sysdate)
                    and (SCHEDULE_END_DATE is null or
                        trunc(SCHEDULE_END_DATE) >= trunc(sysdate))
                  WHERE a.SCHEDULE_OPTION_ID = 1
                    AND SCHEDULE_YEAR = v_year
                    and SCHEDULE_MONTH = v_month
                    and SCHEDULE_DAY = v_day
                    and SCHEDULE_HOUR <= v_hour
                    and SCHEDULE_CALENDAR_ID not in
                        (select SCHEDULE_CALENDAR_ID
                           from TRANSACTION_SCHEDULE_EXEC_HIST
                          where trunc(EXECUTION_DATE) = trunc(sysdate))
                 union all
                 --daily 2
                 SELECT a.*
                   FROM TRANSACTION_SCHEDULE_CALENDAR a
                   join TRANSACTION_SCHEDULE_SUMMARY b
                     on b.BATCH_ID = a.BATCH_ID
                    and b.RECORD_STATUS_ID = 2
                    and APPROVAL_STATUS_ID = 2
                    and trunc(SCHEDULE_START_DATE) <= trunc(sysdate)
                    and (SCHEDULE_END_DATE is null or
                        trunc(SCHEDULE_END_DATE) >= trunc(sysdate))
                  WHERE a.SCHEDULE_OPTION_ID = 2
                    AND SCHEDULE_HOUR <= v_hour
                    and SCHEDULE_CALENDAR_ID not in
                        (select SCHEDULE_CALENDAR_ID
                           from TRANSACTION_SCHEDULE_EXEC_HIST
                          where trunc(EXECUTION_DATE) = trunc(sysdate))
                 union all
                 --weekly 3
                 SELECT a.*
                   FROM TRANSACTION_SCHEDULE_CALENDAR a
                   join TRANSACTION_SCHEDULE_SUMMARY b
                     on b.BATCH_ID = a.BATCH_ID
                    and b.RECORD_STATUS_ID = 2
                    and APPROVAL_STATUS_ID = 2
                    and trunc(SCHEDULE_START_DATE) <= trunc(sysdate)
                    and (SCHEDULE_END_DATE is null or
                        trunc(SCHEDULE_END_DATE) >= trunc(sysdate))
                  WHERE a.SCHEDULE_OPTION_ID = 3
                    AND SCHEDULE_DAY = v_day_of_week
                    and SCHEDULE_HOUR <= v_hour
                    and SCHEDULE_CALENDAR_ID not in
                        (select SCHEDULE_CALENDAR_ID
                           from TRANSACTION_SCHEDULE_EXEC_HIST
                          where trunc(EXECUTION_DATE) = trunc(sysdate))
                 union all
                 --monthly 4
                 SELECT a.*
                   FROM TRANSACTION_SCHEDULE_CALENDAR a
                   join TRANSACTION_SCHEDULE_SUMMARY b
                     on b.BATCH_ID = a.BATCH_ID
                    and b.RECORD_STATUS_ID = 2
                    and APPROVAL_STATUS_ID = 2
                    and trunc(SCHEDULE_START_DATE) <= trunc(sysdate)
                    and (SCHEDULE_END_DATE is null or
                        trunc(SCHEDULE_END_DATE) >= trunc(sysdate))
                  WHERE a.SCHEDULE_OPTION_ID = 4
                    AND SCHEDULE_MONTH = v_month
                    and SCHEDULE_DAY = v_day
                    and SCHEDULE_HOUR <= v_hour
                    and SCHEDULE_CALENDAR_ID not in
                        (select SCHEDULE_CALENDAR_ID
                           from TRANSACTION_SCHEDULE_EXEC_HIST
                          where trunc(EXECUTION_DATE) = trunc(sysdate))
                 
                 ) LOOP
      v_schedule_calendar_Id := item.SCHEDULE_CALENDAR_ID;
    
      select *
        into r_transaction_schedule_summary
        from TRANSACTION_SCHEDULE_SUMMARY
       where BATCH_ID = item.BATCH_ID;
      -- 'CIB' || v_BatchId;
      select sys_guid() into v_BatchId from dual;
      INSERT INTO TRANSACTION_BATCH_SUMMARY
        (CREATED_DATE,
         TRANSIT_POST_DATE,
         HOLDING_ACCT_TYPE,
         NO_OF_RECORDS_UNKNOWN_STATUS,
         THREAD_ID,
         TOTAL_TRAN_AMT_FAILED,
         POSTING_OPTION_ID,
         ORIGINAL_CUMULATIVE_AMOUNT,
         TRANSIT_POSTFLG,
         FAILURE_COUNT,
         TOTAL_CHARGE_AMT_SUCCESSFUL,
         ORIGINAL_TOTAL_TRAN_AMOUNT,
         NO_OF_RECORDS_FAILED,
         BATCH_DESCRIPTION,
         REVERSED_TOTAL_CHARGE,
         APPROVED_BY,
         CREATED_BY,
         EXPECTED_TRANSIT_REVERSAL_FEE,
         TOTAL_CHARGE_AMT,
         ERROR_TRIAL_COUNT,
         HOLDING_ACCT_BRANCH_CODE,
         LAST_MODIFIED_DATE,
         SCHEDULE_SUMMARY_ID,
         SCHEDULE_DATE,
         ORIGINAL_TOTAL_CHARGE_AMT,
         PROCESSING_STATUS,
         -- UPLOAD_FILENAME,
         TOTAL_TRAN_AMT_SUCCESSFUL,
         CHARGE_OPTION_ID,
         PROCESSED_RECORD_COUNT,
         NO_OF_RECORDS_SUCCESSFUL,
         PAYMENT_TYPE_ID,
         DR_ACCOUNT,
         DR_ACCOUNT_BRANCH_CODE,
         TRANSIT_POSTREF,
         LAST_MODIFIED_BY,
         TRANSIT_REVERSAL_POSTREF,
         REVERSED_TOTAL_AMOUNT,
         CUMULATIVE_AMOUNT,
         BATCH_ID,
         APPROVED_DATE,
         DR_ACCOUNT_CURRENCY_CODE,
         TOTAL_CHARGE_AMT_FAILED,
         TRANSIT_REVERSAL_TRAN_AMT,
         HOLDING_ACCT_NO,
         TRANSIT_REVERSAL_GUID,
         NEXT_TRIAL_TIME,
         NO_OF_RECORD,
         TRANSIT_POST_GUID,
         FLEXCUBERESPONSECODE,
         AUTH_TOKEN_SNO,
         HOLDING_ACCT_CURRENCY_CODE,
         EXPECTED_TRANSIT_REVERSAL_AMT,
         TOTAL_TRAN_AMT_UNKNOWN_STATUS,
         FLEXCUBERESPONSEDESCRIPTION,
         TRANSIT_REVERSAL_CHARGE_AMT,
         RECORD_STATUS_ID,
         TRANSIT_REVERSAL_DATE,
         AUTH_TOKEN_FLAG,
         CORP_ID,
         APPROVAL_STATUS_ID,
         PAYMENT_CHANNEL_ID,
         TOTAL_CHARGE_UNKNOWN_STATUS,
         TRANSIT_REVERSALFLG,
         TOTAL_TRAN_AMOUNT,
         IS_STANDING_INSTRUCTION,
         SCHEDULE_CALENDAR_ID
         
         --v_schedule_calendar_Id
         )
      VALUES
        (sysdate,
         r_transaction_schedule_summary.TRANSIT_POST_DATE,
         r_transaction_schedule_summary.HOLDING_ACCT_TYPE,
         r_transaction_schedule_summary.NO_OF_RECORDS_UNKNOWN_STATUS,
         r_transaction_schedule_summary.THREAD_ID,
         r_transaction_schedule_summary.TOTAL_TRAN_AMT_FAILED,
         r_transaction_schedule_summary.POSTING_OPTION_ID,
         r_transaction_schedule_summary.ORIGINAL_CUMULATIVE_AMOUNT,
         r_transaction_schedule_summary.TRANSIT_POSTFLG,
         r_transaction_schedule_summary.FAILURE_COUNT,
         r_transaction_schedule_summary.TOTAL_CHARGE_AMT_SUCCESSFUL,
         r_transaction_schedule_summary.ORIGINAL_TOTAL_TRAN_AMOUNT,
         r_transaction_schedule_summary.NO_OF_RECORDS_FAILED,
         r_transaction_schedule_summary.BATCH_DESCRIPTION,
         r_transaction_schedule_summary.REVERSED_TOTAL_CHARGE,
         r_transaction_schedule_summary.APPROVED_BY,
         r_transaction_schedule_summary.CREATED_BY,
         r_transaction_schedule_summary.EXPECTED_TRANSIT_REVERSAL_FEE,
         r_transaction_schedule_summary.TOTAL_CHARGE_AMT,
         r_transaction_schedule_summary.ERROR_TRIAL_COUNT,
         r_transaction_schedule_summary.HOLDING_ACCT_BRANCH_CODE,
         r_transaction_schedule_summary.LAST_MODIFIED_DATE,
         r_transaction_schedule_summary.SCHEDULE_SUMMARY_ID,
         sysdate,
         r_transaction_schedule_summary.ORIGINAL_TOTAL_CHARGE_AMT,
         r_transaction_schedule_summary.PROCESSING_STATUS,
         --  r_transaction_schedule_summary.UPLOAD_FILENAME,
         r_transaction_schedule_summary.TOTAL_TRAN_AMT_SUCCESSFUL,
         r_transaction_schedule_summary.CHARGE_OPTION_ID,
         r_transaction_schedule_summary.PROCESSED_RECORD_COUNT,
         r_transaction_schedule_summary.NO_OF_RECORDS_SUCCESSFUL,
         r_transaction_schedule_summary.PAYMENT_TYPE_ID,
         r_transaction_schedule_summary.DR_ACCOUNT,
         r_transaction_schedule_summary.DR_ACCOUNT_BRANCH_CODE,
         'CIB' || v_BatchId,
         r_transaction_schedule_summary.LAST_MODIFIED_BY,
         r_transaction_schedule_summary.TRANSIT_REVERSAL_POSTREF,
         r_transaction_schedule_summary.REVERSED_TOTAL_AMOUNT,
         r_transaction_schedule_summary.CUMULATIVE_AMOUNT,
         v_BatchId,
         r_transaction_schedule_summary.APPROVED_DATE,
         r_transaction_schedule_summary.DR_ACCOUNT_CURRENCY_CODE,
         r_transaction_schedule_summary.TOTAL_CHARGE_AMT_FAILED,
         r_transaction_schedule_summary.TRANSIT_REVERSAL_TRAN_AMT,
         r_transaction_schedule_summary.HOLDING_ACCT_NO,
         r_transaction_schedule_summary.TRANSIT_REVERSAL_GUID,
         r_transaction_schedule_summary.NEXT_TRIAL_TIME,
         r_transaction_schedule_summary.NO_OF_RECORD,
         r_transaction_schedule_summary.TRANSIT_POST_GUID,
         r_transaction_schedule_summary.FLEXCUBERESPONSECODE,
         r_transaction_schedule_summary.AUTH_TOKEN_SNO,
         r_transaction_schedule_summary.HOLDING_ACCT_CURRENCY_CODE,
         r_transaction_schedule_summary.EXPECTED_TRANSIT_REVERSAL_AMT,
         r_transaction_schedule_summary.TOTAL_TRAN_AMT_UNKNOWN_STATUS,
         r_transaction_schedule_summary.FLEXCUBERESPONSEDESCRIPTION,
         r_transaction_schedule_summary.TRANSIT_REVERSAL_CHARGE_AMT,
         r_transaction_schedule_summary.RECORD_STATUS_ID,
         r_transaction_schedule_summary.TRANSIT_REVERSAL_DATE,
         r_transaction_schedule_summary.AUTH_TOKEN_FLAG,
         r_transaction_schedule_summary.CORP_ID,
         r_transaction_schedule_summary.APPROVAL_STATUS_ID,
         r_transaction_schedule_summary.PAYMENT_CHANNEL_ID,
         r_transaction_schedule_summary.TOTAL_CHARGE_UNKNOWN_STATUS,
         r_transaction_schedule_summary.TRANSIT_REVERSALFLG,
         r_transaction_schedule_summary.TOTAL_TRAN_AMOUNT,
         'Y',
         v_schedule_calendar_Id);
    
      FOR itemdetail IN (SELECT *
                           FROM TRANSACTION_SCHEDULE_DETAIL
                          where BATCH_ID =
                                r_transaction_schedule_summary.BATCH_ID
                         
                         ) LOOP
        select sys_guid() into v_BatchId_Detail_Id from dual;
      
        SELECT *
          into r_transaction_schedule_details
          FROM TRANSACTION_SCHEDULE_DETAIL
         where BATCH_DETAIL_ID = itemdetail.BATCH_DETAIL_ID;
        v_processingstatus := r_transaction_schedule_details.PROCESSING_STATUS;
        if ((r_transaction_schedule_summary.POSTING_OPTION_ID = 1) and
           r_transaction_schedule_summary.PAYMENT_CHANNEL_ID = 1) then
          if (r_transaction_schedule_details.ISINTERBANK_TRANSFER = 'Y') THEN
            v_processingstatus := '02';
          else
            v_processingstatus := '01';
          end if;
        end if;
        -- itemdetail  
        --'CIB' || v_BatchId_Detail_Id
        INSERT INTO TRANSACTION_BATCH_DETAIL
          (CHARGE_AMOUNT,
           NAME_VALIDATION_MATCH_STATUS,
           CREATED_DATE,
           MOBILE_NUMBER,
           IS_SUMMARY_TABLE_UPDATED,
           POSTED_DATE,
           NE_DATE,
           BATCH_DETAIL_ID,
           THREAD_ID,
           ERROR_PROCESSING_STATUS,
           FLEXCUBECUSTOMERID,
           REVERSAL_REF_NO,
           AMOUNT,
           BENEFICIARY_NAME,
           REVERSAL_DATE,
           BILLER_NAME,
           CR_ACCOUNT_NO,
           APPROVED_BY,
           DR_ACCOUNT_NO,
           BENEFICIARY_EMAIL,
           CREATED_BY,
           FLEXCUBETRANID,
           ERROR_TRIAL_COUNT,
           MANUAL_SETTLEMENT_ADVISED,
           NE_SESSION_ID,
           LAST_MODIFIED_DATE,
           CR_ACCOUNT_CURRENCY_CODE,
           SCHEDULE_DATE,
           THIRDPARTY_RESPONSE_DATE,
           BILLER_CUSTOM_FIELD_VALUE,
           PROCESSING_STATUS,
           REJECTED_DATE,
           ISPOSTING_REVERSED,
           REJECTED_BY,
           PAYMENT_TYPE_ID,
           ISINTERBANK_TRANSFER,
           POSTINGUIDS,
           RESPONSE_CODE,
           POSTING_LOCK_COUNT,
           THIRDPARTY_RESPONSE_MESSAGE,
           BILLER_CATEGORY,
           LAST_MODIFIED_BY,
           CUSTOMER_BVN,
           REVERSALPOSTINGUIDS,
           BATCH_ID,
           APPROVED_DATE,
           TRANSACTION_STATUS,
           REVERSAL_RESPONSE_MESSAGE,
           FLEXCUBEACCOUNTVALIDATIONFLG,
           NEXT_TRIAL_TIME,
           NE_BVN_NO,
           CR_ACCOUNT_BRANCH_CODE,
           BILLER_RECHARGE_PIN,
           BANK_CODE,
           BENEFICIARY_ID,
           FLEXCUBERESPONSECODE,
           NE_CUST_NAME,
           ISFT_SUCCESSFUL,
           FLEXCUBERESPONSEDESCRIPTION,
           THIRDPARTY_RESPONSE_CODE,
           RECORD_STATUS_ID,
           CORP_ID,
           POSTEDFLG,
           APPROVAL_STATUS_ID,
           ISNE_SUCCESSFUL,
           PAYMENT_CHANNEL_ID,
           NE_RESPONSE_CODE,
           NARRATION,
           NE_KYCLEVEL,
           POST_REF_NO,
           THIRDPARTY_GUID,
           NE_RESPONSE_MESSAGE,
           THIRDPARTY_SESSION_ID,
           REVERSAL_RESPONSE_CODE,
           BILLER_PRODUCT_TYPE,
           BANK_NAME)
        VALUES
          (r_transaction_schedule_details.CHARGE_AMOUNT,
           r_transaction_schedule_details.NAME_VALIDATION_MATCH_STATUS,
           sysdate,
           r_transaction_schedule_details.MOBILE_NUMBER,
           r_transaction_schedule_details.IS_SUMMARY_TABLE_UPDATED,
           r_transaction_schedule_details.POSTED_DATE,
           r_transaction_schedule_details.NE_DATE,
           v_BatchId_Detail_Id,
           r_transaction_schedule_details.THREAD_ID,
           r_transaction_schedule_details.ERROR_PROCESSING_STATUS,
           r_transaction_schedule_details.FLEXCUBECUSTOMERID,
           r_transaction_schedule_details.REVERSAL_REF_NO,
           r_transaction_schedule_details.AMOUNT,
           r_transaction_schedule_details.BENEFICIARY_NAME,
           r_transaction_schedule_details.REVERSAL_DATE,
           r_transaction_schedule_details.BILLER_NAME,
           r_transaction_schedule_details.CR_ACCOUNT_NO,
           r_transaction_schedule_details.APPROVED_BY,
           r_transaction_schedule_details.DR_ACCOUNT_NO,
           r_transaction_schedule_details.BENEFICIARY_EMAIL,
           r_transaction_schedule_details.CREATED_BY,
           r_transaction_schedule_details.FLEXCUBETRANID,
           r_transaction_schedule_details.ERROR_TRIAL_COUNT,
           r_transaction_schedule_details.MANUAL_SETTLEMENT_ADVISED,
           r_transaction_schedule_details.NE_SESSION_ID,
           r_transaction_schedule_details.LAST_MODIFIED_DATE,
           r_transaction_schedule_details.CR_ACCOUNT_CURRENCY_CODE,
           sysdate,
           r_transaction_schedule_details.THIRDPARTY_RESPONSE_DATE,
           r_transaction_schedule_details.BILLER_CUSTOM_FIELD_VALUE,
           v_processingstatus,
           r_transaction_schedule_details.REJECTED_DATE,
           r_transaction_schedule_details.ISPOSTING_REVERSED,
           r_transaction_schedule_details.REJECTED_BY,
           r_transaction_schedule_details.PAYMENT_TYPE_ID,
           r_transaction_schedule_details.ISINTERBANK_TRANSFER,
           r_transaction_schedule_details.POSTINGUIDS,
           r_transaction_schedule_details.RESPONSE_CODE,
           r_transaction_schedule_details.POSTING_LOCK_COUNT,
           r_transaction_schedule_details.THIRDPARTY_RESPONSE_MESSAGE,
           r_transaction_schedule_details.BILLER_CATEGORY,
           r_transaction_schedule_details.LAST_MODIFIED_BY,
           r_transaction_schedule_details.CUSTOMER_BVN,
           r_transaction_schedule_details.REVERSALPOSTINGUIDS,
           v_BatchId,
           r_transaction_schedule_details.APPROVED_DATE,
           r_transaction_schedule_details.TRANSACTION_STATUS,
           r_transaction_schedule_details.REVERSAL_RESPONSE_MESSAGE,
           r_transaction_schedule_details.FLEXCUBEACCOUNTVALIDATIONFLG,
           r_transaction_schedule_details.NEXT_TRIAL_TIME,
           r_transaction_schedule_details.NE_BVN_NO,
           r_transaction_schedule_details.CR_ACCOUNT_BRANCH_CODE,
           r_transaction_schedule_details.BILLER_RECHARGE_PIN,
           r_transaction_schedule_details.BANK_CODE,
           r_transaction_schedule_details.BENEFICIARY_ID,
           r_transaction_schedule_details.FLEXCUBERESPONSECODE,
           r_transaction_schedule_details.NE_CUST_NAME,
           r_transaction_schedule_details.ISFT_SUCCESSFUL,
           r_transaction_schedule_details.FLEXCUBERESPONSEDESCRIPTION,
           r_transaction_schedule_details.THIRDPARTY_RESPONSE_CODE,
           r_transaction_schedule_details.RECORD_STATUS_ID,
           r_transaction_schedule_details.CORP_ID,
           r_transaction_schedule_details.POSTEDFLG,
           r_transaction_schedule_details.APPROVAL_STATUS_ID,
           r_transaction_schedule_details.ISNE_SUCCESSFUL,
           r_transaction_schedule_details.PAYMENT_CHANNEL_ID,
           r_transaction_schedule_details.NE_RESPONSE_CODE,
           r_transaction_schedule_details.NARRATION,
           r_transaction_schedule_details.NE_KYCLEVEL,
           'CIB' || v_BatchId_Detail_Id,
           r_transaction_schedule_details.THIRDPARTY_GUID,
           r_transaction_schedule_details.NE_RESPONSE_MESSAGE,
           r_transaction_schedule_details.THIRDPARTY_SESSION_ID,
           r_transaction_schedule_details.REVERSAL_RESPONSE_CODE,
           r_transaction_schedule_details.BILLER_PRODUCT_TYPE,
           r_transaction_schedule_details.BANK_NAME);
      
      END LOOP;
    
      IF (r_transaction_schedule_summary.POSTING_OPTION_ID = 2) THEN
        --SINGLE DEBIT
        UPDATE TRANSACTION_BATCH_DETAIL
           SET DR_ACCOUNT_NO = r_transaction_schedule_summary.HOLDING_ACCT_NO,
               --POST_REF_NO   = 'B/' || BATCH_DETAIL_ID || '/' || p_BATCH_ID
               POST_REF_NO = 'CIB' || BATCH_DETAIL_ID
         WHERE BATCH_ID = v_BatchId
           AND ISINTERBANK_TRANSFER = 'N';
      
        update TRANSACTION_BATCH_DETAIL
           set DR_ACCOUNT_NO = r_transaction_schedule_summary.HOLDING_ACCT_NO,
               POST_REF_NO   = 'CIB000018' ||
                               TO_CHAR(SYSDATE, 'YYMMDDHHMMSS') ||
                               LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL,
                                    12,
                                    -- '0') || '/' || p_BATCH_ID
                                    '0')
         where BATCH_ID = v_BatchId
           AND ISINTERBANK_TRANSFER = 'Y'
           AND PAYMENT_CHANNEL_ID in (1, 2, 3); --NIP,NEFT,NAPS --#sprint2
      
      ELSIF (r_transaction_schedule_summary.POSTING_OPTION_ID = 1) THEN
        --MULTIPLE DEBIT
        UPDATE TRANSACTION_BATCH_DETAIL
           SET POST_REF_NO = 'CIB' || BATCH_DETAIL_ID
         WHERE BATCH_ID = v_BatchId
           AND ISINTERBANK_TRANSFER = 'N';
      
        update TRANSACTION_BATCH_DETAIL
           set POST_REF_NO = 'CIB000018' || TO_CHAR(SYSDATE, 'YYMMDDHHMMSS') ||
                             LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL,
                                  12,
                                  '0')
         where BATCH_ID = v_BatchId
           AND ISINTERBANK_TRANSFER = 'Y'
           AND PAYMENT_CHANNEL_ID in (1, 2, 3); --NIP,NEFT,NAPS --#sprint2
      END IF;
    
      if (r_transaction_schedule_summary.SCHEDULE_TYPE_ID = 2) then
        --sweep instructions
        select acc_net_bal(r_transaction_schedule_summary.DR_ACCOUNT)
          into v_acct_balance
          from dual;
        if (r_transaction_schedule_summary.SWEEP_OPTION_ID = 1) then
          --Constant Amount
          v_amount := r_transaction_schedule_summary.SWEEP_VARIABLE;
        end if;
        if (r_transaction_schedule_summary.SWEEP_OPTION_ID = 2) then
          --Percentage of Account  Balance
          v_amount := (r_transaction_schedule_summary.SWEEP_VARIABLE *
                      v_acct_balance / 100);
        end if;
        if (r_transaction_schedule_summary.SWEEP_OPTION_ID = 3) then
          --All Balance
          v_amount := v_acct_balance;
        end if;
        if (r_transaction_schedule_summary.SWEEP_OPTION_ID = 4) then
          --Keep Fixed Balance and Sweep Others 
          v_amount := (v_acct_balance -
                      r_transaction_schedule_summary.SWEEP_VARIABLE);
        end if;
        if (v_amount > 0) then
          update TRANSACTION_BATCH_SUMMARY
             set TOTAL_TRAN_AMOUNT = v_amount
           where BATCH_ID = v_BatchId;
          update TRANSACTION_BATCH_DETAIL
             set AMOUNT = v_amount
           where BATCH_ID = v_BatchId;
        else
          update TRANSACTION_BATCH_SUMMARY
             set PROCESSING_STATUS = '07'
           where BATCH_ID = v_BatchId;
          update TRANSACTION_BATCH_DETAIL
             set PROCESSING_STATUS = '07'
           where BATCH_ID = v_BatchId;
        end if;
      
      end if;
    
      INSERT INTO TRANSACTION_SCHEDULE_EXEC_HIST
        (CORP_ID, BATCH_ID, EXECUTION_DATE, SCHEDULE_CALENDAR_ID)
      VALUES
        (r_transaction_schedule_summary.CORP_ID,
         r_transaction_schedule_summary.BATCH_ID,
         sysdate,
         v_schedule_calendar_Id);
    END LOOP;
    commit;
    --return 'SUCCESS';
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'executeStandingInstructions');
    
      COMMIT;
      --v_response := '99|OPERATION FAILED';
    -- RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  
  end;

  FUNCTION add_tsqRequests(p_CHANNELCODE         IN VARCHAR2,
                           p_INVOICEID           IN VARCHAR2,
                           p_SESSIONID           IN VARCHAR2,
                           p_UIDS                IN VARCHAR2,
                           p_DESTINATIONBANKCODE IN VARCHAR2,
                           p_COLLECTIONTYPEID    IN VARCHAR2) RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
  BEGIN
    SET TRANSACTION READ WRITE;
    --select * from RIA_INVOICES
    INSERT INTO NIP_FUNDTRANSFER
      (CHANNELCODE,
       BATCH_DETAIL_ID,
       SESSIONID,
       UIDS,
       DESTINATIONBANKCODE,
       COLLECTIONTYPEID,
       RECORDID,
       REQUEST_TYPE)
    VALUES
      (p_CHANNELCODE,
       p_INVOICEID,
       p_SESSIONID,
       p_UIDS,
       p_DESTINATIONBANKCODE,
       p_COLLECTIONTYPEID,
       nip_fundtransfer_seq.NEXTVAL,
       'TSQ'
       -- NIP_TSQ_SEQ.NEXTVAL 
       );
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION updateNipTSQResponse(p_uids            IN VARCHAR2,
                                p_responsecode    IN VARCHAR2,
                                p_responsemessage IN VARCHAR2
                                
                                ) RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(300);
    v_responsecode          VARCHAR2(100);
    v_recordid              VARCHAR2(100);
    v_collectionid          VARCHAR2(100);
    v_responsemsg           VARCHAR2(400);
    v_trialcount            INTEGER;
    v_defaulttrialcount     INTEGER;
    v_sessionid             VARCHAR2(100);
    v_defaulttrialintervals INTEGER;
    v_retry                 INTEGER;
    v_respCodeExist         INTEGER;
    v_canRetry              VARCHAR2(50);
    v_resendft              VARCHAR2(50);
    v_terminate             VARCHAR2(50);
    v_canReverse            VARCHAR2(50);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_uids         := p_uids;
    v_responsecode := p_responsecode;
    v_responsemsg  := p_responsemessage;
    v_resendft     := 'N';
    SELECT BATCH_DETAIL_ID, SESSIONID
      INTO v_recordid, v_sessionid
      FROM NIP_FUNDTRANSFER
     WHERE uids = v_uids;
  
    UPDATE NIP_FUNDTRANSFER
       SET responsecode    = v_responsecode,
           responsemessage = v_responsemsg,
           responsetime    = SYSDATE
     WHERE uids = v_uids;
  
    IF (v_responsecode in ('00')) THEN
    
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS     = '00',
             THIRDPARTY_SESSION_ID = v_sessionid,
             ERROR_TRIAL_COUNT     = 0,
             TRANSACTION_STATUS    = 'SUCCESSFUL',
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
             THIRDPARTY_guid             = v_uids
       WHERE BATCH_DETAIL_ID = v_recordid;
    
    ELSE
      --Update RIA_INVOICES set PROCESSINGSTATUS='13',  NIBBS_FTRESPONSECODE=v_responsecode,NIBBS_FTRESPONSEXML=v_responsemsg,NIBBS_FTGUID=v_uids where INVOICEID=v_invoiceid;
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
    
      v_respCodeExist := 0;
      select count(1)
        into v_respCodeExist
        from payments.REF_RESPONSE_CODES
       where RESPONSE_CODE = v_responsecode
         and CHANNEL_CODE = 'NIP';
    
      if (v_respCodeExist > 0) then
      
        select REVERSE, RETRY, Terminate
          into v_canReverse, v_canRetry, v_terminate
          from PAYMENTS.REF_RESPONSE_CODES
         where RESPONSE_CODE = v_responsecode
           and CHANNEL_CODE = 'NIP';
      
      end if;
      select count(1)
        into v_retry
        from payments.REF_RESPONSE_CODES
       where RESPONSE_CODE = v_responsecode
         AND RETRY = 'Y'
         and CHANNEL_CODE = 'NIP';
    
      select ERROR_TRIAL_COUNT
        into v_trialcount
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = v_recordid;
      -- v_retry:=1;
    
      IF ((v_trialcount < v_defaulttrialcount)) THEN
        if (v_respCodeExist > 0) then
          if (v_terminate = 'Y') then
            if (v_canReverse = 'Y') then
              UPDATE TRANSACTION_BATCH_DETAIL
                 SET PROCESSING_STATUS        = '13',
                     ERROR_TRIAL_COUNT        = 0,
                     ERROR_PROCESSING_STATUS  = '10',
                     TRANSACTION_STATUS       = 'FAILED',
                     THIRDPARTY_SESSION_ID    = v_sessionid,
                     THIRDPARTY_RESPONSE_DATE = SYSDATE,
                     --riaresponsecode = '00',
                     --riaresponsedesciption = 'PAID',
                     THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                     THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                     THIRDPARTY_guid             = v_uids,
                     FAILURE_REASON              = v_responsemsg
               WHERE BATCH_DETAIL_ID = v_recordid;
            
            else
            
              UPDATE TRANSACTION_BATCH_DETAIL
                 SET PROCESSING_STATUS  = '14',
                     ERROR_TRIAL_COUNT  = 0,
                     TRANSACTION_STATUS = 'UNKNOWN',
                     
                     MANUAL_SETTLEMENT_ADVISED = 'Y',
                     THIRDPARTY_SESSION_ID     = v_sessionid,
                     --riaresponsecode = '00',
                     --riaresponsedesciption = 'PAID',
                     THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                     THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                     THIRDPARTY_guid             = v_uids,
                     THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                     ERROR_PROCESSING_STATUS     = '10',
                     FAILURE_REASON              = v_responsemsg
               WHERE BATCH_DETAIL_ID = v_recordid;
            end if;
          
          else
          
            if (v_canRetry = 'Y') then
            
              UPDATE TRANSACTION_BATCH_DETAIL
                 SET THIRDPARTY_SESSION_ID       = v_sessionid,
                     THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                     THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                     THIRDPARTY_guid             = v_uids,
                     THIRDPARTY_RESPONSE_DATE    = SYSDATE
               WHERE BATCH_DETAIL_ID = v_recordid;
            
              v_resendft := 'Y';
            else
            
              UPDATE TRANSACTION_BATCH_DETAIL
                 SET PROCESSING_STATUS     = '-04',
                     THIRDPARTY_SESSION_ID = v_sessionid,
                     ERROR_TRIAL_COUNT    =
                     (ERROR_TRIAL_COUNT + 1),
                     NEXT_TRIAL_TIME      =
                     (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                     --riaresponsecode = '00',
                     --riaresponsedesciption = 'PAID',
                     THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                     THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                     THIRDPARTY_guid             = v_uids
               WHERE BATCH_DETAIL_ID = v_recordid;
            
            end if;
          
          end if;
        
        else
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS     = '-04',
                 THIRDPARTY_SESSION_ID = v_sessionid,
                 ERROR_TRIAL_COUNT    =
                 (ERROR_TRIAL_COUNT + 1),
                 NEXT_TRIAL_TIME      =
                 (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 THIRDPARTY_guid             = v_uids
           WHERE BATCH_DETAIL_ID = v_recordid;
        end if;
      
      else
      
        if (v_respCodeExist > 0) then
        
          if (v_canReverse = 'Y') THEN
            UPDATE TRANSACTION_BATCH_DETAIL
               SET PROCESSING_STATUS        = '13',
                   ERROR_TRIAL_COUNT        = 0,
                   ERROR_PROCESSING_STATUS  = '10',
                   TRANSACTION_STATUS       = 'FAILED',
                   THIRDPARTY_SESSION_ID    = v_sessionid,
                   THIRDPARTY_RESPONSE_DATE = SYSDATE,
                   --riaresponsecode = '00',
                   --riaresponsedesciption = 'PAID',
                   THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                   THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                   THIRDPARTY_guid             = v_uids,
                   FAILURE_REASON              = v_responsemsg
             WHERE BATCH_DETAIL_ID = v_recordid;
          
          else
          
            UPDATE TRANSACTION_BATCH_DETAIL
               SET PROCESSING_STATUS  = '14',
                   ERROR_TRIAL_COUNT  = 0,
                   TRANSACTION_STATUS = 'UNKNOWN',
                   
                   MANUAL_SETTLEMENT_ADVISED = 'Y',
                   THIRDPARTY_SESSION_ID     = v_sessionid,
                   --riaresponsecode = '00',
                   --riaresponsedesciption = 'PAID',
                   THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                   THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                   THIRDPARTY_guid             = v_uids,
                   THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                   ERROR_PROCESSING_STATUS     = '10',
                   FAILURE_REASON              = v_responsemsg
            -- customer_bvn = bvn,
            
            -- WHERE INVOICEID = v_invoiceid;
             WHERE BATCH_DETAIL_ID = v_recordid;
          
          end if;
        
        else
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS  = '14',
                 ERROR_TRIAL_COUNT  = 0,
                 TRANSACTION_STATUS = 'UNKNOWN',
                 
                 MANUAL_SETTLEMENT_ADVISED = 'Y',
                 THIRDPARTY_SESSION_ID     = v_sessionid,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 THIRDPARTY_guid             = v_uids,
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                 ERROR_PROCESSING_STATUS     = '10',
                 FAILURE_REASON              = v_responsemsg
          -- customer_bvn = bvn,
          
          -- WHERE INVOICEID = v_invoiceid;
           WHERE BATCH_DETAIL_ID = v_recordid;
        
        end if;
      
      end if;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS' || '~~' || v_resendft;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      logerror(DBMS_UTILITY.format_error_backtrace || SQLERRM,
               'executeStandingInstructions');
    
      COMMIT;
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION getCustomerTINByAccountNo(p_acctNo IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT yy.field_val_12 as CUSTOMER_TIN
        FROM cstm_function_userdef_fields yy
       WHERE yy.function_id = 'STDCIF'
         AND field_val_12 IS NOT NULL
         AND yy.rec_key IN (SELECT cust_no || '~'
                              FROM sttm_cust_account
                             WHERE cust_ac_no = p_acctNo);
  
    RETURN o_refcursor;
  END;

  FUNCTION add_tokenvalidation_log(p_VALIDATION_REF IN VARCHAR2,
                                   p_RESPONSE_CODE  IN VARCHAR2,
                                   p_TOKEN          IN VARCHAR2,
                                   p_MODULE         IN VARCHAR2,
                                   p_RESPONSE_MSG   IN VARCHAR2,
                                   p_USERNAME       IN VARCHAR2)
    RETURN VARCHAR2 IS
  
  BEGIN
    -- SET TRANSACTION READ WRITE;
  
    --select * from RIA_INVOICES
    INSERT INTO TOKEN_VALIDATION_LOG
      (VALIDATION_REF,
       RESPONSE_CODE,
       MODULE,
       CREATED_DATE,
       RESPONSE_MSG,
       USERNAME,
       TOKEN)
    VALUES
      (p_VALIDATION_REF,
       p_RESPONSE_CODE,
       p_MODULE,
       sysdate,
       p_RESPONSE_MSG,
       p_USERNAME,
       p_TOKEN);
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION getApprovalUserGroupIdForLevel(signatoryid IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT EXPECTED_GROUP_APPROVER_ID
      
        FROM APPROVAL_ROUTE_SIGNATORIES
      
       WHERE ROUTE_SIGNATORY_ID = signatoryid
         and record_Status_id in (1, 2);
  
    RETURN o_refcursor;
  END;

  FUNCTION getPendApprovReqDistCorp(i_batch_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT distinct a.MERCHANT_CORP_ID, b.name
        FROM APPROVAL_SCHEDULES_TEMP a
        join CORPORATE_PROFILE b
          on b.corp_id = a.MERCHANT_CORP_ID
       WHERE REQ_BATCH_ID = i_batch_id;
  
    RETURN o_refcursor;
  END;

  FUNCTION getPendApprovReqDistTranType(i_batch_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT distinct a.MERCHANT_CORP_ID,
                      b.SHORT_NAME,
                      a.TRANSACTION_TYPE_ID,
                      b.DISPLAY_ORDER
        FROM APPROVAL_SCHEDULES_TEMP a
        join REF_TRANSACTION_TYPE b
          on b.TRANSACTION_TYPE_ID = a.TRANSACTION_TYPE_ID
       WHERE REQ_BATCH_ID = i_batch_id
       order by DISPLAY_ORDER asc;
  
    RETURN o_refcursor;
  END;

  FUNCTION getPendApprovReqDistTranTypAll(i_batch_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT distinct b.SHORT_NAME, a.TRANSACTION_TYPE_ID, b.DISPLAY_ORDER
        FROM APPROVAL_SCHEDULES_TEMP a
        join REF_TRANSACTION_TYPE b
          on b.TRANSACTION_TYPE_ID = a.TRANSACTION_TYPE_ID
       WHERE REQ_BATCH_ID = i_batch_id
       order by DISPLAY_ORDER asc;
  
    RETURN o_refcursor;
  END;

  PROCEDURE send_sms(pmobilenumber IN VARCHAR2,
                     pmessage      IN VARCHAR2,
                     pacct         IN VARCHAR2) IS
    v_err_message VARCHAR2(3000);
    v_source      VARCHAR2(50);
  BEGIN
    SELECT p_value
      INTO v_source
      FROM cib_proc_properties
     WHERE p_key_name = 'P_SMS_SOURCE';
  
    INSERT INTO ipintegrated.sms_message_queue
      (message_part_no,
       queue_date,
       mobile_no,
       MESSAGE_TEXT,
       status,
       SOURCE,
       account_no)
    VALUES
      (1, SYSDATE, pmobilenumber, pmessage, 'NEW', v_source, pacct);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'cibank.cib_ibank_sr_pkg.send_sms');
    
    --COMMIT;
  END;

  function getCorporateAc4TokenCharges(p_corp_id number) return varchar2 as
    v_account_number varchar2(50) := '';
  begin
  
    select a.account_number
      into v_account_number
    --#sprint
      from corporate_account a, sttm_cust_account b
     where a.account_number = b.cust_ac_no
       and a.corp_id = p_corp_id
       and b.auth_stat = 'A'
       and b.ccy = 'NGN'
       and acc_net_bal(b.cust_ac_no) >= 3500
       and apps.fcr_get_acct_status(b.ac_stat_no_dr,
                                    b.ac_stat_no_cr,
                                    b.ac_stat_block,
                                    b.ac_stat_stop_pay,
                                    b.ac_stat_dormant,
                                    b.ac_stat_frozen,
                                    b.record_stat,
                                    b.ac_stat_de_post,
                                    b.acc_status) = 8
          
       and b.record_stat = 'O'
       and a.record_status_id = 2
       and a.approval_status_id = 2
       and rownum = 1
     order by a.created_date desc;
  
    return v_account_number;
  
  end;
  function getCorporateDefaultAccount(p_corp_id number) return varchar2 as
    v_account_number varchar2(50) := '';
  begin
  
    select a.account_number
      into v_account_number
    --#sprint
      from corporate_account a, sttm_cust_account b
     where a.account_number = b.cust_ac_no
       and a.corp_id = p_corp_id
       and b.auth_stat = 'A'
       and b.record_stat = 'O'
       and a.record_status_id = 2
       and a.approval_status_id = 2
       and rownum = 1
     order by a.created_date desc;
  
    return v_account_number;
  
  end;

  procedure sendPwd2User(p_recipient_name        varchar2,
                         p_recipient_number      varchar2,
                         p_password              varchar2,
                         p_target_account_number varchar2,
                         p_user_id               varchar2,
                         p_password_reset        char) as
        v_sms_template            varchar2(500);
    v_email_template          varchar2(3000);
    v_corporate_id            varchar2(300);
    v_username                varchar2(300);
    v_user_email_address      varchar2(2000);
    v_corporate_email_address varchar2(3000);
    v_app_url                 varchar2(200);
  begin
    select a.p_value
      into v_sms_template
      from cib_proc_properties a
     where a.p_key_name = 'P_CUSTOMER_PROFILE_MESSSAGE';
  
    select a.p_value
      into v_email_template
      from cib_proc_properties a
     where a.p_key_name = 'P_CUSTOMER_PROFILE_EMAIL';
  
    select a.p_value
      into v_app_url
      from cib_proc_properties a
     where a.p_key_name = 'P_APP_URL';
  
    select a.corporate_id, b.username, a.email, b.email
      into v_corporate_id,
           v_username,
           v_corporate_email_address,
           v_user_email_address
      from corporate_profile a, user_profile b
     where a.corp_id = b.corp_id
       and b.user_id = p_user_id;
  
    v_sms_template := replace(v_sms_template, '#FNAME#', p_recipient_name);
    v_sms_template := replace(v_sms_template, '#PASSWORD#', p_password);
  
    send_sms(p_recipient_number, v_sms_template, p_target_account_number);
  
    v_email_template := replace(v_email_template,
                                '#FNAME#',
                                p_recipient_name);
    v_email_template := replace(v_email_template,
                                '#CORPORATE_ID#',
                                v_corporate_id);
    v_email_template := replace(v_email_template, '#USERNAME#', v_username);
  
    v_email_template := replace(v_email_template, '#P_APP_URL#', v_app_url);
  
    if (p_password_reset = 'N') then
      INSERT INTO EMAIL_SCHEDULES
        (CREATED_BY,
         SCHEDULE_ID,
         EMAIL_SUBJECT,
         CREATED_DATE,
         TO_ADDRESS,
         EMAIL_BODY,
         cc_address)
      VALUES
        ('SYSTEM',
         EMAIL_SCHEDULES_SEQ.NEXTVAL,
         'You Have Been Profiled on Union360',
         sysdate,
         v_user_email_address,
         v_email_template,
         v_corporate_email_address
         
         );
    end if;
  
  end;

  FUNCTION updateProcessedRecordsSummary(p_THREAD_id IN VARCHAR2)
    RETURN VARCHAR2 IS
    v_batchid               VARCHAR2(200);
    v_processingstatus      VARCHAR2(100);
    v_pendingcount          INTEGER;
    v_trancount             INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_totalamt              NUMBER(18, 2);
    v_totalcharge           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_failurecount          INTEGER;
    v_processedcount        INTEGER;
    v_noofrecords           INTEGER;
    v_unknownstatuscount    INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
  BEGIN
    SET TRANSACTION READ WRITE;
    v_reversalamt        := 0.0;
    v_unknownstatuscount := 0;
    FOR item IN (SELECT a.batch_id, a.posting_option_id
                   FROM TRANSACTION_BATCH_SUMMARY a
                  WHERE a.PROCESSING_STATUS = '22'
                    and a.THREAD_ID = p_THREAD_id) LOOP
    
      -- BEGIN
    
      v_trancount   := 0;
      v_totalamt    := 0.0;
      v_totalcharge := 0.0;
      select count(1)
        into v_pendingcount
        from TRANSACTION_BATCH_DETAIL
       where batch_id = item.batch_id
         and TRANSACTION_STATUS = 'FAILED'
         AND IS_SUMMARY_TABLE_UPDATED = 'N'
         AND PROCESSING_STATUS = '07';
    
      IF (v_pendingcount > 0) THEN
      
        UPDATE TRANSACTION_BATCH_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '07';
        select count(1), sum(AMOUNT), sum(CHARGE_AMOUNT)
          into v_trancount, v_totalamt, v_totalcharge
          from TRANSACTION_BATCH_DETAIL
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '07';
      
        IF (item.POSTING_OPTION_ID = 1) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET NO_OF_RECORDS_FAILED   =
                 (NO_OF_RECORDS_FAILED + v_trancount),
                 FAILURE_COUNT          =
                 (FAILURE_COUNT + v_trancount),
                 TOTAL_TRAN_AMT_FAILED  =
                 (TOTAL_TRAN_AMT_FAILED + v_totalamt),
                 TOTAL_CHARGE_AMT_FAILED =
                 (TOTAL_CHARGE_AMT_FAILED + v_totalcharge),
                 REVERSED_TOTAL_AMOUNT  =
                 (REVERSED_TOTAL_AMOUNT + v_totalamt),
                 REVERSED_TOTAL_CHARGE  =
                 (REVERSED_TOTAL_CHARGE + v_totalcharge),
                 PROCESSED_RECORD_COUNT =
                 (PROCESSED_RECORD_COUNT + v_trancount)
           WHERE BATCH_ID = item.batch_id;
        ELSIF (item.POSTING_OPTION_ID = 2) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET NO_OF_RECORDS_FAILED         =
                 (NO_OF_RECORDS_FAILED + v_trancount),
                 FAILURE_COUNT                =
                 (FAILURE_COUNT + v_trancount),
                 TOTAL_TRAN_AMT_FAILED        =
                 (TOTAL_TRAN_AMT_FAILED + v_totalamt),
                 TOTAL_CHARGE_AMT_FAILED      =
                 (TOTAL_CHARGE_AMT_FAILED + v_totalcharge),
                 EXPECTED_TRANSIT_REVERSAL_AMT =
                 (EXPECTED_TRANSIT_REVERSAL_AMT + v_totalamt),
                 EXPECTED_TRANSIT_REVERSAL_FEE =
                 (EXPECTED_TRANSIT_REVERSAL_FEE + v_totalcharge),
                 PROCESSED_RECORD_COUNT       =
                 (PROCESSED_RECORD_COUNT + v_trancount)
           WHERE BATCH_ID = item.batch_id;
        END IF;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'Y'
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '07';
      
        /*    v_trancount   := 0;
        v_totalamt    := 0.0;
        v_totalcharge := 0.0;
        select count(1)
          into v_pendingcount
          from TRANSACTION_BATCH_DETAIL
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '98';
        
        IF (v_pendingcount > 0) THEN
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           where batch_id = item.batch_id
             and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'N'
             AND PROCESSING_STATUS = '98';
          select count(1), sum(AMOUNT), sum(CHARGE_AMOUNT)
            into v_trancount, v_totalamt, v_totalcharge
            from TRANSACTION_BATCH_DETAIL
           where batch_id = item.batch_id
             and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '98';
        
          IF (item.POSTING_OPTION_ID = 1) THEN
            UPDATE TRANSACTION_BATCH_SUMMARY
               SET NO_OF_RECORDS_FAILED   =
                   (NO_OF_RECORDS_FAILED + v_trancount),
                   FAILURE_COUNT          =
                   (FAILURE_COUNT + v_trancount),
                   TOTAL_TRAN_AMT_FAILED  =
                   (TOTAL_TRAN_AMT_FAILED + v_totalamt),
                   TOTAL_CHARGE_AMT_FAILED =
                   (TOTAL_CHARGE_AMT_FAILED + v_totalcharge),
                   REVERSED_TOTAL_AMOUNT  =
                   (REVERSED_TOTAL_AMOUNT + v_totalamt),
                   REVERSED_TOTAL_CHARGE  =
                   (REVERSED_TOTAL_CHARGE + v_totalcharge),
                   PROCESSED_RECORD_COUNT =
                   (PROCESSED_RECORD_COUNT + v_trancount)
             WHERE BATCH_ID = item.batch_id;
          ELSIF (item.POSTING_OPTION_ID = 2) THEN
            UPDATE TRANSACTION_BATCH_SUMMARY
               SET NO_OF_RECORDS_FAILED         =
                   (NO_OF_RECORDS_FAILED + v_trancount),
                   FAILURE_COUNT                =
                   (FAILURE_COUNT + v_trancount),
                   TOTAL_TRAN_AMT_FAILED        =
                   (TOTAL_TRAN_AMT_FAILED + v_totalamt),
                   TOTAL_CHARGE_AMT_FAILED      =
                   (TOTAL_CHARGE_AMT_FAILED + v_totalcharge),
                   EXPECTED_TRANSIT_REVERSAL_AMT =
                   (EXPECTED_TRANSIT_REVERSAL_AMT + v_totalamt),
                   EXPECTED_TRANSIT_REVERSAL_FEE =
                   (EXPECTED_TRANSIT_REVERSAL_FEE + v_totalcharge),
                   PROCESSED_RECORD_COUNT       =
                   (PROCESSED_RECORD_COUNT + v_trancount)
             WHERE BATCH_ID = item.batch_id;
          END IF;
          UPDATE TRANSACTION_BATCH_DETAIL
             SET IS_SUMMARY_TABLE_UPDATED = 'Y',PROCESSING_STATUS = '07'
           where batch_id = item.batch_id
             and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '07';
        */
      
        v_trancount    := 0;
        v_totalamt     := 0.0;
        v_totalcharge  := 0.0;
        v_pendingcount := 0;
      END IF;
    
      select count(1)
        into v_pendingcount
        from TRANSACTION_BATCH_DETAIL
       where batch_id = item.batch_id
         and TRANSACTION_STATUS = 'FAILED'
         AND IS_SUMMARY_TABLE_UPDATED = 'N'
         AND PROCESSING_STATUS = '12';
    
      IF (v_pendingcount > 0) THEN
      
        UPDATE TRANSACTION_BATCH_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '12';
        select count(1), sum(AMOUNT), sum(CHARGE_AMOUNT)
          into v_trancount, v_totalamt, v_totalcharge
          from TRANSACTION_BATCH_DETAIL
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '12';
      
        IF (item.POSTING_OPTION_ID = 1) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET NO_OF_RECORDS_FAILED   =
                 (NO_OF_RECORDS_FAILED + v_trancount),
                 FAILURE_COUNT          =
                 (FAILURE_COUNT + v_trancount),
                 TOTAL_TRAN_AMT_FAILED  =
                 (TOTAL_TRAN_AMT_FAILED + v_totalamt),
                 TOTAL_CHARGE_AMT_FAILED =
                 (TOTAL_CHARGE_AMT_FAILED + v_totalcharge),
                 PROCESSED_RECORD_COUNT =
                 (PROCESSED_RECORD_COUNT + v_trancount)
           WHERE BATCH_ID = item.batch_id;
        ELSIF (item.POSTING_OPTION_ID = 2) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET NO_OF_RECORDS_FAILED   =
                 (NO_OF_RECORDS_FAILED + v_trancount),
                 FAILURE_COUNT          =
                 (FAILURE_COUNT + v_trancount),
                 TOTAL_TRAN_AMT_FAILED  =
                 (TOTAL_TRAN_AMT_FAILED + v_totalamt),
                 TOTAL_CHARGE_AMT_FAILED =
                 (TOTAL_CHARGE_AMT_FAILED + v_totalcharge),
                 PROCESSED_RECORD_COUNT =
                 (PROCESSED_RECORD_COUNT + v_trancount)
           WHERE BATCH_ID = item.batch_id;
        END IF;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'Y'
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '12';
      
        v_trancount    := 0;
        v_totalamt     := 0.0;
        v_totalcharge  := 0.0;
        v_pendingcount := 0;
      END IF;
    
      select count(1)
        into v_pendingcount
        from TRANSACTION_BATCH_DETAIL
       where batch_id = item.batch_id
         and TRANSACTION_STATUS = 'UNKNOWN'
         AND IS_SUMMARY_TABLE_UPDATED = 'N'
         AND PROCESSING_STATUS = '14';
    
      IF (v_pendingcount > 0) THEN
      
        UPDATE TRANSACTION_BATCH_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'UNKNOWN'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '14';
        select count(1), sum(AMOUNT), sum(CHARGE_AMOUNT)
          into v_trancount, v_totalamt, v_totalcharge
          from TRANSACTION_BATCH_DETAIL
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'UNKNOWN'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '14';
      
        IF (item.POSTING_OPTION_ID = 1) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET NO_OF_RECORDS_UNKNOWN_STATUS =
                 (NO_OF_RECORDS_UNKNOWN_STATUS + v_trancount),
                 TOTAL_TRAN_AMT_UNKNOWN_STATUS =
                 (TOTAL_TRAN_AMT_UNKNOWN_STATUS + v_totalamt),
                 TOTAL_CHARGE_UNKNOWN_STATUS  =
                 (TOTAL_CHARGE_UNKNOWN_STATUS + v_totalcharge),
                 PROCESSED_RECORD_COUNT       =
                 (PROCESSED_RECORD_COUNT + v_trancount)
           WHERE BATCH_ID = item.batch_id;
        ELSIF (item.POSTING_OPTION_ID = 2) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET NO_OF_RECORDS_UNKNOWN_STATUS =
                 (NO_OF_RECORDS_UNKNOWN_STATUS + v_trancount),
                 TOTAL_TRAN_AMT_UNKNOWN_STATUS =
                 (TOTAL_TRAN_AMT_UNKNOWN_STATUS + v_totalamt),
                 TOTAL_CHARGE_UNKNOWN_STATUS  =
                 (TOTAL_CHARGE_UNKNOWN_STATUS + v_totalcharge),
                 PROCESSED_RECORD_COUNT       =
                 (PROCESSED_RECORD_COUNT + v_trancount)
           WHERE BATCH_ID = item.batch_id;
        END IF;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'Y'
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'UNKNOWN'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '14';
      
        v_trancount    := 0;
        v_totalamt     := 0.0;
        v_totalcharge  := 0.0;
        v_pendingcount := 0;
      END IF;
    
      select count(1)
        into v_pendingcount
        from TRANSACTION_BATCH_DETAIL
       where batch_id = item.batch_id
         and TRANSACTION_STATUS = 'SUCCESSFUL'
         AND IS_SUMMARY_TABLE_UPDATED = 'N'
         AND PROCESSING_STATUS = '00';
    
      IF (v_pendingcount > 0) THEN
      
        UPDATE TRANSACTION_BATCH_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'SUCCESSFUL'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '00';
        select count(1), sum(AMOUNT), sum(CHARGE_AMOUNT)
          into v_trancount, v_totalamt, v_totalcharge
          from TRANSACTION_BATCH_DETAIL
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'SUCCESSFUL'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '00';
      
        IF (item.POSTING_OPTION_ID = 1) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET NO_OF_RECORDS_SUCCESSFUL   =
                 (NO_OF_RECORDS_SUCCESSFUL + v_trancount),
                 TOTAL_TRAN_AMT_SUCCESSFUL  =
                 (TOTAL_TRAN_AMT_SUCCESSFUL + v_totalamt),
                 TOTAL_CHARGE_AMT_SUCCESSFUL =
                 (TOTAL_CHARGE_AMT_SUCCESSFUL + v_totalcharge),
                 PROCESSED_RECORD_COUNT     =
                 (PROCESSED_RECORD_COUNT + v_trancount)
           WHERE BATCH_ID = item.batch_id;
        ELSIF (item.POSTING_OPTION_ID = 2) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET NO_OF_RECORDS_SUCCESSFUL   =
                 (NO_OF_RECORDS_SUCCESSFUL + v_trancount),
                 TOTAL_TRAN_AMT_SUCCESSFUL  =
                 (TOTAL_TRAN_AMT_SUCCESSFUL + v_totalamt),
                 TOTAL_CHARGE_AMT_SUCCESSFUL =
                 (TOTAL_CHARGE_AMT_SUCCESSFUL + v_totalcharge),
                 PROCESSED_RECORD_COUNT     =
                 (PROCESSED_RECORD_COUNT + v_trancount)
           WHERE BATCH_ID = item.batch_id;
        END IF;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'Y'
         where batch_id = item.batch_id
           and TRANSACTION_STATUS = 'SUCCESSFUL'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '00';
      
        v_trancount    := 0;
        v_totalamt     := 0.0;
        v_totalcharge  := 0.0;
        v_pendingcount := 0;
      END IF;
    
      select NO_OF_RECORD,
             FAILURE_COUNT,
             PROCESSED_RECORD_COUNT,
             NO_OF_RECORDS_UNKNOWN_STATUS
        into v_noofrecords,
             v_failurecount,
             v_processedcount,
             v_unknownstatuscount
        from TRANSACTION_BATCH_SUMMARY
       where batch_id = item.batch_id;
    
      IF (v_noofrecords = v_processedcount) THEN
        --PROCESSING_STATUS
        --v_processingstatus
        IF (v_failurecount = v_noofrecords) THEN
          v_processingstatus := '07';
        ELSIF ((v_failurecount > 0 AND v_failurecount < v_noofrecords) or
              v_unknownstatuscount > 0) THEN
          --ELSIF (v_failurecount > 0 or v_unknownstatuscount >0) THEN
          v_processingstatus := '06';
          -- ELSIF (v_failurecount = 0) THEN
        ELSIF (v_failurecount = 0 and v_unknownstatuscount = 0) THEN
          v_processingstatus := '00';
        END IF;
        UPDATE TRANSACTION_BATCH_SUMMARY
           SET PROCESSING_STATUS = v_processingstatus
         WHERE BATCH_ID = item.batch_id;
      
      END IF;
    
    --END;
    END LOOP;
    --select * from RIA_INVOICES
  
    -- END;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION add_gefupostingparameters_rev(batchid              IN VARCHAR2,
                                         initiatingbranch     IN VARCHAR2,
                                         requestmodule        IN VARCHAR2,
                                         modulecredentials    IN VARCHAR2,
                                         transactioncurrency  IN VARCHAR2,
                                         acccountnumber       IN VARCHAR2,
                                         branchcode           IN VARCHAR2,
                                         amount               IN VARCHAR2,
                                         debitcreditindicator IN VARCHAR2,
                                         glcasaindicator      IN VARCHAR2,
                                         mnemonic             IN VARCHAR2,
                                         narration            IN VARCHAR2,
                                         paymentreference     IN VARCHAR2,
                                         transactionid        IN VARCHAR2,
                                         isinterbanktransfer  IN VARCHAR2,
                                         uids                 IN VARCHAR2,
                                         invoiceid            IN VARCHAR2,
                                         collectiontypeid     IN VARCHAR2,
                                         parentrecordid       IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
    v_count  INTEGER;
    v_payref VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_payref := paymentreference;
    v_count  := 0;
    --select * from RIA_INVOICES
    -- SELECT COUNT(1)into v_count FROM gefuposting_parameters_rev WHERE PAYMENTREFERENCE=v_payref AND ((RESPONSECODE IN('00','94')) OR (RESPONSECODE IS NULL AND CREATEDTIME between sysdate-(5/1440) and sysdate));
    SELECT COUNT(1)
      into v_count
      FROM gefuposting_parameters_rev
     WHERE PAYMENTREFERENCE = v_payref
       AND ((RESPONSECODE IN ('00', '94')));
  
    if (v_count = 0) then
      INSERT INTO gefuposting_parameters_rev
        (recordid,
         batchid,
         initiatingbranch,
         requestmodule,
         modulecredentials,
         transactioncurrency,
         acccountnumber,
         branchcode,
         amount,
         debitcreditindicator,
         glcasaindicator,
         mnemonic,
         narration,
         paymentreference,
         transactionid,
         isinterbanktransfer,
         uids,
         BATCH_DETAIL_ID,
         PAYMENT_TYPE_ID,
         parentguids)
      VALUES
        (posting_principal_seq.NEXTVAL,
         batchid,
         initiatingbranch,
         requestmodule,
         modulecredentials,
         transactioncurrency,
         acccountnumber,
         branchcode,
         amount,
         debitcreditindicator,
         glcasaindicator,
         mnemonic,
         narration,
         paymentreference,
         transactionid,
         isinterbanktransfer,
         uids,
         invoiceid,
         collectiontypeid,
         parentrecordid);
    
      COMMIT;
      RETURN 'SUCCESS';
    else
      RETURN 'Record Already Exist for payment reference ' || v_payref;
    end if;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION fetchpostingparameters_rev(postingsessionid IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT *
      --from GEFUPOSTING_PARAMETERS where UIDS=postingsessionid and DEBITCREDITINDICATOR='C';
        FROM gefuposting_parameters
       WHERE uids = postingsessionid;
  
    RETURN o_refcursor;
  END;
  FUNCTION getCorporateLimitSetup(i_corpId varchar2)
    RETURN CORPORATE_LIMITS%rowtype IS
    v_corporate_limit   CORPORATE_LIMITS%rowtype;
    v_found             integer := 0;
    v_corporate_type_id number;
  BEGIN
    select corporate_type_id
      into v_corporate_type_id
      from corporate_profile
     where corp_id = i_corpId;
    select count(1)
      into v_found
      from CORPORATE_LIMITS a
     where a.corp_id = i_corpId
       and a.record_status_id in (1, 2);
    if (v_found = 0) then
    
      select *
        into v_corporate_limit
        from CORPORATE_LIMITS a
       where a.corp_id = 1
         and a.target_corporate_type_id = v_corporate_type_id
         and a.record_status_id in (1, 2);
    else
      select *
        into v_corporate_limit
        from CORPORATE_LIMITS a
       where a.corp_id = i_corpId
         and a.record_status_id in (1, 2);
    end if;
    RETURN v_corporate_limit;
  END getCorporateLimitSetup;

  function removeDuplicateEmails(p_delimited_emails varchar2) return varchar2 as
  
    TYPE string_array_type IS TABLE OF VARCHAR2(4000);
    l_array        string_array_type;
    l_final_string varchar(4000) := '';
  
  BEGIN
    SELECT DISTINCT REGEXP_SUBSTR(p_delimited_emails, '[^;]+', 1, LEVEL)
      BULK COLLECT
      INTO l_array
      FROM DUAL
    CONNECT BY REGEXP_SUBSTR(p_delimited_emails, '[^;]+', 1, LEVEL) IS NOT NULL
     ORDER BY 1;
  
    for i in 1 .. l_array.count loop
      l_final_string := l_final_string || ';' || l_array(i);
    end loop;
    return substr(l_final_string, 2);
  END;

  function isCorporateSoleProprietorship(p_corp_id varchar2) return char as
    v_count_flag integer := 0;
  begin
  
    select count(1)
      into v_count_flag
      from corporate_profile x
     where x.corp_id = p_corp_id
       and x.is_a_solepropriator = 'Y';
  
    if (v_count_flag > 0) then
      return 'Y';
    else
      return 'N';
    end if;
  
  end;


  function getFriendlyExceptionMessage(p_raw_error_message varchar2,
                                       p_menu_id           integer)
    return varchar2
  
   as
    v_menu_desc VARCHAR2(100);
    v_response  varchar2(500);
  begin
    select a.menuname
      into v_menu_desc
      from menu a
     where a.menuid = p_menu_id;
    if p_raw_error_message is null then
      v_response := '99~~Error occured while processing your request.';
    elsif p_raw_error_message like '%no data found%' then
      v_response := '99~~Error occured while processing your request.';
    elsif p_raw_error_message like '%unique constraint%' then
      v_response := '99~~Record already exists.';
    elsif p_raw_error_message like '%invalid number%' then
      v_response := '99~~Invalid information supplied. Please review and try again.';
    elsif p_raw_error_message like '%cannot insert NULL%' then
      v_response := '99~~Required field(s) cannot be empty.';
    else
      v_response := '99~~Error occured while processing your request.';
    end if;
    return v_response || ' (' || v_menu_desc || ')';
  exception
    when others THEN
      return '99~~Error occured while processing your request.';
  end;

  function createEventLog(p_USER_ID          number,
                          p_SESSION_ID       VARCHAR2,
                          p_EVENT_CATEGORY   varchar2,
                          p_EVENT_DETAIL     VARCHAR2,
                          p_CONTEXT_URL      varchar2,
                          p_IP_MAC_ADDRESS   varchar2,
                          p_SOURCE_APP_NAME  varchar2,
                          p_target_reference varchar2) return varchar2 as
    pragma autonomous_transaction;
    v_corp_id number;
  begin
  
    begin
      select corp_id
        into v_corp_id
        from user_profile
       where user_id = p_USER_ID;
    exception
      when no_data_found then
        v_corp_id := 0;
    end;
  
    insert into audit_log
      (USER_ID,
       SESSION_ID,
       EVENT_CATEGORY,
       EVENT_DETAIL,
       CONTEXT_URL,
       IP_ADDRESS,
       target_reference,
       corp_id)
    values
      (p_USER_ID,
       p_SESSION_ID,
       p_EVENT_CATEGORY,
       p_EVENT_DETAIL,
       p_CONTEXT_URL,
       p_IP_MAC_ADDRESS,
       p_target_reference,
       v_corp_id);
    commit;
    return '00';
  
  exception
    when others then
      return '99';
    
  end createEventLog;

  procedure createAuditLog(p_USER_ID        VARCHAR2,
                           p_SESSION_ID     VARCHAR2,
                           p_EVENT_CATEGORY varchar2,
                           p_EVENT_DETAIL   VARCHAR2,
                           p_CONTEXT_URL    varchar2,
                           p_IP_MAC_ADDRESS varchar2,
                           -- p_SOURCE_APP_NAME varchar2,
                           p_MENU_ID          varchar2,
                           p_request_type_id  VARCHAR2,
                           p_response         varchar2,
                           p_target_reference varchar2) as
    v_request_type_desc varchar2(100) := '';
    v_menu_desc         varchar2(100) := '';
    v_menu_url          varchar2(100) := '';
    v_err_message       VARCHAR2(100) := '';
    v_response          varchar2(100) := '';
  begin
    select a.description
      into v_request_type_desc
      from ref_request_type a
     where a.request_type_id = p_request_type_id;
  
    begin
      select a.menuname, a.menuurl
        into v_menu_desc, v_menu_url
        from menu a
       where a.menuid = p_MENU_ID;
    exception
      when no_data_found then
        v_menu_desc := p_MENU_ID;
      
        v_menu_url := p_MENU_ID;
      
    end;
  
    v_response := createEventLog(p_USER_ID,
                                 p_SESSION_ID,
                                 p_EVENT_CATEGORY,
                                 v_request_type_desc || '~~' || p_response || '~~' ||
                                 p_EVENT_DETAIL || ' via ' || v_menu_desc || '~~' ||
                                 v_menu_url,
                                 p_CONTEXT_URL || '~~' || v_menu_url,
                                 p_IP_MAC_ADDRESS,
                                 'CIBANK',
                                 p_target_reference);
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createAuditLog');
    
  end;

  FUNCTION add_quickteller_log(v_recordid     IN VARCHAR2,
                               v_batchid      IN VARCHAR2,
                               v_reqxml       IN VARCHAR2,
                               v_resp_code    IN VARCHAR2,
                               v_resp_msg     IN VARCHAR2,
                               v_payment_type IN VARCHAR2,
                               v_resp_xml     IN VARCHAR2,
                               v_req_type     IN VARCHAR2,
                               v_recharge_pin IN VARCHAR2) RETURN VARCHAR2 IS
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_initiate_reversal     INTEGER;
    v_retry                 INTEGER;
    v_defaulttrialintervals INTEGER;
    -- v_err                 VARCHAR2 (3000);
    v_batch_id VARCHAR2(100);
    /*v_batch_count         INTEGER;*/
  BEGIN
    -- SET TRANSACTION READ WRITE;
    v_reversalamt := 0.0;
    --select * from RIA_INVOICES
    IF (v_req_type = '1') THEN
      INSERT INTO QUICKTELLER_LOGS
        (
         
         REQUEST_XML,
         BATCH_DETAIL_ID,
         CREATEDTIME,
         RECORDID,
         PAYMENT_TYPE_ID)
      VALUES
        (
         
         v_reqxml,
         v_batchid,
         SYSDATE,
         v_recordid,
         v_payment_type);
    ELSIF (v_req_type = '2') THEN
    
      UPDATE QUICKTELLER_LOGS
         SET RESPONSE_CODE    = v_resp_code,
             RESPONSE_XML     = v_resp_xml,
             RESPONSE_MESSAGE = v_resp_msg,
             RESPONSETIME     = SYSDATE
      
       WHERE RECORDID = v_recordid;
    
      IF (v_resp_code = '90000') THEN
        v_processingstatus := '00';
      
        update TRANSACTION_BATCH_DETAIL
           set PROCESSING_STATUS           = v_processingstatus,
               THIRDPARTY_RESPONSE_MESSAGE = v_resp_msg,
               THIRDPARTY_GUID             = v_recordid,
               TRANSACTION_STATUS          = 'SUCCESSFUL',
               BILLER_RECHARGE_PIN         = v_recharge_pin,
               THIRDPARTY_RESPONSE_CODE    = v_resp_code,
               ERROR_TRIAL_COUNT           = 0,
               THIRDPARTY_RESPONSE_DATE    = SYSDATE
         where BATCH_DETAIL_ID = v_batchid;
      ELSE
        --v_processingstatus := '16';
        select count(1)
          into v_retry
          from PAYMENTS.REF_RESPONSE_CODES
         where RESPONSE_CODE = v_resp_code
           AND RETRY = 'Y'
           and CHANNEL_CODE = 'QUICKTELLER';
      
        SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
          INTO v_defaulttrialcount, v_defaulttrialintervals
          FROM REF_ERROR_TRIAL_COUNT_INTERVAL
         WHERE ROWNUM < 2;
      
        select ERROR_TRIAL_COUNT, BATCH_ID
          into v_trialcount, v_batch_id
          from TRANSACTION_BATCH_DETAIL
         where BATCH_DETAIL_ID = v_batchid;
        IF ((v_trialcount < v_defaulttrialcount) and v_retry > 0) THEN
          update TRANSACTION_BATCH_DETAIL
             set PROCESSING_STATUS           = '-05',
                 ERROR_TRIAL_COUNT          =
                 (ERROR_TRIAL_COUNT + 1),
                 NEXT_TRIAL_TIME            =
                 (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                 THIRDPARTY_RESPONSE_MESSAGE = v_resp_msg,
                 THIRDPARTY_GUID             = v_recordid,
                 BILLER_RECHARGE_PIN         = v_recharge_pin,
                 THIRDPARTY_RESPONSE_CODE    = v_resp_code,
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE
           where BATCH_DETAIL_ID = v_batchid;
        ELSE
          --  SELECT (AMOUNT + CHARGE_AMOUNT) INTO v_reversalamt FROM TRANSACTION_BATCH_DETAIL WHERE BATCH_DETAIL_ID=v_batchid;
        
          select count(1)
            into v_initiate_reversal
            from PAYMENTS.REF_RESPONSE_CODES
           where RESPONSE_CODE = v_resp_code
             AND REVERSE = 'Y'
             and CHANNEL_CODE = 'QUICKTELLER';
        
          IF (v_initiate_reversal > 0) THEN
            update TRANSACTION_BATCH_DETAIL
               set PROCESSING_STATUS           = '13',
                   ERROR_TRIAL_COUNT           = 0,
                   ERROR_PROCESSING_STATUS     = '16',
                   THIRDPARTY_RESPONSE_MESSAGE = v_resp_msg,
                   THIRDPARTY_GUID             = v_recordid,
                   BILLER_RECHARGE_PIN         = v_recharge_pin,
                   THIRDPARTY_RESPONSE_CODE    = v_resp_code,
                   TRANSACTION_STATUS          = 'FAILED',
                   FAILURE_REASON              = v_resp_msg,
                   THIRDPARTY_RESPONSE_DATE    = SYSDATE
             where BATCH_DETAIL_ID = v_batchid;
          ELSE
            update TRANSACTION_BATCH_DETAIL
               set PROCESSING_STATUS           = '14',
                   ERROR_TRIAL_COUNT           = 0,
                   ERROR_PROCESSING_STATUS     = '16',
                   THIRDPARTY_RESPONSE_MESSAGE = v_resp_msg,
                   THIRDPARTY_GUID             = v_recordid,
                   BILLER_RECHARGE_PIN         = v_recharge_pin,
                   THIRDPARTY_RESPONSE_CODE    = v_resp_code,
                   MANUAL_SETTLEMENT_ADVISED   = 'Y',
                   TRANSACTION_STATUS          = 'UNKNOWN',
                   FAILURE_REASON              = v_resp_msg,
                   THIRDPARTY_RESPONSE_DATE    = SYSDATE
             where BATCH_DETAIL_ID = v_batchid;
          END IF;
          /*update TRANSACTION_BATCH_SUMMARY
            set FAILURE_COUNT =
                (FAILURE_COUNT + 1),PROCESSED_RECORD_COUNT=(PROCESSED_RECORD_COUNT+1), EXPECTED_REVERSAL_AMOUNT=(EXPECTED_REVERSAL_AMOUNT+v_reversalamt) 
          where BATCH_ID = v_batch_id;*/
        END IF;
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  /* FUNCTION add_quickteller_log(v_recordid     IN VARCHAR2,
                               v_batchid      IN VARCHAR2,
                               v_reqxml       IN VARCHAR2,
                               v_resp_code    IN VARCHAR2,
                               v_resp_msg     IN VARCHAR2,
                               v_payment_type IN VARCHAR2,
                               v_resp_xml     IN VARCHAR2,
                               v_req_type     IN VARCHAR2,
                               v_recharge_pin IN VARCHAR2) RETURN VARCHAR2 IS
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    -- v_err                 VARCHAR2 (3000);
    v_batch_id VARCHAR2(100);
    
  BEGIN
    -- SET TRANSACTION READ WRITE;
    v_reversalamt := 0.0;
    --select * from RIA_INVOICES
    IF (v_req_type = '1') THEN
      INSERT INTO QUICKTELLER_LOGS
        (
         
         REQUEST_XML,
         BATCH_DETAIL_ID,
         CREATEDTIME,
         RECORDID,
         PAYMENT_TYPE_ID)
      VALUES
        (
         
         v_reqxml,
         v_batchid,
         SYSDATE,
         v_recordid,
         v_payment_type);
    ELSIF (v_req_type = '2') THEN
    
      UPDATE QUICKTELLER_LOGS
         SET RESPONSE_CODE    = v_resp_code,
             RESPONSE_XML     = v_resp_xml,
             RESPONSE_MESSAGE = v_resp_msg,
             RESPONSETIME     = SYSDATE
      
       WHERE RECORDID = v_recordid;
    
      IF (v_resp_code = '90000') THEN
        v_processingstatus := '00';
      
        update TRANSACTION_BATCH_DETAIL
           set PROCESSING_STATUS           = v_processingstatus,
               THIRDPARTY_RESPONSE_MESSAGE = v_resp_msg,
               THIRDPARTY_GUID             = v_recordid,
               BILLER_RECHARGE_PIN         = v_recharge_pin,
               THIRDPARTY_RESPONSE_CODE    = v_resp_code,
               ERROR_TRIAL_COUNT           = 0,
               THIRDPARTY_RESPONSE_DATE    = SYSDATE
         where BATCH_DETAIL_ID = v_batchid;
      ELSE
        --v_processingstatus := '16';
        SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
          INTO v_defaulttrialcount, v_defaulttrialintervals
          FROM REF_ERROR_TRIAL_COUNT_INTERVAL
         WHERE ROWNUM < 2;
      
        select ERROR_TRIAL_COUNT, BATCH_ID
          into v_trialcount, v_batch_id
          from TRANSACTION_BATCH_DETAIL
         where BATCH_DETAIL_ID = v_batchid;
        IF (v_trialcount < v_defaulttrialcount) THEN
          update TRANSACTION_BATCH_DETAIL
             set PROCESSING_STATUS           = '-05',
                 ERROR_TRIAL_COUNT          =
                 (ERROR_TRIAL_COUNT + 1),
                 NEXT_TRIAL_TIME            =
                 (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                 THIRDPARTY_RESPONSE_MESSAGE = v_resp_msg,
                 THIRDPARTY_GUID             = v_recordid,
                 BILLER_RECHARGE_PIN         = v_recharge_pin,
                 THIRDPARTY_RESPONSE_CODE    = v_resp_code,
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE
           where BATCH_DETAIL_ID = v_batchid;
        ELSE
          --  SELECT (AMOUNT + CHARGE_AMOUNT) INTO v_reversalamt FROM TRANSACTION_BATCH_DETAIL WHERE BATCH_DETAIL_ID=v_batchid;
        
          update TRANSACTION_BATCH_DETAIL
             set PROCESSING_STATUS           = '13',
                 ERROR_TRIAL_COUNT           = 0,
                 ERROR_PROCESSING_STATUS     = '16',
                 THIRDPARTY_RESPONSE_MESSAGE = v_resp_msg,
                 THIRDPARTY_GUID             = v_recordid,
                 BILLER_RECHARGE_PIN         = v_recharge_pin,
                 THIRDPARTY_RESPONSE_CODE    = v_resp_code,
                 TRANSACTION_STATUS          = 'FAILED',
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE
           where BATCH_DETAIL_ID = v_batchid;
        
        
        END IF;
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;*/

  FUNCTION add_nipfundtransfer(accountname             IN VARCHAR2,
                               accountnumber           IN VARCHAR2,
                               amount                  IN VARCHAR2,
                               bankverificationnumber  IN VARCHAR2,
                               channelcode             IN VARCHAR2,
                               destinationbankcode     IN VARCHAR2,
                               kyclevel                IN VARCHAR2,
                               modulecredentials       IN VARCHAR2,
                               nameenquirysessionid    IN VARCHAR2,
                               narration               IN VARCHAR2,
                               originatoraccountnumber IN VARCHAR2,
                               originatorbvn           IN VARCHAR2,
                               originatorkyclevel      IN VARCHAR2,
                               originatorname          IN VARCHAR2,
                               paymentreference        IN VARCHAR2,
                               requestmodule           IN VARCHAR2,
                               sessionid               IN VARCHAR2,
                               transactionlocation     IN VARCHAR2,
                               uids                    IN VARCHAR2,
                               invoiceid               IN VARCHAR2,
                               collectiontypeid        IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
    v_count     INTEGER;
    v_sessionid VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
  
    v_sessionid := sessionid;
    v_count     := 0;
    -- SELECT COUNT(1) into v_count FROM nip_fundtransfer WHERE SESSIONID=v_sessionid AND ((RESPONSECODE IN('00')) OR (RESPONSECODE IS NULL AND CREATEDTIME between sysdate-(5/1440) and sysdate));
    SELECT COUNT(1)
      into v_count
      FROM nip_fundtransfer
     WHERE SESSIONID = v_sessionid
       AND (RESPONSECODE IN ('00'));
  
    --select * from RIA_INVOICES
    if (v_count = 0) then
      INSERT INTO nip_fundtransfer
        (recordid,
         accountname,
         accountnumber,
         amount,
         bankverificationnumber,
         channelcode,
         destinationbankcode,
         kyclevel,
         modulecredentials,
         nameenquirysessionid,
         narration,
         originatoraccountnumber,
         originatorbvn,
         originatorkyclevel,
         originatorname,
         paymentreference,
         requestmodule,
         sessionid,
         transactionlocation,
         uids,
         BATCH_DETAIL_ID,
         collectiontypeid)
      VALUES
        (nip_fundtransfer_seq.NEXTVAL,
         accountname,
         accountnumber,
         amount,
         bankverificationnumber,
         channelcode,
         destinationbankcode,
         kyclevel,
         modulecredentials,
         nameenquirysessionid,
         narration,
         originatoraccountnumber,
         originatorbvn,
         originatorkyclevel,
         originatorname,
         paymentreference,
         requestmodule,
         sessionid,
         transactionlocation,
         uids,
         invoiceid,
         collectiontypeid);
    
      COMMIT;
      RETURN 'SUCCESS';
    else
      RETURN 'Record Already Exist for payment sessionid ' || v_sessionid;
    end if;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION getdestinationbanksortcode(bankcodeorname IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT *
      --FROM FP_BANKS
        FROM newibank.RIB_BANKS_LIST
      
       WHERE DEL_FLG = 'N'
         and bnk_code = bankcodeorname;
  
    RETURN o_refcursor;
  END;

  FUNCTION getnibbssessionidseq RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT PAYMENTS.nibbs_sessionid_seq.NEXTVAL AS sessionid FROM DUAL;
  
    RETURN o_refcursor;
  END;

  FUNCTION updatethreadlastrun(v_threadid IN VARCHAR2) RETURN VARCHAR2 IS
    v_recordid    VARCHAR2(100);
    v_recordexist INTEGER;
    -- v_err                 VARCHAR2 (3000);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
  BEGIN
    SET TRANSACTION READ WRITE;
    select count(1)
      into v_recordexist
      from THREAD_LAST_RUN
     where THREAD_ID = v_threadid;
    IF (v_recordexist > 0) THEN
      UPDATE THREAD_LAST_RUN
         SET LAST_RUN_TIME = SYSDATE
       WHERE THREAD_ID = v_threadid;
    ELSE
      INSERT INTO THREAD_LAST_RUN
        (THREAD_ID, LAST_RUN_TIME)
      VALUES
        (v_threadid, SYSDATE);
    END IF;
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  
  END;

  PROCEDURE logerror(p_errormsg IN VARCHAR2, p_table_name IN VARCHAR2) AS
    v_err_message VARCHAR2(2000);
    PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    rollback;
    begin
      INSERT INTO rib_sr_error_log
        (error_date, error_msg, error_point)
      VALUES
        (SYSDATE, p_errormsg, p_table_name);
    
      COMMIT;
      --end;
    end;
  EXCEPTION
    WHEN OTHERS THEN
      -- Consider logging the error and then re-raise
      v_err_message := SQLERRM;
    
  END;
  function logemail(p_menuid IN VARCHAR2, p_scheduleid IN VARCHAR2)
    return varchar2 AS
  
    v_err_message               VARCHAR2(2000);
    v_trantype                  VARCHAR2(100);
    v_approval_schedule         APPROVAL_SCHEDULES%rowtype;
    v_transaction_batch_summary TRANSACTION_BATCH_SUMMARY%rowtype;
    v_corp_profile_req          CORPORATE_PROFILE_REQ%rowtype;
    v_approval_route_signatory  APPROVAL_ROUTE_SIGNATORIES%rowtype;
    v_request_type              VARCHAR2(200);
    v_corpid                    VARCHAR2(100);
    v_menutype                  VARCHAR2(100);
    v_isfinancialmenu           VARCHAR2(100);
    v_moduleid                  VARCHAR2(100);
    v_paymentype                VARCHAR2(200);
    v_totalamt                  VARCHAR2(100);
    v_totalcharge               VARCHAR2(100);
    v_noofrecords               VARCHAR2(100);
    p_narration                 VARCHAR2(200);
    p_requesttype               VARCHAR2(200);
    p_parenttableid             VARCHAR2(200);
    -- p_scheduleid    IN NUMBER,
    p_menuurl VARCHAR2(200);
    -- p_narration      VARCHAR2(200);
    p_dr_acct          VARCHAR2(200);
    p_amount           NUMBER;
    p_response_code    VARCHAR2(200);
    v_subject          VARCHAR2(500);
    v_user_emails      VARCHAR2(4000);
    v_group_email      varchar2(4000);
    v_dept_emails      varchar2(4000);
    v_initiator_emails varchar2(4000);
    v_recipient_emails varchar2(4000) := '';
  
    r_user_profile_req user_profile_req%rowtype;
  
    v_msg_body VARCHAR2(2000);
  BEGIN
    --v_err_message :='';
  
    SELECT ISTRANSACTION_MENU, TRANSACTION_TYPE, MENU_TYPE_ID, MODULE_ID
      INTO v_isfinancialmenu, v_trantype, v_menutype, v_moduleid
      FROM MENU
     WHERE MENUID = p_menuid;
  
    Select *
      into v_approval_schedule
      from APPROVAL_SCHEDULES
     where APPROVAL_SCHEDULE_ID = p_scheduleid;
  
    select DESCRIPTION
      into v_request_type
      from REF_REQUEST_TYPE
     where REQUEST_TYPE_ID = v_approval_schedule.REQUEST_TYPE_ID;
    IF (v_trantype in ('1', '2', '3', '25')) THEN
      --TRANSFERS
      -- (select TO_CHAR(NO_OF_RECORD, '999,999,999,999') from dual) || ')'
      SELECT *
        INTO v_transaction_batch_summary
        FROM TRANSACTION_BATCH_SUMMARY
       WHERE BATCH_ID = v_approval_schedule.PARENT_TABLE_ID;
      select TO_CHAR(v_transaction_batch_summary.TOTAL_TRAN_AMOUNT,
                     '999,999,999,999')
        into v_totalamt
        from dual;
      select TO_CHAR(v_transaction_batch_summary.TOTAL_CHARGE_AMT,
                     '999,999,999,999')
        into v_totalcharge
        from dual;
      select TO_CHAR(v_transaction_batch_summary.NO_OF_RECORD,
                     '999,999,999,999')
        into v_noofrecords
        from dual;
      select NAME
        into v_paymentype
        from REF_PAYMENT_TYPES
       where PAYMENT_TYPE_ID = v_transaction_batch_summary.PAYMENT_TYPE_ID;
      v_msg_body := '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
                    upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
                    '</p> <p>Please the request with details below is pending your approval:</p>' ||
                   --'<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
                    '<table border=1 cellspacing=0 BORDERCOLOR=black>' ||
                    '<tr><td><b>Transaction Description:</b></td><td>' ||
                    v_transaction_batch_summary.batch_description ||
                    '</td></tr>' ||
                    '<tr><td><b>Total Transaction Amount:</b></td><td>' ||
                    v_transaction_batch_summary.dr_account_currency_code ||
                    v_totalamt || '</td></tr>' ||
                    '<tr><td><b>Total Charge Amount:</b></td><td>' ||
                    v_transaction_batch_summary.dr_account_currency_code ||
                    v_totalcharge || '</td></tr>' ||
                    '<tr><td><b>No of Record(s):</b></td><td>' ||
                    v_noofrecords || '</td></tr>' ||
                    '<tr><td><b>Debit Account:</b></td><td>' ||
                    v_transaction_batch_summary.DR_ACCOUNT || '</td></tr>' ||
                    '<tr><td><b>Payment Type:</b></td><td>' || v_paymentype ||
                    '</td></tr>' ||
                    '<tr><td><b>Transaction Date:</b></td><td>' ||
                    formatDateTime(v_transaction_batch_summary.created_date) ||
                    '</td></tr>' || '<tr><td><b>Initiated By:</b></td><td>' ||
                    getUserFullnameById(v_transaction_batch_summary.created_by) ||
                    '</td></tr>' || '</table></br>';
      -- '<p>Total Transaction Amount:'|| (select TO_CHAR(v_transaction_batch_summary.TOTAL_TRAN_AMOUNT, '999,999,999,999') from dual) ||'</p>';
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '4') THEN
      SELECT *
        INTO v_corp_profile_req
        FROM CORPORATE_PROFILE_REQ
       WHERE CORP_REQ_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_msg_body := '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
                    upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
                    '</p> <p>Please the request with details below is pending your approval:</p>' ||
                    '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
                    '<p><b>Corporate Name:</b> ' || v_corp_profile_req.NAME ||
                    '</p>' || '<p><b>Address:</b> ' ||
                    v_corp_profile_req.ADDRESS || '</p>' ||
                    '<p><b>RM Email:</b> ' || v_corp_profile_req.RM_EMAIL ||
                    '</p>' || '<p><b>Request Date:</b> ' ||
                    formatDateTime(v_corp_profile_req.created_date) ||
                    '</p>' || '<p><b>Initiated by:</b> ' ||
                    getUserFullnameById(v_corp_profile_req.created_by) ||
                    '</p>'
      
       ;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '5') THEN
      SELECT *
        INTO r_user_profile_req
        FROM USER_PROFILE_REQ
       WHERE USER_ID_REQ = v_approval_schedule.PARENT_TABLE_ID;
    
      v_msg_body := '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
                    upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
                    '</p> <p>Please the request with details below is pending your approval:</p>' ||
                    '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
                    '<p><b>Username:</b> ' || r_user_profile_req.username ||
                    '<p><b>Username Name:</b> ' ||
                    r_user_profile_req.first_name || ' ' ||
                    r_user_profile_req.last_name || '</p>' ||
                    '<p><b>Address:</b> ' || r_user_profile_req.address ||
                    '</p>' || '<p><b>Email:</b> ' ||
                    r_user_profile_req.email || '</p>' ||
                    '<p><b>Request Date:</b> ' ||
                    formatDateTime(r_user_profile_req.created_date) ||
                    '</p>' || '<p><b>Initiated by:</b> ' ||
                    getUserFullnameById(r_user_profile_req.created_by) ||
                    '</p>';
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '6') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Username:</b>' || c.username || '</p>' ||
             '<p><b>Name:</b> ' || c.first_name || ' ' || c.last_name ||
             '</p>' || '<p><b>Role:</b> ' || b.name || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(b.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(b.created_by) || '</p>'
        into v_msg_body
        FROM USER_ROLE_REQ a, roles b, user_profile c
       WHERE a.role_id = b.role_id
         and a.user_id = c.user_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '7') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Account Number:</b> ' || a.account_number || '</p>' ||
             '<p><b>Account Name:</b> ' || a.account_name || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM CORPORATE_ACCOUNT_REQ a
       WHERE REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '8') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             
             '<p><b>Role Name:</b> ' || a.name || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM ROLES_REQ a
       WHERE REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '9') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p><br />' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             
             '<p><b>Department Name:</b> ' || a.name || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM DEPARTMENTS_REQ a
       WHERE REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '11') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             
             '<p><b>Menu Name:</b> ' || b.menuname || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM APPMENUROLES_REQ a, MENU b, ROLES c
       WHERE a.appmenuid = b.menuid
         and a.roleid = c.role_id
         and a.request_id = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '12') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             
             '<p><b>Account Name Name:</b> ' || c.account_number || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM USER_ACCOUNT_ACCESS_REQ a, USER_PROFILE b, corporate_account c
       WHERE a.user_id = b.username
         and a.corp_acct_id = c.corp_acct_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '13') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             
             '<p><b>Group Name:</b> ' || a.name || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM APPROVAL_GROUPS_REQ a
       WHERE REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '14') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             
             '<p><b> Group Name:</b> ' || c.name || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM APPROVAL_GROUPS_USERS_REQ a,
             USER_PROFILE              b,
             approval_groups           c,
             departments               d
       WHERE a.user_id = b.user_id(+)
         and a.dept_id = d.dept_id(+)
         and a.approval_group_id = c.group_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '15') THEN
      -- manage approval route
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             
             '<p><b>Route Name:</b> ' || a.route_name || '</p>' ||
             
             '<p><b>Number of Signatories:</b> ' || a.no_of_signatories ||
             '</p>' || '<p><b>Request Date:</b> ' ||
             formatDateTime(a.created_date) || '</p>' ||
             '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM approval_route_req a
       WHERE a.approval_route_id_req = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '16') THEN
      --manage approval signatories
      -- manage approval route
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             
             '<p><b>Route Name:</b> ' || b.route_name || '</p>' ||
             
             '<p><b>Approval Level:</b> ' || a.approval_level || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM approval_route_signatories_req a, approval_route b
       WHERE a.routeid = b.approval_route_id
         and a.route_signatory_req_id = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '17') THEN
      --PAYMENTS
    
      /* select NAME
        into v_paymentype
        from REF_PAYMENT_TYPES
       where PAYMENT_TYPE_ID in
             (select PAYMENT_TYPE_ID
                from TRANSACTION_BATCH_SUMMARY
               where BATCH_ID = p_parenttableid);
      SELECT v_paymentype || ' APPROVAL(DR A/C:' || DR_ACCOUNT ||
             ' AMOUNT:' ||
             (select TO_CHAR(TOTAL_TRAN_AMOUNT, '999,999,999,999.99')
                from dual) || ' RECORD COUNT:' ||
             (select TO_CHAR(NO_OF_RECORD, '999,999,999,999') from dual) || ')',
             TOTAL_TRAN_AMOUNT,
             DR_ACCOUNT
        INTO p_narration, p_amount, p_dr_acct
        FROM TRANSACTION_BATCH_SUMMARY
       WHERE BATCH_ID = v_approval_schedule.PARENT_TABLE_ID;*/
    
      SELECT *
        INTO v_transaction_batch_summary
        FROM TRANSACTION_BATCH_SUMMARY
       WHERE BATCH_ID = v_approval_schedule.PARENT_TABLE_ID;
      select TO_CHAR(v_transaction_batch_summary.TOTAL_TRAN_AMOUNT,
                     '999,999,999,999')
        into v_totalamt
        from dual;
      select TO_CHAR(v_transaction_batch_summary.TOTAL_CHARGE_AMT,
                     '999,999,999,999')
        into v_totalcharge
        from dual;
      select TO_CHAR(v_transaction_batch_summary.NO_OF_RECORD,
                     '999,999,999,999')
        into v_noofrecords
        from dual;
      select NAME
        into v_paymentype
        from REF_PAYMENT_TYPES
       where PAYMENT_TYPE_ID = v_transaction_batch_summary.PAYMENT_TYPE_ID;
      v_msg_body := '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
                    upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
                    '</p> <p>Please the request with details below is pending your approval:</p>' ||
                   --'<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
                    '<table border=1 cellspacing=0 BORDERCOLOR=black>' ||
                    '<tr><td><b>Transaction Description:</b></td><td>' ||
                    v_transaction_batch_summary.batch_description ||
                    '</td></tr>' ||
                    '<tr><td><b>Total Transaction Amount:</b></td><td>' ||
                    v_transaction_batch_summary.dr_account_currency_code ||
                    v_totalamt || '</td></tr>' ||
                    '<tr><td><b>Total Charge Amount:</b></td><td>' ||
                    v_transaction_batch_summary.dr_account_currency_code ||
                    v_totalcharge || '</td></tr>' ||
                    '<tr><td><b>No of Record(s):</b></td><td>' ||
                    v_noofrecords || '</td></tr>' ||
                    '<tr><td><b>Debit Account:</b></td><td>' ||
                    v_transaction_batch_summary.DR_ACCOUNT || '</td></tr>' ||
                    '<tr><td><b>Payment Type:</b></td><td>' || v_paymentype ||
                    '</td></tr>' ||
                    '<tr><td><b>Transaction Date:</b></td><td>' ||
                    formatDateTime(v_transaction_batch_summary.created_date) ||
                    '</td></tr>' || '<tr><td><b>Initiated By:</b></td><td>' ||
                    getUserFullnameById(v_transaction_batch_summary.created_by) ||
                    '</td></tr>' || '</table></br>';
      -- '<p>Total Transaction Amount:'|| (select TO_CHAR(v_transaction_batch_summary.TOTAL_TRAN_AMOUNT, '999,999,999,999') from dual) ||'</p>';
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '18') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Discount:</b> ' || a.percentage_discount || '</p>' ||
             '<p><b>Payment Type:</b> ' || c.name || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM CORPORATE_DISCOUNTS_REQ a,
             CORPORATE_PROFILE       b,
             ref_payment_types       c
       WHERE a.corp_id = b.corp_id
         and a.payment_type_id = c.payment_type_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
    
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '19') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Holding Account Number:</b> ' || a.account_no || '</p>' ||
             '<p><b>Holding Account Name:</b> ' || a.name || '</p>' ||
             '<p><b>Holding Account Type:</b> ' || a.account_type || '</p>' ||
             '<p><b>Holding Account Currency:</b> ' || a.currency_code ||
             '</p>' || '<p><b>Request Date:</b> ' ||
             formatDateTime(a.created_date) || '</p>' ||
             '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM HOLDING_ACCOUNTS_REQ a
       WHERE REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    ELSIF (v_trantype = '20') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Merchant Id:</b> ' || a.merchant_id || '</p>' ||
             '<p><b>Terminal Id:</b> ' || a.terminal_id || '</p>' ||
             '<p><b>Outlet Name:</b> ' || a.outlet_name || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM corporate_terminals_REQ a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '22') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>User Name:</b> ' || b.first_name || ' ' || b.last_name ||
             '</p>' || '</p>' || '<p><b>Group Name:</b> ' || c.name ||
             '</p>' || '<p><b>Request Date:</b> ' ||
             formatDateTime(a.created_date) || '</p>' ||
             '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM approval_groups_users_req a, user_profile b, approval_groups c
       WHERE a.user_id = b.user_id
         and a.approval_group_id = c.group_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '23') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
              upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
              '</p> <p>Please the request with details below is pending your approval:</p>' ||
              '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             --'<p>Corporate Name:' || b.name || '</p>' ||
              '<p><b>Beneficiary Details:</b> ' ||
              LISTAGG('<b>Name:</b> ' || a.preferred_name ||
                      '; <b>Ref#:</b> ' || a.acctno_phoneno_rsa_tax_tin_id ||
                      a.beneficiary_category,
                      '<br/> ') within group(ORDER BY a.beneficiary_id) || '</p>' || '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) || '</p>' || '<p><b>Initiated by:</b> ' || getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM corporate_beneficiaries_req a, corporate_profile b
       where a.corp_id = b.corp_id
         and a.batch_id = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    ELSIF (v_trantype = '24') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Rule Type:</b> ' || LISTAGG(b.name, '; ') within group(ORDER BY a.priority_no) || '</p>' || '<p><b>Priority:</b> ' || LISTAGG(a.priority_no, '; ') within group(ORDER BY a.priority_no) || '</p>' || '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) || '</p>' || '<p><b>Initiated by:</b> ' || getUserFullnameById(a.created_by) || '</p>'
        into v_msg_body
        FROM approval_route_type_pr_req a, ref_approval_route_type b
       WHERE a.approval_route_type_id = b.approval_route_type_id
         and a.batch_id = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    ELSIF (v_trantype = '26') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Transaction Limit Amount:</b> ' ||
             a.transaction_limit_amount || '</p>' ||
             '<p><b>Daily Limit Amount:</b> ' || a.daily_limit_amount ||
             '</p>' || '<p><b>Request Date:</b> ' ||
             formatDateTime(a.created_date) || '</p>' ||
             '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM corporate_limits_REQ a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '27') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
             '<p><b>Number of Leaflet(s):</b> ' || a.NO_OF_LEAFLETS ||
             '</p>' || '<p><b>Number of Booklets:</b> ' || a.NO_OF_BOOKLETS ||
             '</p>' || '<p><b>Delivery Mode:</b> ' || a.DELIVERY_OPTION_ID ||
             '</p>' || '<p><b>Collection Branch:</b> ' ||
             a.COLLECTION_BRANCH || '</p>' ||
             '<p><b>Relatioship Manager:</b> ' || a.RM_EMAIL || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM CHEQUE_BOOK_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
      
        ELSIF (v_trantype = '45') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
             '<p><b>Number of Pickup Branch(s):</b> ' || a.PICKUP_BRANCH ||
            
             '</p>' || '<p><b>Delivery Mode:</b> ' || a.DELIVERY_OPTION_ID ||
             '</p>' || '<p><b>Collection Branch:</b> ' ||
             a.DELIVERY_OPTION_ID || '</p>' ||
             '<p><b>Relatioship Manager:</b> ' || a.RELATIONSHIP_MANAGER || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM CIBANK.CARD_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and CARD_REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
	  
	  ELSIF (v_trantype = '46') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
             '<p><b>Start Cheque Number:</b> ' || a.START_CHEQUE_NUMBER ||
             '</p>' || '<p><b>End Cheque Number:</b> ' || a.END_CHEQUE_NUMBER ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM CIBANK.STOP_CHEQUE_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
	  
	  
	ELSIF (v_trantype = '47') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
             '<p><b>Start Cheque Number:</b> ' || a.CARD_PAN ||
             '</p>' || '<p><b>End Cheque Number:</b> ' || a.ACTION ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM CIBANK.EXPENSE_CARD_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and CARD_REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;  
	  
	  
	  ELSIF (v_trantype = '48') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Staff Name:</b> ' || a.STAFF_NAME || '</p>' ||
             '<p><b>Staff Number:</b> ' || a.STAFF_NUMBER || '</p>' ||
             '<p><b>Staff Mobile:</b> ' || a.STAFF_MOBILE ||
             '</p>' || '<p><b>Channel:</b> ' || a.CHANNEL ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM CIBANK.HR_QUICK_RESPONSE a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;  
    
    
    ELSIF (v_trantype = '28') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
             '<p><b>Amount:</b> ' || a.AMOUNT || '</p>' ||
             '<p><b>Beneficiary Name:</b> ' || a.BENEFICIARY_NAME || '</p>' ||
             '<p><b>Delivery Mode:</b> ' || a.DELIVERY_OPTION_ID || '</p>' ||
             '<p><b>Purpose of Issuance:</b> ' || a.PURPOSE_OF_ISSUANCE ||
             '</p>' || '<p><b>Collection Branch:</b> ' ||
             a.COLLECTION_BRANCH || '</p>' ||
             '<p><b>Relatioship Manager:</b> ' || a.RM_EMAIL || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM MANAGERS_CHEQUE_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '30') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
             '<p><b>Cheque Number:</b> ' || a.CHEQUE_NO || '</p>' ||
             '<p><b>Amount:</b> ' || a.AMOUNT || '</p>' ||
             '<p><b>Beneficiary Name:</b> ' || a.BENEFICIARY_NAME || '</p>' ||
             '<p><b>Issuance Date:</b> ' || a.ISSUANCE_DATE || '</p>' ||
             '<p><b>Purpose of Issuance:</b> ' || a.PURPOSE_OF_ISSUANCE ||
             '</p>' || '<p><b>Relatioship Manager:</b> ' || a.RM_EMAIL ||
             '</p>' || '<p><b>Request Date:</b> ' ||
             formatDateTime(a.created_date) || '</p>' ||
             '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM CHEQUE_CONFIRMATION_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '33') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
              upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
              '</p> <p>Please the request with details below is pending your approval:</p>' ||
              '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
              '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
              '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
              '<p><b>Card Type:</b> ' || a.card_type || '</p>' ||
              '<p><b>Pan:</b> ' || a.card_pan || '</p>' ||
              '<p><b>Card Status:</b> ' || a.status_flag || '</p>' ||
             --'<p><b>Purpose of Issuance:</b> ' || a.PURPOSE_OF_ISSUANCE ||
              '</p>' || '<p><b>Relatioship Manager:</b> ' || a.EMAIL_ADDRESS ||
              '</p>' || '<p><b>Request Date:</b> ' ||
              formatDateTime(a.created_date) || '</p>' ||
              '<p><b>Initiated by:</b> ' ||
              getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM cibank.change_card_status_requests a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and service_REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '34') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
              upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
              '</p> <p>Please the request with details below is pending your approval:</p>' ||
              '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
              '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
              '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
              '<p><b>Card Type:</b> ' || a.card_type || '</p>' ||
              '<p><b>Pan:</b> ' || a.card_pan || '</p>' ||
              '<p><b>Limit Type:</b> ' || a.limit_type || '</p>' ||
              '<p><b>Limit Value:</b> ' || a.limit_value || '</p>' ||
             --'<p><b>Purpose of Issuance:</b> ' || a.PURPOSE_OF_ISSUANCE ||
              '</p>' || '<p><b>Relatioship Manager:</b> ' || a.EMAIL_ADDRESS ||
              '</p>' || '<p><b>Request Date:</b> ' ||
              formatDateTime(a.created_date) || '</p>' ||
              '<p><b>Initiated by:</b> ' ||
              getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM cibank.set_card_limit_requests a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and service_REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    ELSIF (v_trantype = '39') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Account Number:</b> ' || a.ACCOUNT_NO || '</p>' ||
             '<p><b>Amount:</b> ' || a.AMOUNT || '</p>' ||
             '<p><b>Beneficiary Name:</b> ' || a.BENEFICIARY_NAME || '</p>' ||
             '<p><b>Delivery Mode:</b> ' || a.DELIVERY_OPTION_ID || '</p>' ||
             '<p><b>Purpose of Issuance:</b> ' || a.PURPOSE_OF_ISSUANCE ||
             '</p>' || '<p><b>Collection Branch:</b> ' ||
             a.COLLECTION_BRANCH || '</p>' ||
             '<p><b>Relatioship Manager:</b> ' || a.RM_EMAIL || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM MANAGERS_CHEQUE_REQUESTS_temp a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    
    eLSIF (v_trantype = '40') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Account Number:</b> ' || a.account_number || '</p>' ||
             '<p><b>Amount:</b> ' || a.transfer_amount || '</p>' ||
             '<p><b>Beneficiary Name:</b> ' || a.BENEFICIARY_NAME || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM intl_FX_TRANSFER_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and fx_trf_request_id = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    eLSIF (v_trantype = '41') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
             upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
             '</p> <p>Please the request with details below is pending your approval:</p>' ||
             '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
             '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             '<p><b>Debit Account Number:</b> ' || a.account_number ||
             '</p>' || '<p><b>Debit Account Name:</b> ' || a.account_name ||
             '</p>' || '<p><b>Payer Name:</b> ' || a.payer_name || '</p>' ||
             '<p><b>Amount:</b> ' || a.amount || '</p>' ||
             '<p><b>Payer Name:</b> ' || a.payer_name || '</p>' ||
             '<p><b>Description:</b> ' || a.narration || '</p>' ||
             '<p><b>Mandate Reference:</b> ' || a.reference_number ||
             '</p>' || '<p><b>Start Date:</b> ' ||
             formatDateTime(a.start_date) || '</p>' ||
             '<p><b>End Date:</b> ' || formatDateTime(a.end_date) || '</p>' ||
             '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
             '</p>' || '<p><b>Initiated by:</b> ' ||
             getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM direct_dr_mandate_requests a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and mandate_id = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
    eLSIF (v_trantype = '42') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
              upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
              '</p> <p>Please the request with details below is pending your approval:</p>' ||
              '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
              '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             --'<p><b>Debit Account Number:</b> ' || a.account_number ||
             -- '</p>' || '<p><b>Debit Account Name:</b> ' || a.account_name ||
             --  '</p>' || '<p><b>Payer Name:</b> ' || a.payer_name || '</p>' ||
              '<p><b>Total Amount:</b> ' || a.total_amount || '</p>' ||
              '<p><b>Total Mandate:</b> ' || a.total_count || '</p>' ||
              '<p><b>Description:</b> ' || a.description || '</p>' ||
             -- '<p><b>Mandate Reference:</b> ' || a.reference_number ||             
              '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
              '</p>' || '<p><b>Initiated by:</b> ' ||
              getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM upload_batch_master a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and batch_id = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
      --#ee begin
      eLSIF (v_trantype = '43') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
              upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
              '</p> <p>Please the request with details below is pending your approval:</p>' ||
              '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
              '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             --'<p><b>Debit Account Number:</b> ' || a.account_number ||
             -- '</p>' || '<p><b>Debit Account Name:</b> ' || a.account_name ||
             --  '</p>' || '<p><b>Payer Name:</b> ' || a.payer_name || '</p>' ||
              '<p><b>Loan Amount:</b> ' || a.amount || '</p>' ||
              '<p><b>Account Number:</b> ' || a.target_account_number || '</p>' ||
--              '<p><b>Description:</b> ' || a. || '</p>' ||
             -- '<p><b>Mandate Reference:</b> ' || a.reference_number ||             
              '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
              '</p>' || '<p><b>Initiated by:</b> ' ||
              getUserFullnameById(a.created_by) || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
      --'<p>Outlet Name:' || a.outlet_name || '</p>'
        into v_msg_body
        FROM cibank.payday_loans a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and a.payday_loan_id = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
      eLSIF (v_trantype = '44') THEN
      SELECT '<p>Good day,</p><p style="text-align: center; font-weight: bold; text-decoration: underline;">' ||
              upper(v_approval_schedule.TRANSACTION_DESCRIPTION) ||
              '</p> <p>Please the request with details below is pending your approval:</p>' ||
              '<p><b>Request Type:</b> ' || v_request_type || '</p>' ||
              '<p><b>Corporate Name:</b> ' || b.name || '</p>' ||
             --'<p><b>Debit Account Number:</b> ' || a.account_number ||
             -- '</p>' || '<p><b>Debit Account Name:</b> ' || a.account_name ||
             --  '</p>' || '<p><b>Payer Name:</b> ' || a.payer_name || '</p>' ||
              '<p><b>Amount:</b> ' || a.amount || '</p>' ||
              '<p><b>Account Number:</b> ' || a.account_number || '</p>' ||
              '<p><b>Tenor (in Months):</b> ' || a.tenor || '</p>' ||
             -- '<p><b>Mandate Reference:</b> ' || a.reference_number ||             
              '<p><b>Request Date:</b> ' || formatDateTime(a.created_date) ||
              '</p>' || '<p><b>Initiated by:</b> ' ||
              getUserFullnameById(a.created_by) || '</p>'
     
        into v_msg_body
        FROM cibank.fixed_deposits a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and a.id = v_approval_schedule.PARENT_TABLE_ID;
      v_subject := v_approval_schedule.TRANSACTION_DESCRIPTION;
      --#ee end
    END IF;
  
    SELECT *
      INTO v_approval_route_signatory
      FROM APPROVAL_ROUTE_SIGNATORIES
     WHERE ROUTE_SIGNATORY_ID = v_approval_schedule.ROUTE_SIGNATORY_ID;
    /* IF (v_approval_route_signatory.SIGNATORY_TYPE_ID = 1) THEN
      --INDIVIDUAL
      SELECT EMAIL
        INTO v_email
        FROM USER_PROFILE
       WHERE USER_ID = v_approval_route_signatory.EXPECTED_USER_APPROVER_ID;
    ELSIF (v_approval_route_signatory.SIGNATORY_TYPE_ID = 2) THEN*/
    --GROUP
    --EXPECTED_GROUP_APPROVER_ID
  
    begin
      --get all group members emails
      SELECT LISTAGG(c.email, ';') within group(ORDER BY c.user_id)
        INTO v_user_emails
        FROM APPROVAL_GROUPS a, approval_groups_users b, user_profile c
       WHERE a.group_id = b.approval_group_id
         and b.user_id = c.user_id
         and GROUP_ID =
             v_approval_route_signatory.EXPECTED_GROUP_APPROVER_ID;
    exception
      when no_data_found then
        v_user_emails := null;
    end;
  
    begin
      SELECT LISTAGG(c.email, ';') within group(ORDER BY c.user_id)
        INTO v_dept_emails
        FROM APPROVAL_GROUPS a, approval_groups_users b, user_profile c
       WHERE a.group_id = b.approval_group_id
         and b.dept_id = c.dept_id
         and GROUP_ID =
             v_approval_route_signatory.EXPECTED_GROUP_APPROVER_ID;
    exception
      when no_data_found then
        v_dept_emails := null;
      
    end;
  
    begin
      SELECT a.group_emails
        INTO v_group_email
        FROM APPROVAL_GROUPS a
       where GROUP_ID =
             v_approval_route_signatory.EXPECTED_GROUP_APPROVER_ID;
    exception
      when no_data_found then
        v_group_email := null;
    end;
  
    -- get the initiator email
    begin
      select a.email
        into v_initiator_emails
        from user_profile a
       where a.user_id = v_approval_schedule.created_by;
    exception
      when no_data_found then
        v_initiator_emails := null;
      
    end;
  
    if (v_user_emails is not null) then
      v_recipient_emails := v_recipient_emails || ';' || v_user_emails;
    end if;
  
    if (v_group_email is not null) then
      v_recipient_emails := v_recipient_emails || ';' || v_group_email;
    end if;
  
    if (v_dept_emails is not null) then
      v_recipient_emails := v_recipient_emails || ';' || v_dept_emails;
    end if;
  
    v_recipient_emails := removeDuplicateEmails(v_recipient_emails);
    -- END IF;
    --  END IF;
    INSERT INTO EMAIL_SCHEDULES
      (CREATED_BY,
       SCHEDULE_ID,
       EMAIL_SUBJECT,
       CREATED_DATE,
       TO_ADDRESS,
       EMAIL_BODY,
       cc_address)
    VALUES
      ('SYSTEM',
       EMAIL_SCHEDULES_SEQ.NEXTVAL,
       upper(v_subject),
       sysdate,
       v_recipient_emails,
       v_msg_body,
       v_initiator_emails
       
       );
    -- DBMS_output.PUT_LINE('fee is '||p_Fee);
  
    --p_response_code := '00';
  
    --  v_subject  VARCHAR2(500);
    --  v_email  VARCHAR2(500);
  
    --    commit;
    return '0';
  EXCEPTION
    WHEN OTHERS THEN
    
      --v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message := SQLERRM;
    
      cib_ibank_sr_pkg.logerror(DBMS_UTILITY.format_error_backtrace ||
                                v_err_message,
                                'send_mail to:' || v_trantype);
    
      return '0';
  END;
  FUNCTION add_gefupostingparameters(batchid              IN VARCHAR2,
                                     initiatingbranch     IN VARCHAR2,
                                     requestmodule        IN VARCHAR2,
                                     modulecredentials    IN VARCHAR2,
                                     transactioncurrency  IN VARCHAR2,
                                     acccountnumber       IN VARCHAR2,
                                     branchcode           IN VARCHAR2,
                                     amount               IN VARCHAR2,
                                     debitcreditindicator IN VARCHAR2,
                                     glcasaindicator      IN VARCHAR2,
                                     mnemonic             IN VARCHAR2,
                                     narration            IN VARCHAR2,
                                     paymentreference     IN VARCHAR2,
                                     transactionid        IN VARCHAR2,
                                     isinterbanktransfer  IN VARCHAR2,
                                     uids                 IN VARCHAR2,
                                     recordid             IN VARCHAR2,
                                     paymenttypeid        IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
    v_count  INTEGER;
    v_payref VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_payref := paymentreference;
    v_count  := 0;
    -- SELECT COUNT(1) into v_count FROM GEFUPOSTING_PARAMETERS WHERE PAYMENTREFERENCE=v_payref AND ((RESPONSECODE IN('00','94')) OR (RESPONSECODE IS NULL AND CREATEDTIME between sysdate-(5/1440) and sysdate));
    SELECT COUNT(1)
      into v_count
      FROM GEFUPOSTING_PARAMETERS
     WHERE PAYMENTREFERENCE = v_payref
       AND ((RESPONSECODE IN ('00', '94')));
  
    --select * from RIA_INVOICES
    if (v_count = 0) then
      INSERT INTO gefuposting_parameters
        (recordid,
         batchid,
         initiatingbranch,
         requestmodule,
         modulecredentials,
         transactioncurrency,
         acccountnumber,
         branchcode,
         amount,
         debitcreditindicator,
         glcasaindicator,
         mnemonic,
         narration,
         paymentreference,
         transactionid,
         isinterbanktransfer,
         uids,
         BATCH_DETAIL_ID,
         PAYMENT_TYPE_ID)
      VALUES
        (posting_principal_seq.NEXTVAL,
         batchid,
         initiatingbranch,
         requestmodule,
         modulecredentials,
         transactioncurrency,
         acccountnumber,
         branchcode,
         amount,
         debitcreditindicator,
         glcasaindicator,
         mnemonic,
         narration,
         paymentreference,
         transactionid,
         isinterbanktransfer,
         uids,
         recordid,
         paymenttypeid);
    
      COMMIT;
      RETURN 'SUCCESS';
    
    else
      RETURN 'Record Already Exist for payment reference ' || v_payref;
    end if;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION getappconfig RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT * FROM app_config;
  
    RETURN o_refcursor;
  END;

  FUNCTION getacctdetails(acctno IN VARCHAR2) RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT tt.cust_ac_no,
             tt.branch_code,
             tt.cust_no,
             kk.field_val_1 bvn,
             tt.AC_DESC,
             tt.CCY
        FROM sttm_cust_account tt, cstm_function_userdef_fields kk
       WHERE tt.cust_no || '~' = kk.rec_key
         AND tt.cust_ac_no = acctno
         AND kk.function_id = 'STDCIF'
         and tt.auth_stat = 'A'
         and tt.record_stat = 'O'
      union
      select ac_gl_no as cust_ac_no,
             branch_code,
             cust_no,
             '' bvn,
             ac_gl_desc AC_DESC,
             ac_gl_ccy CCY
        from sttb_account x
       where ac_gl_no = acctno
         and x.auth_stat = 'A';
  
    RETURN o_refcursor;
  END;

  FUNCTION updategefupostingparam_rev(uidsin                IN VARCHAR2,
                                      responsecodein        IN VARCHAR2,
                                      responsemessagein     IN VARCHAR2,
                                      isinterbanktransferin IN VARCHAR2,
                                      recordid              IN VARCHAR2,
                                      paymenttypeid         IN VARCHAR2)
    RETURN VARCHAR2 IS
    v_paymentref            VARCHAR2(3000);
    v_parentguids           VARCHAR2(300);
    v_summarybatchid        VARCHAR2(300);
    v_trialcount            INTEGER;
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_reversed_amt          NUMBER(18, 2);
    v_batchid               VARCHAR2(300);
  BEGIN
    SET TRANSACTION READ WRITE;
  
    --select * from RIA_INVOICES
    UPDATE gefuposting_parameters_rev
       SET responsecode    = responsecodein,
           responsemessage = responsemessagein,
           responsetime    = SYSDATE
     WHERE uids = uidsin;
  
    SELECT DISTINCT parentguids, BATCH_DETAIL_ID, paymentreference
      INTO v_parentguids, v_batchid, v_paymentref
      FROM gefuposting_parameters_rev
     WHERE uids = uidsin;
  
    -- select DISTINCT(INVOICEID) into v_invoiceid from GEFUPOSTING_PARAMETERS_REV  where UIDS=UIDSIn;
    --IF (((responsecodein = '00' AND
    -- responsemessagein = 'Transaction Was Successful') OR
    IF (((responsecodein = '00') OR (responsecodein = '94') OR
       
       (substr(responsemessagein, 0, 20) = '94~DUPLICATE EXT_REF'))) THEN
      -- SELECT SUM(AMOUNT) INTO  v_reversed_amt FROM GEFUPOSTING_PARAMETERS_REV WHERE UIDS=uidsin AND DEBITCREDITINDICATOR='C';
      IF (isinterbanktransferin = 'TRANSIT') THEN
        --TRANSIT_REVERSALFLG,TRANSIT_REVERSALFLG,TRANSIT_REVERSAL_CHARGE_AMT,TRANSIT_REVERSAL_POSTREF,TRANSIT_REVERSAL_DATE,TRANSIT_REVERSAL_DATE
      
        UPDATE TRANSACTION_BATCH_SUMMARY
           SET TRANSIT_POSTFLG          = 'R',
               TRANSIT_REVERSALFLG      = 'Y',
               REVERSED_TOTAL_AMOUNT    = EXPECTED_TRANSIT_REVERSAL_AMT,
               REVERSED_TOTAL_CHARGE    = EXPECTED_TRANSIT_REVERSAL_FEE,
               ERROR_TRIAL_COUNT        = 0,
               TRANSIT_REVERSAL_DATE    = SYSDATE,
               TRANSIT_REVERSAL_POSTREF = v_paymentref,
               --postedby = 'SYSTEM',
               -- TRANSIT_POSTREF             = v_paymentref,
               TRANSIT_REVERSAL_GUID = uidsin --,PROCESSING_STATUS='06'
        -- POST_REF_NO                 = v_paymentref,
        
         WHERE BATCH_ID = recordid;
      
      ELSE
        UPDATE gefuposting_parameters
           SET isreversed = 'Y'
         WHERE uids = v_parentguids;
        --ISPOSTING_REVERSED,REVERSAL_REF_NO,REVERSAL_DATE,REVERSAL_RESPONSE_MESSAGE,REVERSAL_RESPONSE_CODE
        select batch_id
          into v_summarybatchid
          from TRANSACTION_BATCH_DETAIL
         where BATCH_DETAIL_ID = v_batchid;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET postedflg          = 'R',
               ISPOSTING_REVERSED = 'Y',
               REVERSAL_DATE      = SYSDATE,
               --  flexcubetranid              = v_paymentref,
               REVERSAL_REF_NO           = v_paymentref,
               REVERSAL_RESPONSE_CODE    = responsecodein,
               REVERSAL_RESPONSE_MESSAGE = responsemessagein,
               processing_status         = '07',
               REVERSALPOSTINGUIDS       = uidsin
         WHERE BATCH_DETAIL_ID = v_batchid;
        --update TRANSACTION_BATCH_SUMMARY set REVERSED_TOTAL_AMOUNT=(REVERSED_TOTAL_AMOUNT + v_reversed_amt),ERROR_TRIAL_COUNT=0 where BATCH_ID=v_summarybatchid;
      END IF;
    ELSE
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
    
      IF (isinterbanktransferin = 'TRANSIT') THEN
        select ERROR_TRIAL_COUNT
          into v_trialcount
          from TRANSACTION_BATCH_SUMMARY
         where BATCH_ID = recordid;
        IF (v_trialcount < v_defaulttrialcount) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET TRANSIT_REVERSALFLG   = 'RETRY',
                 TRANSIT_REVERSAL_DATE = SYSDATE,
                 NEXT_TRIAL_TIME      =
                 (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                 ERROR_TRIAL_COUNT    =
                 (ERROR_TRIAL_COUNT + 1)
          --postedby = 'SYSTEM',
          -- TRANSIT_POSTREF             = v_paymentref,
           WHERE BATCH_ID = recordid;
        ELSE
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET TRANSIT_REVERSALFLG   = 'F',
                 TRANSIT_REVERSAL_DATE = SYSDATE,
                 PROCESSING_STATUS     = '23',
                 ERROR_TRIAL_COUNT     = 0
          --NEXT_TRIAL_TIME=(sysdate + (1/1440*v_defaulttrialintervals))
          --postedby = 'SYSTEM',
          -- TRANSIT_POSTREF             = v_paymentref,
           WHERE BATCH_ID = recordid;
        END IF;
      ELSE
        select ERROR_TRIAL_COUNT
          into v_trialcount
          from TRANSACTION_BATCH_DETAIL
         where BATCH_DETAIL_ID = recordid;
        IF (v_trialcount < v_defaulttrialcount) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET processing_status = '-13',
                 NEXT_TRIAL_TIME  =
                 (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                 ERROR_TRIAL_COUNT =
                 (ERROR_TRIAL_COUNT + 1)
           WHERE BATCH_DETAIL_ID = v_batchid;
        ELSE
          UPDATE TRANSACTION_BATCH_DETAIL
             SET processing_status = '12'
           WHERE BATCH_DETAIL_ID = v_batchid;
        END IF;
      END IF;
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;
  FUNCTION updategefupostingparameters(uidsin                IN VARCHAR2,
                                       responsecodein        IN VARCHAR2,
                                       responsemessagein     IN VARCHAR2,
                                       isinterbanktransferin IN VARCHAR2,
                                       recordid              IN VARCHAR2,
                                       paymenttypeid         IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_paymentref     VARCHAR2(300);
    v_paymentchannel VARCHAR2(100);
    -- v_paymentchannel   VARCHAR2(100);
    v_trialcount              INTEGER;
    v_postingoption           INTEGER;
    v_payment_channel_id      VARCHAR2(100); --#sprint2
    v_reversalamt             NUMBER(18, 2);
    v_reversalfee             NUMBER(18, 2);
    v_defaulttrialcount       INTEGER;
    v_reciptid                INTEGER;
    v_defaulttrialintervals   INTEGER;
    v_currentprocessingstatus VARCHAR2(200);
    v_paymenttypeid           VARCHAR2(100);
    v_processingstatus        VARCHAR2(100);
    r_transaction_details     TRANSACTION_BATCH_DETAIL%rowtype;
    r_collectiondetails       COLLECTION_DETAILS%rowtype;
    r_userprofile             USER_PROFILE%rowtype;
  
    v_collection_abbr    VARCHAR2(200);
    v_scheduleCalenderid VARCHAR2(100);
    -- v_posting        VARCHAR2(3000);
  v_err_message  VARCHAR2(3000);
    v_batchid VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_reversalamt := 0.0;
    v_reversalfee := 0.0;
    --select * from RIA_INVOICES
    UPDATE gefuposting_parameters
       SET responsecode    = responsecodein,
           responsemessage = responsemessagein,
           responsetime    = SYSDATE
     WHERE uids = uidsin;
    -- select PAYMENT_TYPE_ID into v_paymenttypeid from TRANSACTION_BATCH_SUMMARY where BATCH_ID = recordid;
    --IF (((responsecodein = '00') AND
    --   (responsemessagein = 'Transaction Was Successful'))) THEN
    --  IF (((responsecodein = '00' AND
    --    responsemessagein = 'Transaction Was Successful') OR
    IF (((responsecodein = '00') OR (responsecodein = '94') or
       (substr(responsemessagein, 0, 20) = '94~DUPLICATE EXT_REF'))) THEN
    
      SELECT DISTINCT (paymentreference)
        INTO v_paymentref
        FROM gefuposting_parameters
       WHERE uids = uidsin;
    
      IF (isinterbanktransferin = 'Y') THEN
        select PAYMENT_CHANNEL_ID
          into v_paymentchannel
          from TRANSACTION_BATCH_DETAIL
         where BATCH_DETAIL_ID = recordid;
      --  IF (v_paymentchannel in ('1', '2', '3')) THEN
       IF (v_paymentchannel in ('1', '2', '3','5')) THEN --Phase3 sprint1
          --#sprint2
          --UIP,neft,naps
          v_processingstatus := '04';
        ELSIF (v_paymentchannel = '4') THEN
          --QUICKTELLER
          v_processingstatus := '05';
        END IF;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET POSTEDFLG   = 'Y',
               POSTED_DATE = SYSDATE,
               
               flexcubetranid    = v_paymentref,
               ERROR_TRIAL_COUNT = 0,
               --POST_REF_NO                 = v_paymentref,
               flexcuberesponsecode        = responsecodein,
               flexcuberesponsedescription = responsemessagein,
               processing_status           = v_processingstatus,
               postinguids                 = uidsin
        --reversalpostinguids         = uidsin
         WHERE BATCH_DETAIL_ID = recordid;
      ELSIF (isinterbanktransferin = 'N') THEN
      
        if (paymenttypeid in ('7')) then
          --FIRS,Collection
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET postedflg         = 'Y',
                 POSTED_DATE       = SYSDATE,
                 ERROR_TRIAL_COUNT = 0,
                 postinguids       = uidsin,
                 --postedby = 'SYSTEM',
                 flexcubetranid = v_paymentref,
                 --POST_REF_NO                 = v_paymentref,
                 flexcuberesponsecode        = responsecodein,
                 flexcuberesponsedescription = responsemessagein,
                 processing_status           = '04'
          --TRANSACTION_STATUS          = 'SUCCESSFUL'
          
          -- riaresponsecode = '00',
          -- riaresponsedesciption = 'PAID',
          -- reversalpostinguids = uidsin
           WHERE BATCH_DETAIL_ID = recordid;
        elsif (paymenttypeid in ('8')) then
          /*UPDATE TRANSACTION_BATCH_DETAIL
             SET postedflg         = 'Y',
                 POSTED_DATE       = SYSDATE,
                 ERROR_TRIAL_COUNT = 0,
                 postinguids       = uidsin,
                 --postedby = 'SYSTEM',
                 flexcubetranid = v_paymentref,
                 --POST_REF_NO                 = v_paymentref,
                 flexcuberesponsecode        = responsecodein,
                 flexcuberesponsedescription = responsemessagein,
                 processing_status           = '04'
          --TRANSACTION_STATUS          = 'SUCCESSFUL'
          
          -- riaresponsecode = '00',
          -- riaresponsedesciption = 'PAID',
          -- reversalpostinguids = uidsin
           WHERE BATCH_DETAIL_ID = recordid;*/
        
          select *
            into r_transaction_details
            from TRANSACTION_BATCH_DETAIL
           where BATCH_DETAIL_ID = recordid;
        
          select *
            into r_collectiondetails
            from COLLECTION_DETAILS
           where BATCH_DETAIL_ID = recordid;
          select ABBR
            into v_collection_abbr
            from payments.RR_COLLECTIONS
           where COLLECTION_ID = r_collectiondetails.COLLECTION_ID;
          select *
            into r_userprofile
            from USER_PROFILE
           where USER_ID = r_transaction_details.CREATED_BY;
          --select payments.BAS_RR_RECEIPTS_SEQ.nextval into v_reciptid from dual;
          UPDATE TRANSACTION_BATCH_DETAIL
             SET postedflg         = 'Y',
                 POSTED_DATE       = SYSDATE,
                 ERROR_TRIAL_COUNT = 0,
                 postinguids       = uidsin,
                 --postedby = 'SYSTEM',
                 flexcubetranid = v_paymentref,
                 --POST_REF_NO                 = v_paymentref,
                 flexcuberesponsecode        = responsecodein,
                 flexcuberesponsedescription = responsemessagein,
                 processing_status           = '00',
                 TRANSACTION_STATUS          = 'SUCCESSFUL'
           WHERE BATCH_DETAIL_ID = recordid;
        
          INSERT INTO payments.BAS_RR_RECEIPTS
            (OVERRIDE_TRACE_ID,
             ORIGINAL_REFERENCE,
             CREATE_USER,
             DEBIT_ACCOUNT_DOMAIN,
             VAT,
             STATUS,
             AMOUNT,
             RECEIPT_TYPE,
             BENEFICIARY_NAME,
             COLLECTION_ID,
             BRANCH_CODE,
             BASIS_TRAN_REF,
             VERIFIED_BY,
             PIN_REFERENCE,
             DEBIT_ACCOUNT,
             CUSTOM_VALUE_10,
             COLLECTION_TYPE,
             VALUE_DATE,
             DEL_FLG,
             ABBR,
             DEPOSITOR_PHONE,
             DEPOSIT_SLIP_NO,
             REJECT_REASON,
             CHEQUE_DATE,
             CREATE_DATE,
             VERIFIED_DATE,
             RECEIPT_ID,
             CREDIT_ACCOUNT_DOMAIN,
             EFT_TRAN_TIME,
             INSTRUMENT_REFERENCE,
             HOST_TRAN_REF,
             PULLACCT_MANUAL_FUNDING_REF,
             DEPOSITOR_NAME,
             REPLICATED,
             CRNCY_CODE,
             BRANCH_DOMAIN,
             DESCRIPTION,
             CREDIT_ACCOUNT_BRANCH,
             DEBIT_ACCOUNT_BRANCH,
             CUSTOM_VALUE_4,
             CUSTOM_VALUE_5,
             CUSTOM_VALUE_6,
             DOCUMENT_NO,
             CUSTOM_VALUE_7,
             CUSTOM_VALUE_8,
             IS_FEE_REPLICATED,
             CUSTOM_VALUE_9,
             FEE,
             CUSTOM_VALUE_1,
             ISO_REFERENCE,
             CUSTOM_VALUE_2,
             CUSTOM_VALUE_3,
             TRANSACTION_ID,
             CREDIT_ACCOUNT,
             CHANNEL_CODE)
          VALUES
            (null,
             null,
             r_transaction_details.CREATED_BY,
             'UNIONBANK',
             '0',
             'POSTED',
             r_transaction_details.AMOUNT,
             'TRANSFER',
             null,
             r_collectiondetails.COLLECTION_ID,
             '000',
             r_transaction_details.POST_REF_NO,
             null,
             null,
             r_transaction_details.DR_ACCOUNT_NO,
             r_collectiondetails.CUSTOM_VALUE_10,
             'RECEIPT',
             sysdate,
             'N',
             v_collection_abbr,
             r_userprofile.MOBILE_PHONE_NO,
             null,
             null,
             null,
             sysdate,
             null,
             payments.BAS_RR_RECEIPTS_SEQ.nextval,
             'UNIONBANK',
             null,
             null,
             r_transaction_details.POST_REF_NO,
             null,
             r_userprofile.FIRST_NAME || ' ' || r_userprofile.LAST_NAME,
             'N',
             'NGN',
             'UNIONBANK',
             r_transaction_details.NARRATION,
             '000',
             '000',
             r_collectiondetails.CUSTOM_VALUE_4,
             r_collectiondetails.CUSTOM_VALUE_5,
             r_collectiondetails.CUSTOM_VALUE_6,
             null,
             r_collectiondetails.CUSTOM_VALUE_7,
             r_collectiondetails.CUSTOM_VALUE_8,
             null,
             r_collectiondetails.CUSTOM_VALUE_9,
             r_transaction_details.CHARGE_AMOUNT,
             r_collectiondetails.CUSTOM_VALUE_1,
             null,
             r_collectiondetails.CUSTOM_VALUE_2,
             r_collectiondetails.CUSTOM_VALUE_3,
             null,
             r_transaction_details.CR_ACCOUNT_NO,
             'UNION360');
        
          update TRANSACTION_BATCH_DETAIL
             set ENABLE_COLLECTION_REPORT = 'Y'
           WHERE BATCH_DETAIL_ID = recordid;
        else
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET postedflg         = 'Y',
                 POSTED_DATE       = SYSDATE,
                 ERROR_TRIAL_COUNT = 0,
                 postinguids       = uidsin,
                 --postedby = 'SYSTEM',
                 flexcubetranid = v_paymentref,
                 --POST_REF_NO                 = v_paymentref,
                 flexcuberesponsecode        = responsecodein,
                 flexcuberesponsedescription = responsemessagein,
                 processing_status           = '00',
                 TRANSACTION_STATUS          = 'SUCCESSFUL'
          
          -- riaresponsecode = '00',
          -- riaresponsedesciption = 'PAID',
          -- reversalpostinguids = uidsin
           WHERE BATCH_DETAIL_ID = recordid;
        
        end if;
      
        /* select BATCH_ID INTO v_batchid FROM TRANSACTION_BATCH_DETAIL WHERE BATCH_DETAIL_ID = recordid;
         UPDATE TRANSACTION_BATCH_SUMMARY SET PROCESSED_RECORD_COUNT=(PROCESSED_RECORD_COUNT+1) WHERE BATCH_ID=v_batchid;
        */
        -- select PAYMENT_TYPE_ID into v_paymenttypeid from TRANSACTION_BATCH_SUMMARY where BATCH_ID = recordid;
      
        -- END IF;
      ELSIF (isinterbanktransferin = 'TRANSIT') THEN
        select PAYMENT_TYPE_ID, PAYMENT_CHANNEL_ID --#sprint2
          into v_paymenttypeid, v_payment_channel_id
          from cibank.TRANSACTION_BATCH_SUMMARY
         where BATCH_ID = recordid;
      
        UPDATE TRANSACTION_BATCH_SUMMARY
           SET TRANSIT_POSTFLG   = 'Y',
               TRANSIT_POST_DATE = SYSDATE,
               ERROR_TRIAL_COUNT = 0,
               --postedby = 'SYSTEM',
               -- TRANSIT_POSTREF             = v_paymentref,
               TRANSIT_POST_GUID = uidsin,
               -- POST_REF_NO                 = v_paymentref,
               flexcuberesponsecode        = responsecodein,
               flexcuberesponsedescription = responsemessagein
        --processing_status           = '05',
        -- riaresponsecode = '00',
        -- riaresponsedesciption = 'PAID',
        --TRANSIT_REVERSALFLG = uidsin
         WHERE BATCH_ID = recordid;
      
        /*UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS = '01'
         WHERE BATCH_ID = recordid
           AND ISINTERBANK_TRANSFER = 'N';
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS = '02'
         WHERE BATCH_ID = recordid
           AND ISINTERBANK_TRANSFER = 'Y';*/
      
        IF (v_paymenttypeid = '6') THEN
          update TRANSACTION_BATCH_DETAIL
             set PROCESSING_STATUS = '03',
                 NE_RESPONSE_CODE  = 'N/A',
                 ERROR_TRIAL_COUNT = 0
           where BATCH_ID = recordid
             AND PROCESSING_STATUS NOT IN ('99');
        ELSE
          IF (v_payment_channel_id IN ('2', '3')) THEN
            --NAPS,NEFT --#sprint2
            update TRANSACTION_BATCH_DETAIL
               set --NE_RESPONSE_CODE = 'N/A',
                   ERROR_TRIAL_COUNT = 0,
                   PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                         when 'N' then
                                          '01'
                                         when 'Y' then
                                          '04'
                                       end
             where BATCH_ID = recordid
               and NE_RESPONSE_CODE = '99'
               AND PROCESSING_STATUS NOT IN ('99');
          
            update TRANSACTION_BATCH_DETAIL
               set --NE_RESPONSE_CODE = 'N/A',
                   ERROR_TRIAL_COUNT = 0,
                   PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                         when 'N' then
                                          '03'
                                         when 'Y' then
                                          '04'
                                       end
             where BATCH_ID = recordid
               and NE_RESPONSE_CODE = '00'
               AND PROCESSING_STATUS NOT IN ('99');
         -- ELSIF (v_payment_channel_id IN ('1')) THEN
            --NIP  --#sprint2
           ELSIF (v_payment_channel_id IN ('1','5')) THEN --nip,rtgs phase3 sprint1
              select POSTING_OPTION_ID, SCHEDULE_CALENDAR_ID
              into v_postingoption, v_scheduleCalenderid
              from TRANSACTION_BATCH_SUMMARY
             where BATCH_ID =recordid;
			 /*(in
                   select BATCH_ID
                      from TRANSACTION_BATCH_DETAIL
                     where BATCH_DETAIL_ID = recordid);*/
          
            IF ((v_scheduleCalenderid is not null) and
               (LENGTH(v_scheduleCalenderid) > 5)) then
              --Standing instruction
            
              update TRANSACTION_BATCH_DETAIL
                 set ERROR_TRIAL_COUNT = 0,
                     PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                           when 'N' then
                                            '01'
                                           when 'Y' then
                                            '02'
                                         end
               where BATCH_ID = recordid
                 AND PROCESSING_STATUS NOT IN ('99');
            else
            
              update TRANSACTION_BATCH_DETAIL
                 set ERROR_TRIAL_COUNT = 0,
                     PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                           when 'N' then
                                            '01'
                                           when 'Y' then
                                            '02'
                                         end
               where BATCH_ID = recordid
                 and NE_RESPONSE_CODE = '99'
                 AND PROCESSING_STATUS NOT IN ('99');
              --v_isstandinginstruction
              update TRANSACTION_BATCH_DETAIL
                 set ERROR_TRIAL_COUNT = 0,
                     PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                           when 'N' then
                                            '03'
                                           when 'Y' then
                                            '03'
                                         end
               where BATCH_ID = recordid
                 and NE_RESPONSE_CODE = '00'
                 AND PROCESSING_STATUS NOT IN ('99');
            
            end if;
          
            --and ISINTERBANK_TRANSFER = 'N';
          END IF;
        END IF;
      
      END IF;
    
    ELSE
    
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
    
      IF (isinterbanktransferin = 'TRANSIT') THEN
        -- SELECT TRIAL_COUNT,TRIAL_INTERVAL_IN_MINUTES INTO v_defaulttrialcount,v_defaulttrialintervals FROM REF_ERROR_TRIAL_COUNT_INTERVAL WHERE ROWNUM<2;
      
        select ERROR_TRIAL_COUNT
          into v_trialcount
          from TRANSACTION_BATCH_SUMMARY
         where BATCH_ID = recordid;
        --select sysdate, sysdate + (1/1440*5) from dual
        IF (v_trialcount < v_defaulttrialcount) THEN
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET TRANSIT_POSTFLG   = 'RETRY',
                 TRANSIT_POST_DATE = SYSDATE,
                 NEXT_TRIAL_TIME  =
                 (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                 --postedby = 'SYSTEM',
                 -- TRANSIT_POSTREF             = v_paymentref,
                 TRANSIT_POST_GUID = uidsin,
                 -- POST_REF_NO                 = v_paymentref,
                 flexcuberesponsecode = responsecodein,
                 ERROR_TRIAL_COUNT   =
                 (ERROR_TRIAL_COUNT + 1),
                 --ERROR_CODE=responsecodein,
                 flexcuberesponsedescription = responsemessagein
          --processing_status           = '05',
          -- riaresponsecode = '00',
          -- riaresponsedesciption = 'PAID',
          -- TRANSIT_REVERSALFLG = uidsin
           WHERE BATCH_ID = recordid;
        
        ELSE
          UPDATE TRANSACTION_BATCH_SUMMARY
             SET TRANSIT_POSTFLG   = 'F',
                 TRANSIT_POST_DATE = SYSDATE,
                 --postedby = 'SYSTEM',
                 -- TRANSIT_POSTREF             = v_paymentref,
                 TRANSIT_POST_GUID = uidsin,
                 -- POST_REF_NO                 = v_paymentref,
                 flexcuberesponsecode = responsecodein,
                 ERROR_TRIAL_COUNT    = 0,
                 --ERROR_CODE=responsecodein,
                 PROCESSING_STATUS           = '07',
                 flexcuberesponsedescription = responsemessagein
          --processing_status           = '05',
          -- riaresponsecode = '00',
          -- riaresponsedesciption = 'PAID',
          --TRANSIT_REVERSALFLG = uidsin
           WHERE BATCH_ID = recordid;
          UPDATE TRANSACTION_BATCH_DETAIL
             set PROCESSING_STATUS       = '07',
                 ERROR_PROCESSING_STATUS = '17',
                 FAILURE_REASON          = responsemessagein
           where BATCH_ID = recordid;
        
        END IF;
      
      ELSE
        SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
          INTO v_defaulttrialcount, v_defaulttrialintervals
          FROM REF_ERROR_TRIAL_COUNT_INTERVAL
         WHERE ROWNUM < 2;
      
        select ERROR_TRIAL_COUNT, BATCH_ID
          into v_trialcount, v_batchid
          from TRANSACTION_BATCH_DETAIL
         where BATCH_DETAIL_ID = recordid;
        IF (v_trialcount < v_defaulttrialcount) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET --postedflg   = 'RETRY',
                 --posted_date = SYSDATE,
                            ERROR_TRIAL_COUNT =
                 (ERROR_TRIAL_COUNT + 1),
                 NEXT_TRIAL_TIME            =
                 (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                 flexcuberesponsecode        = responsecodein,
                 flexcuberesponsedescription = responsemessagein,
                 processing_status           = '-03',
                 postinguids                 = uidsin
           WHERE BATCH_DETAIL_ID = recordid;
        
        ELSE
        
          select POSTING_OPTION_ID
            into v_postingoption
            from TRANSACTION_BATCH_SUMMARY
           where BATCH_ID = v_batchid;
          IF (v_postingoption = 1) THEN
            v_processingstatus := '07';
          
            UPDATE TRANSACTION_BATCH_DETAIL
               SET postedflg                   = 'F',
                   posted_date                 = SYSDATE,
                   ERROR_TRIAL_COUNT           = 0,
                   flexcuberesponsecode        = responsecodein,
                   flexcuberesponsedescription = responsemessagein,
                   processing_status           = v_processingstatus,
                   ERROR_PROCESSING_STATUS     = '08',
                   TRANSACTION_STATUS          = 'FAILED',
                   postinguids                 = uidsin,
                   FAILURE_REASON              = responsemessagein
             WHERE BATCH_DETAIL_ID = recordid;
          
          ELSIF (v_postingoption = 2) THEN
            v_processingstatus := '07';
            --v_processingstatus := '98';
            -- SELECT (AMOUNT + CHARGE_AMOUNT) INTO v_reversalamt,v_reversalfee FROM TRANSACTION_BATCH_DETAIL WHERE BATCH_DETAIL_ID=recordid;
            -- SELECT AMOUNT,CHARGE_AMOUNT INTO v_reversalamt,v_reversalfee FROM TRANSACTION_BATCH_DETAIL WHERE BATCH_DETAIL_ID=recordid;
          
            UPDATE TRANSACTION_BATCH_DETAIL
               SET postedflg                   = 'F',
                   posted_date                 = SYSDATE,
                   ERROR_TRIAL_COUNT           = 0,
                   flexcuberesponsecode        = responsecodein,
                   flexcuberesponsedescription = responsemessagein,
                   processing_status           = v_processingstatus,
                   ERROR_PROCESSING_STATUS     = '08',
                   TRANSACTION_STATUS          = 'FAILED',
                   postinguids                 = uidsin,
                   FAILURE_REASON              = responsemessagein
             WHERE BATCH_DETAIL_ID = recordid;
          END IF;
          /* UPDATE TRANSACTION_BATCH_DETAIL
            SET postedflg                   = 'F',
                posted_date                 = SYSDATE,
                ERROR_TRIAL_COUNT           = 0,
                flexcuberesponsecode        = responsecodein,
                flexcuberesponsedescription = responsemessagein,
                processing_status           = v_processingstatus,
                ERROR_PROCESSING_STATUS     = '08',
                TRANSACTION_STATUS          = 'FAILED',
                postinguids                 = uidsin
          WHERE BATCH_DETAIL_ID = recordid;*/
          /*   Select BATCH_ID
           into v_batchid
           from TRANSACTION_BATCH_DETAIL
          where BATCH_DETAIL_ID = recordid;*/
          /* update TRANSACTION_BATCH_SUMMARY
            set FAILURE_COUNT =
                (FAILURE_COUNT + 1),PROCESSED_RECORD_COUNT=(PROCESSED_RECORD_COUNT+1),EXPECTED_REVERSAL_AMOUNT=(EXPECTED_REVERSAL_AMOUNT+v_reversalamt)
          where BATCH_ID = v_batchid;*/
        
        END IF;
      
      END IF;
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
   EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      --v_response_code := '99';
     -- v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
     -- v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      --PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.updateGefuPostingParameters');
      
        COMMIT;
        --end;
      end;
      return v_err_message;
  END;

  FUNCTION updatenipnameenquiryrespupload(uids            IN VARCHAR2,
                                          responsecode    IN VARCHAR2,
                                          responsemessage IN VARCHAR2,
                                          acctname        IN VARCHAR2,
                                          bvn             IN VARCHAR2,
                                          kyclevel        IN VARCHAR2,
                                          recordid        IN VARCHAR2,
                                          sessionids      IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(200);
    v_responsecode          VARCHAR2(100);
    v_responsemessage       VARCHAR2(200);
    v_invoiceid             VARCHAR2(200);
    v_sessionid             VARCHAR2(200);
    v_batchid               VARCHAR2(200);
    v_trialcount            INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_processingstatus      VARCHAR2(100);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_uids            := uids;
    v_responsecode    := responsecode;
    v_responsemessage := responsemessage;
    v_reversalamt     := 0.0;
    IF (v_responsecode = '00') THEN
      UPDATE TRANSACTION_UPLOAD_DETAIL
         SET PROCESSING_STATUS   = '00',
             NE_RESPONSE_CODE    = v_responsecode,
             ERROR_TRIAL_COUNT   = 0,
             NE_RESPONSE_MESSAGE = v_responsemessage,
             -- NIBBS_NESESSIONID = v_sessionid,
             NE_SESSION_ID = sessionids,
             NE_CUST_NAME  = acctname,
             NE_BVN_NO     = bvn,
             CUSTOMER_BVN  = bvn,
             NE_KYCLEVEL   = kyclevel
      --WHERE INVOICEID = v_invoiceid;
       WHERE BATCH_DETAIL_ID = recordid;
    ELSE
      UPDATE TRANSACTION_UPLOAD_DETAIL
         SET PROCESSING_STATUS  = '07',
             ERROR_TRIAL_COUNT  = 0,
             TRANSACTION_STATUS = 'FAILED',
             -- riaresponsecode = '05',
             -- riaresponsedesciption =
             --                     'NAME ENQUIRY FAILED AT DESTINATION BANK',
             NE_RESPONSE_CODE    = v_responsecode,
             NE_RESPONSE_MESSAGE = v_responsemessage,
             -- NIBBS_NESESSIONID = v_sessionid,
             NE_SESSION_ID           = sessionids,
             NE_CUST_NAME            = acctname,
             CUSTOMER_BVN            = bvn,
             ERROR_PROCESSING_STATUS = '09',
             -- customer_bvn = bvn,
             NE_KYCLEVEL = kyclevel
      -- WHERE INVOICEID = v_invoiceid;
       WHERE BATCH_DETAIL_ID = recordid;
    
      /*SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      select ERROR_TRIAL_COUNT, BATCH_ID
        into v_trialcount, v_batchid
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = recordid;
      
      
        select POSTING_OPTION_ID
          into v_postingoption
          from TRANSACTION_BATCH_SUMMARY
         where BATCH_ID = v_batchid;
        IF (v_postingoption = 1) THEN
          v_processingstatus := '07';
        ELSIF (v_postingoption = 2) THEN
          v_processingstatus := '07';
       
      END IF;*/
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION UpdateFIRSTinValidationResp(recordid        IN VARCHAR2,
                                       responsecode    IN VARCHAR2,
                                       responsemessage IN VARCHAR2,
                                       acctname        IN VARCHAR2,
                                       v_taxtype       IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(200);
    v_responsecode          VARCHAR2(100);
    v_responsemessage       VARCHAR2(200);
    v_invoiceid             VARCHAR2(200);
    v_sessionid             VARCHAR2(200);
    v_batchid               VARCHAR2(200);
    v_trialcount            INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_processingstatus      VARCHAR2(100);
  BEGIN
    SET TRANSACTION READ WRITE;
  
    v_responsecode    := responsecode;
    v_responsemessage := responsemessage;
    v_reversalamt     := 0.0;
    IF (v_responsecode = '00') THEN
    
      IF (v_taxtype = 'WHT') THEN
        UPDATE FIRS_REMIT_DETAILS_WHT_TEMP
           SET PROCESSING_STATUS   = '00',
               NE_RESPONSE_CODE    = v_responsecode,
               NE_RESPONSE_MESSAGE = v_responsemessage,
               -- NIBBS_NESESSIONID = v_sessionid,
               NE_CUST_NAME = acctname
         WHERE WHT_DETAIL_ID = recordid;
      ELSIF (v_taxtype = 'PAYE') THEN
      
        UPDATE FIRS_REMIT_DETAILS_PAYE_TEMP
           SET PROCESSING_STATUS   = '00',
               NE_RESPONSE_CODE    = v_responsecode,
               NE_RESPONSE_MESSAGE = v_responsemessage,
               -- NIBBS_NESESSIONID = v_sessionid,
               NE_CUST_NAME = acctname
         WHERE PAYE_DETAIL_ID = recordid;
      END IF;
    ELSE
      IF (v_taxtype = 'WHT') THEN
        UPDATE FIRS_REMIT_DETAILS_WHT_TEMP
           SET PROCESSING_STATUS   = '07',
               NE_RESPONSE_CODE    = v_responsecode,
               NE_RESPONSE_MESSAGE = v_responsemessage,
               -- NIBBS_NESESSIONID = v_sessionid,
               NE_CUST_NAME = acctname
         WHERE WHT_DETAIL_ID = recordid;
      ELSIF (v_taxtype = 'PAYE') THEN
      
        UPDATE FIRS_REMIT_DETAILS_PAYE_TEMP
           SET PROCESSING_STATUS   = '07',
               NE_RESPONSE_CODE    = v_responsecode,
               NE_RESPONSE_MESSAGE = v_responsemessage,
               -- NIBBS_NESESSIONID = v_sessionid,
               NE_CUST_NAME = acctname
         WHERE PAYE_DETAIL_ID = recordid;
        --END IF;
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION updateaccountvalidnUpload(recordid    IN VARCHAR2,
                                     customerid  IN VARCHAR2,
                                     bvn         IN VARCHAR2,
                                     isvalidacct IN VARCHAR2,
                                     branchcode  IN VARCHAR2,
                                     currcode    IN VARCHAR2,
                                     acctname    IN VARCHAR2) RETURN VARCHAR2 IS
    v_batchid               VARCHAR2(200);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
  BEGIN
    SET TRANSACTION READ WRITE;
    v_reversalamt := 0.0;
    --select * from RIA_INVOICES
    IF (isvalidacct = 'Y') THEN
      UPDATE TRANSACTION_UPLOAD_DETAIL
         SET flexcubecustomerid           = customerid,
             customer_bvn                 = bvn,
             flexcubeaccountvalidationflg = 'Y',
             PROCESSING_STATUS            = '00',
             ERROR_TRIAL_COUNT            = 0,
             CR_ACCOUNT_BRANCH_CODE       = branchcode,
             CR_ACCOUNT_CURRENCY_CODE     = currcode,
             NE_CUST_NAME                 = acctname
       WHERE BATCH_DETAIL_ID = recordid;
    END IF;
  
    IF (isvalidacct = 'N') THEN
    
      UPDATE TRANSACTION_UPLOAD_DETAIL
         SET flexcubeaccountvalidationflg = 'F',
             ERROR_PROCESSING_STATUS      = '15',
             TRANSACTION_STATUS           = 'FAILED',
             ERROR_TRIAL_COUNT            = 0,
             PROCESSING_STATUS            = '07'
       WHERE BATCH_DETAIL_ID = recordid;
    
      /*update TRANSACTION_BATCH_SUMMARY
        set FAILURE_COUNT =
            (FAILURE_COUNT + 1),PROCESSED_RECORD_COUNT=(PROCESSED_RECORD_COUNT +1),EXPECTED_REVERSAL_AMOUNT=(EXPECTED_REVERSAL_AMOUNT+v_reversalamt)
      where BATCH_ID = v_batchid;*/
      -- END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  /*FUNCTION selectPendingUploadTxn(p_userid IN VARCHAR2) RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,  
           
             b.batch_id as summary_batch_id,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.BATCH_DESCRIPTION,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             b.PROCESSED_RECORD_COUNT,
             c.CHANNEL_CODE,
             case b.PROCESSING_STATUS
               when '21' then
                'PENDING'
               when '22' then
                'IN_PROGRESS'
               when '00' then
                'COMPLETED'
               when '07' then
                'COMPLETED'
               when '06' then
                'COMPLETED'
             end SUMMARY_PROCESSING_STATUS,
             p.NAME as paymenttypedesc,
             k.NARRATION_OPTION_ID
        FROM TRANSACTION_Upload_DETAIL a
        join TRANSACTION_Upload_SUMMARY b
          on b.batch_id = a.batch_id
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join REF_PAYMENT_TYPES p
          on p.payment_type_id = a.payment_type_id
        join newibank.RIB_BANKS_LIST r
          on r.nibsscode = a.bank_code
       WHERE b.created_by = p_userid
            --AND a.SCHEDULE_DATE <= sysdate
         AND b.PROCESSING_STATUS IN ('21', '00', '07', '22', '06')
         AND b.TRANSACTION_INITIATED = 'N';
  
    RETURN o_refcursor;
  END;*/
  FUNCTION selectPendingUploadTxn(p_userid IN VARCHAR2) RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.CHARGE_AMOUNT,
             a.CREATED_DATE,
             a.MOBILE_NUMBER,
             a.IS_SUMMARY_TABLE_UPDATED,
             a.POSTED_DATE,
             a.NE_DATE,
             a.BATCH_DETAIL_ID,
             a.THREAD_ID,
             a.ERROR_PROCESSING_STATUS,
             a.FLEXCUBECUSTOMERID,
             a.REVERSAL_REF_NO,
             a.AMOUNT,
             a.BENEFICIARY_NAME,
             a.REVERSAL_DATE,
             a.BILLER_NAME,
             a.CR_ACCOUNT_NO,
             a.APPROVED_BY,
             a.BENEFICIARY_EMAIL,
             a.DR_ACCOUNT_NO,
             a.CREATED_BY,
             a.ERROR_TRIAL_COUNT,
             a.FLEXCUBETRANID,
             a.MANUAL_SETTLEMENT_ADVISED,
             a.NE_SESSION_ID,
             a.LAST_MODIFIED_DATE,
             a.CR_ACCOUNT_CURRENCY_CODE,
             a.SCHEDULE_DATE,
             a.BILLER_CUSTOM_FIELD_VALUE,
             a.THIRDPARTY_RESPONSE_DATE,
             a.PROCESSING_STATUS,
             a.REJECTED_DATE,
             a.REJECTED_BY,
             a.ISPOSTING_REVERSED,
             a.PAYMENT_TYPE_ID,
             a.ISINTERBANK_TRANSFER,
             a.POSTINGUIDS,
             a.POSTING_LOCK_COUNT,
             a.RESPONSE_CODE,
             a.BILLER_CATEGORY,
             a.THIRDPARTY_RESPONSE_MESSAGE,
             a.LAST_MODIFIED_BY,
             a.CUSTOMER_BVN,
             a.REVERSALPOSTINGUIDS,
             a.BATCH_ID,
             a.APPROVED_DATE,
             a.TRANSACTION_STATUS,
             a.REVERSAL_RESPONSE_MESSAGE,
             a.NEXT_TRIAL_TIME,
             a.FLEXCUBEACCOUNTVALIDATIONFLG,
             a.NE_BVN_NO,
             a.CR_ACCOUNT_BRANCH_CODE,
             a.BILLER_RECHARGE_PIN,
             r.BNK_CODE as BANK_CODE,
             a.BENEFICIARY_ID,
             a.FLEXCUBERESPONSECODE,
             a.TRANSACTION_INITIATED,
             a.NE_CUST_NAME,
             a.ISFT_SUCCESSFUL,
             a.FLEXCUBERESPONSEDESCRIPTION,
             a.THIRDPARTY_RESPONSE_CODE,
             a.RECORD_STATUS_ID,
             a.CORP_ID,
             a.POSTEDFLG,
             a.APPROVAL_STATUS_ID,
             a.PAYMENT_CHANNEL_ID,
             a.ISNE_SUCCESSFUL,
             a.NE_RESPONSE_CODE,
             a.NARRATION,
             a.NE_KYCLEVEL,
             a.POST_REF_NO,
             a.THIRDPARTY_GUID,
             a.NE_RESPONSE_MESSAGE,
             a.THIRDPARTY_SESSION_ID,
             a.REVERSAL_RESPONSE_CODE,
             a.BILLER_PRODUCT_TYPE,
             a.BANK_NAME
             
            ,
             b.batch_id as summary_batch_id,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.BATCH_DESCRIPTION,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             b.PROCESSED_RECORD_COUNT,
             c.CHANNEL_CODE,
             case b.PROCESSING_STATUS
               when '21' then
                'PENDING'
               when '22' then
                'IN_PROGRESS'
               when '00' then
                'COMPLETED'
               when '07' then
                'COMPLETED'
               when '06' then
                'COMPLETED'
             end SUMMARY_PROCESSING_STATUS,
             p.NAME as paymenttypedesc,
             k.NARRATION_OPTION_ID
        FROM TRANSACTION_Upload_DETAIL a
        join TRANSACTION_Upload_SUMMARY b
          on b.batch_id = a.batch_id
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join REF_PAYMENT_TYPES p
          on p.payment_type_id = a.payment_type_id
        join newibank.RIB_BANKS_LIST r
          on r.nibsscode = a.bank_code
       WHERE b.created_by = p_userid
            --AND a.SCHEDULE_DATE <= sysdate
         AND b.PROCESSING_STATUS IN ('21', '00', '07', '22', '06')
         AND b.TRANSACTION_INITIATED = 'N';
  
    RETURN o_refcursor;
  END;

  FUNCTION selectpendingaccntvalidnUpload(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.NARRATION_OPTION_ID
        FROM TRANSACTION_Upload_DETAIL a
        join TRANSACTION_Upload_SUMMARY b
          on b.batch_id = a.batch_id
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
       WHERE a.THREAD_ID = p_THREAD_id
            --AND a.SCHEDULE_DATE <= sysdate
         AND a.PROCESSING_STATUS = '01';
  
    RETURN o_refcursor;
  END;

  FUNCTION fetchPendingFIRSUploadValReq(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
    
      SELECT b.TAXTYPE        as TAXTYPE,
             a.PAYE_DETAIL_ID as RECORDID,
             a.BENEFICIARYTIN AS BENTIN
        FROM FIRS_REMIT_DETAILS_PAYE_TEMP a
        JOIN FIRS_REMIT_DETAILS_TEMP b
          on b.BATCH_DETAIL_ID = a.BATCH_DETAIL_ID
         and b.PROCESSING_STATUS = '22'
       WHERE a.THREAD_ID = p_THREAD_id
         AND a.PROCESSING_STATUS = '01'
      
      union all
      
      SELECT b.TAXTYPE        as TAXTYPE,
             a.WHT_DETAIL_ID  as RECORDID,
             a.BENEFICIARYTIN AS BENTIN
        FROM FIRS_REMIT_DETAILS_WHT_TEMP a
        JOIN FIRS_REMIT_DETAILS_TEMP b
          on b.BATCH_DETAIL_ID = a.BATCH_DETAIL_ID
         and b.PROCESSING_STATUS = '22'
       WHERE a.THREAD_ID = p_THREAD_id
         AND a.PROCESSING_STATUS = '01';
  
    RETURN o_refcursor;
  END;

  FUNCTION selectpendingnameenquiryUpld(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id
        FROM TRANSACTION_UPLOAD_DETAIL a
        join TRANSACTION_UPLOAD_SUMMARY b
          on b.batch_id = a.batch_id
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
       WHERE ISINTERBANK_TRANSFER = 'Y'
         AND a.THREAD_ID = p_THREAD_id
            -- AND a.SCHEDULE_DATE <= sysdate
         AND a.PROCESSING_STATUS = '02';
  
    -- AND a.PROCESSING_STATUS = '02'; --processingstatus = '02' AND isinterbanktransfer = 'Y';
  
    RETURN o_refcursor;
  END;

  function validateAccount(p_account_number varchar) return varchar2 as
    v_found_flag    integer := 0;
    v_response_code varchar2(100);
  begin
  
    select count(1)
      into v_found_flag
      from sttm_cust_account a
     where cust_ac_no = p_account_number
       and a.auth_stat = 'A'
       and record_Stat = 'O';
    if (v_found_flag = 0) then
      v_response_code := 'INVALID ACCOUNT ' || p_account_number;
    
    else
      v_response_code := '00';
    end if;
    return v_response_code;
  end;

  function addTransactionUploadDetails(p_BATCH_ID           IN VARCHAR2,
                                       p_AMOUNT             IN VARCHAR2,
                                       p_CR_ACCOUNT_NO      IN VARCHAR2,
                                       p_BENEFICIARY_ID     IN VARCHAR2,
                                       p_BANK_CODE          IN VARCHAR2,
                                       p_DR_ACCOUNT_NO      IN VARCHAR2,
                                       p_CREATED_BY         IN VARCHAR2,
                                       p_SCHEDULE_DATE      IN VARCHAR2,
                                       p_NARRATION          IN VARCHAR2,
                                       p_PAYMENT_TYPE_ID    IN VARCHAR2,
                                       p_BANK_NAME          IN VARCHAR2,
                                       p_CORP_ID            IN VARCHAR2,
                                       p_PAYMENT_CHANNEL_ID IN VARCHAR2,
                                       p_MOBILE_NETWORK_ID  IN VARCHAR2,
                                       p_MOBILE_NUMBER      IN VARCHAR2,
                                       p_BILLER_CATEGORY    IN VARCHAR2,
                                       p_BENEFICIARY_EMAIL  IN VARCHAR2,
                                       p_BILLER_NAME        IN VARCHAR2,
                                       p_CHARGE_AMOUNT      IN VARCHAR2,
                                       p_beneficiary_name   varchar2 --#sprint2
                                       
                                       ) return varchar2 IS
  
    v_err_message         VARCHAR2(3000);
    v_response_code       varchar2(300);
    v_isinterbanktransfer VARCHAR2(100);
    v_paymentcode         VARCHAR2(100);
    --v_feeAmt  VARCHAR2(100);
    v_suspense_account VARCHAR2(100);
    v_fee              VARCHAR2(100);
    v_incomeaccount    VARCHAR2(100);
    v_bank_code        VARCHAR2(100);
    v_processingstatus VARCHAR2(100);
  
    v_feereturnval   VARCHAR2(100);
    v_maintableid    NUMBER;
    v_chargeamt      NUMBER;
    v_tranamt        NUMBER;
    v_reqid          NUMBER;
    v_approvalstatus VARCHAR2(2);
    v_found_flag     int := 0;
  
  BEGIN
    v_isinterbanktransfer := 'N';
    v_processingstatus    := '01';
    v_bank_code           := p_BANK_CODE;
    begin
      if (to_number(NVL(p_CHARGE_AMOUNT, '0')) < 0) then
        v_response_code := 'INVALID FEE FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
      
      end if;
    EXCEPTION
      WHEN VALUE_ERROR THEN
        --v_response_code := '16';
        v_response_code := 'INVALID FEE FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
    end;
  
    -- p_CHARGE_AMOUNT := NVL( p_CHARGE_AMOUNT, '0' );
    --- amount validation
    begin
      if (to_number(p_AMOUNT) <= 0) then
        v_response_code := 'INVALID AMOUNT FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
      
      end if;
    EXCEPTION
      WHEN VALUE_ERROR THEN
        --v_response_code := '16';
        v_response_code := 'INVALID AMOUNT FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
    end;
  
    v_chargeamt := NVL(p_CHARGE_AMOUNT, '0');
    --insert into IDVALID values(p_PAYMENT_CHANNEL_ID,p_PAYMENT_CHANNEL_ID);
    IF ((p_PAYMENT_CHANNEL_ID in ('1', '4', '5')) and
       (p_BANK_CODE not in ('032', '000018'))) THEN
      --UIP,QUICKTELLER ,REMITTA
      select CHANNEL_CODE
        into v_paymentcode
        from REF_PAYMENT_CHANNELS
       where CHANNEL_ID = p_PAYMENT_CHANNEL_ID;
    
      v_feereturnval := PAYMENTS.mdw_ibank_posting_pkg.get_fee_and_susp_nib(v_paymentcode,
                                                                            p_AMOUNT,
                                                                            v_suspense_account,
                                                                            v_fee,
                                                                            
                                                                            v_incomeaccount);
    
      IF (p_PAYMENT_CHANNEL_ID in ('1')) THEN
        v_chargeamt := v_chargeamt + v_fee;
      END IF;
    
      -- v_chargeamt    := v_chargeamt + v_fee;
    END IF;
    --- series of validation should go in here
    if (p_BANK_CODE is null or trim(p_BANK_CODE) = '' or
       length(p_bank_code) not in (3, 6)) then
      --v_response_code := '16';
      v_response_code := 'INVALID BANK CODE FOR CR ACCOUNT ' ||
                         p_CR_ACCOUNT_NO;
      -- o_response_message:='Invalid Bank Code';
      return v_response_code;
    else
    
      IF (p_BANK_CODE not in ('032', '000018')) THEN
        v_isinterbanktransfer := 'Y';
        v_processingstatus    := '02';
      END IF;
    
      -- if(length(p_bank_code) in(3)) then
      if ((length(p_bank_code) in (3)) and (p_bank_code not in ('N/A'))) then
        --corretion
        select NIBSSCODE
          into v_bank_code
          from newibank.RIB_BANKS_LIST
        
         WHERE DEL_FLG = 'N'
           and BNK_CODE = p_bank_code;
      end if;
      /*if (v_isinterbanktransfer = 'N') then
        v_response_code := validateAccount(p_CR_ACCOUNT_NO);
        if (v_response_code <> '00') then
          return v_response_code;
        end if;
      else*/
      if p_CR_ACCOUNT_NO = null or p_CR_ACCOUNT_NO = '' --or length(p_CR_ACCOUNT_NO) <> 10 
       then
        --v_response_code := '07';
        v_response_code := 'INVALID CR ACCOUNT / CUSTOM FIELD ';
        return v_response_code;
      end if;
      --end if;
    
    end if;
    --- validation ends here
  
    --THREAD_ID_SEQ
    -- begin
    INSERT INTO TRANSACTION_UPLOAD_DETAIL
      (CREATED_DATE,
       THREAD_ID,
       BATCH_ID,
       AMOUNT,
       CR_ACCOUNT_NO,
       BENEFICIARY_ID,
       BANK_CODE,
       DR_ACCOUNT_NO,
       CREATED_BY,
       SCHEDULE_DATE,
       NARRATION,
       PROCESSING_STATUS,
       APPROVAL_STATUS_ID,
       PAYMENT_TYPE_ID,
       BANK_NAME,
       ISINTERBANK_TRANSFER,
       CORP_ID,
       PAYMENT_CHANNEL_ID,
       biller_product_type,
       MOBILE_NUMBER,
       BILLER_CATEGORY,
       BENEFICIARY_EMAIL,
       BILLER_NAME,
       BILLER_CUSTOM_FIELD_VALUE,
       CHARGE_AMOUNT,
       beneficiary_name
       
       )
    VALUES
      (SYSDATE,
       THREAD_ID_SEQ.NEXTVAL,
       p_BATCH_ID,
       p_AMOUNT,
       p_CR_ACCOUNT_NO,
       p_BENEFICIARY_ID,
       v_bank_code,
       p_DR_ACCOUNT_NO,
       p_CREATED_BY,
       TO_DATE(p_SCHEDULE_DATE, 'DD-MM-YYYY'),
       p_NARRATION,
       v_processingstatus,
       1,
       p_PAYMENT_TYPE_ID,
       p_BANK_NAME,
       v_isinterbanktransfer,
       p_CORP_ID,
       p_PAYMENT_CHANNEL_ID,
       p_MOBILE_NETWORK_ID,
       p_MOBILE_NUMBER,
       p_BILLER_CATEGORY,
       p_BENEFICIARY_EMAIL,
       p_BILLER_NAME,
       p_CR_ACCOUNT_NO,
       v_chargeamt,
       p_beneficiary_name);
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.TRANSACTION_UPLOAD_DETAIL');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  FUNCTION addTransactionUploadSummary(p_DR_ACCOUNT         IN VARCHAR2,
                                       p_CREATED_BY         IN VARCHAR2,
                                       p_CORP_ID            IN VARCHAR2,
                                       p_BATCH_ID           IN VARCHAR2,
                                       p_SCHEDULE_DATE      IN VARCHAR2,
                                       p_NO_OF_RECORD       IN VARCHAR2,
                                       p_TOTAL_AMOUNT       IN VARCHAR2,
                                       p_PAYMENT_TYPE_ID    IN VARCHAR2,
                                       p_MENU_ID            IN VARCHAR2,
                                       p_CHARGE_OPTION_ID   IN VARCHAR2,
                                       p_BATCH_DESCRIPTION  IN VARCHAR2,
                                       p_POSTING_OPTIONID   IN VARCHAR2,
                                       p_payment_channel_id varchar2,
                                       
                                       p_upload_filename varchar2, --#sprint2
                                       p_auth_token_flag char,
                                       p_auth_token_sno  varchar2,
                                       p_context_url     varchar2,
                                       p_ip_mac_address  varchar2,
                                       p_session_id      varchar2)
    RETURN VARCHAR2 IS
    v_err_message             VARCHAR2(3000);
    v_response                VARCHAR2(300); --correction
    v_recordstatus            VARCHAR2(2);
    v_maintableid             NUMBER;
    v_reqid                   NUMBER;
    v_approvalstatus          VARCHAR2(2);
    v_branchcode              VARCHAR2(10);
    v_holdingacctid           VARCHAR2(15);
    v_holdingacctno           VARCHAR2(15);
    v_holdingacctbranchcode   VARCHAR2(15);
    v_holdingacctcurrencycode VARCHAR2(15);
    v_holdingaccttype         VARCHAR2(15);
    v_postingoption           VARCHAR2(10);
    v_acctCurrency            VARCHAR2(10);
    v_transitpostref          VARCHAR2(200);
    --TRANSIT_POSTREF
    v_chargeapply               VARCHAR2(2);
    v_validatetoken             NUMBER;
    v_istokenused               VARCHAR2(20);
    v_chargeamt                 NUMBER;
    v_totalchargeamt            NUMBER;
    v_chargediscountexist       NUMBER;
    v_chargediscountpercent     NUMBER;
    v_chargediscountamt         NUMBER;
    v_quicktellercount          NUMBER;
    v_holdingacctexist          NUMBER;
    v_corporate_limit           corporate_limits%rowtype;
    v_actual_daily_limit_amount number;
  BEGIN
    v_istokenused   := 'N';
    v_response      := validateAccount(p_DR_ACCOUNT);
    v_postingoption := p_POSTING_OPTIONID;
    begin
      v_corporate_limit := getCorporateLimitSetup(p_CORP_ID);
    exception
      when no_Data_found then
      
        return '99~~No limit found for the corporate and no default limit maintained';
      
    end;
  
    ---old
  
    /* select sum(a.total_tran_amount)
     into v_actual_daily_limit_amount
     from TRANSACTION_UPLOAD_SUMMARY a
    where a.corp_id = p_CORP_ID
      and trunc(a.created_date) = trunc(sysdate);*/
  
    --   if (p_TOTAL_AMOUNT > v_corporate_limit.transaction_limit_amount) then
  
    --   return '99~~Transaction Limit exceed by ' ||(p_TOTAL_AMOUNT -
    --                                              v_corporate_limit.transaction_limit_amount);
  
    -- elsif ((v_actual_daily_limit_amount + p_TOTAL_AMOUNT) >
    --  elsif ((p_TOTAL_AMOUNT) >
    --        v_corporate_limit.daily_limit_amount) then
    /*return '99~~Daily Limit exceed by ' ||((v_actual_daily_limit_amount +
    p_TOTAL_AMOUNT) -
    v_corporate_limit.daily_limit_amount);*/
    --   return '99~~Daily Limit exceed by ' ||((p_TOTAL_AMOUNT) -
    --   v_corporate_limit.daily_limit_amount);
  
    -- elsif (v_response is null or v_response = '' or v_response <> '00') then
    --      return v_response;
    --  end if;
  
    --end old
    if (v_response is null or v_response = '' or v_response <> '00') then
      return v_response;
    end if;
    -- SET TRANSACTION READ WRITE;
    --v_transitpostref :='';
    --DR_ACCOUNT_CURRENCY_CODE
    -- v_chargeamt :=0.0;
    --v_chargediscountamt :=0.0;
    select BRANCH_CODE, CCY
      into v_branchcode, v_acctCurrency
      from sttm_cust_account
     where cust_ac_no = p_DR_ACCOUNT
       and auth_stat = 'A'
       and record_stat = 'O';
    select NVL(HOLDING_ACCOUNT_ID, '0')
      into v_holdingacctid
      from CORPORATE_PROFILE
     where corp_id = p_CORP_ID;
    --#sprint2
    IF (v_holdingacctid = '0') THEN
      SELECT COUNT(1)
        INTO v_holdingacctexist
        FROM HOLDING_ACCOUNTS
       WHERE IS_DEFAULT_HOLDING_ACCT = 'Y'
         AND ROWNUM < 2;
      IF (v_holdingacctexist > 0) THEN
        SELECT ACCOUNT_NO, ACCOUNT_TYPE, BRANCH_CODE, CURRENCY_CODE
          INTO v_holdingacctno,
               v_holdingaccttype,
               v_holdingacctbranchcode,
               v_holdingacctcurrencycode
          FROM HOLDING_ACCOUNTS
         WHERE IS_DEFAULT_HOLDING_ACCT = 'Y'
           AND ROWNUM < 2;
      ELSE
        return 'HOLDING ACCOUNT NOT YET MAINTAINED FOR LUMPSUM DEBIT. PLEASE CONTACT THE UNION BANK CONTACT CENTER';
      END IF;
    ELSE
      SELECT COUNT(1)
        INTO v_holdingacctexist
        FROM HOLDING_ACCOUNTS
       WHERE HOLDING_ACCOUNT_ID = v_holdingacctid;
      IF (v_holdingacctexist > 0) THEN
        SELECT ACCOUNT_NO, ACCOUNT_TYPE, BRANCH_CODE, CURRENCY_CODE
          INTO v_holdingacctno,
               v_holdingaccttype,
               v_holdingacctbranchcode,
               v_holdingacctcurrencycode
          FROM HOLDING_ACCOUNTS
         WHERE HOLDING_ACCOUNT_ID = v_holdingacctid;
      
      ELSE
        return 'HOLDING ACCOUNT NOT YET MAINTAINED FOR LUMPSUM DEBIT. PLEASE CONTACT THE UNION BANK CONTACT CENTER';
      
      END IF;
    END IF;
  
    IF (v_postingoption = '2') THEN
      --v_holdingacctexist
      --#sprint2
    
      v_transitpostref := 'CIB' || p_BATCH_ID;
    END IF;
  
    if (p_auth_token_sno is not null and length(p_auth_token_sno) > 0) then
      select count(1)
        into v_validatetoken
        from TOKEN_VALIDATION_LOG
       where VALIDATION_REF = p_auth_token_sno
         and RESPONSE_CODE = '1'
         and ((sysdate - CREATED_DATE) * 24 * 60 * 60) < 120;
      if (v_validatetoken = 0) then
        v_response := '99~~Token has expired or invalid. Kindly use another token and try again.'; --INVALID APPROVAL OPTION
        RETURN v_response;
      else
        v_istokenused := 'Y';
      end if;
    end if;
    INSERT INTO TRANSACTION_UPLOAD_SUMMARY
      (HOLDING_ACCT_BRANCH_CODE,
       HOLDING_ACCT_CURRENCY_CODE,
       HOLDING_ACCT_TYPE,
       HOLDING_ACCT_NO,
       POSTING_OPTION_ID,
       DR_ACCOUNT,
       CREATED_BY,
       CREATED_DATE,
       CORP_ID,
       APPROVAL_STATUS_ID,
       BATCH_ID,
       SCHEDULE_DATE,
       NO_OF_RECORD,
       TOTAL_TRAN_AMOUNT,
       PAYMENT_TYPE_ID,
       DR_ACCOUNT_BRANCH_CODE,
       DR_ACCOUNT_CURRENCY_CODE,
       THREAD_ID,
       TRANSIT_POSTREF,
       BATCH_DESCRIPTION,
       original_total_tran_amount,
       payment_channel_id,
       upload_filename, --#sprint2
       auth_token_flag,
       auth_token_sno)
    VALUES
      (v_holdingacctbranchcode,
       v_holdingacctcurrencycode,
       v_holdingaccttype,
       v_holdingacctno,
       v_postingoption,
       p_DR_ACCOUNT,
       p_CREATED_BY,
       SYSDATE,
       p_CORP_ID,
       1,
       p_BATCH_ID,
       --TO_DATE( SUBSTR(p_SCHEDULE_DATE, 0, 10), 'YYYY-MM-DD'),
       TO_DATE(p_SCHEDULE_DATE, 'DD-MM-YYYY'),
       p_NO_OF_RECORD,
       p_TOTAL_AMOUNT,
       p_PAYMENT_TYPE_ID,
       v_branchcode,
       v_acctCurrency,
       THREAD_ID_SEQ.NEXTVAL,
       v_transitpostref,
       p_BATCH_DESCRIPTION,
       p_TOTAL_AMOUNT,
       p_payment_channel_id,
       p_upload_filename, --#sprint2
       v_istokenused,
       p_auth_token_sno);
  
    if (p_upload_filename is not null and length(p_upload_filename) > 2) then
      update TRANSACTION_UPLOAD_SUMMARY
         set TRANSACTION_INITIATED = 'Y',
             LAST_MODIFIED_BY      = p_CREATED_BY,
             LAST_MODIFIED_DATE    = SYSDATE
       WHERE BATCH_ID = p_upload_filename; --Correct
      -- update TRANSACTION_UPLOAD_DETAIL set TRANSACTION_INITIATED='CANCELED' WHERE BATCH_ID=i_batchid and ;
    
    end if;
  
    select count(1)
      into v_quicktellercount
      from TRANSACTION_UPLOAD_DETAIL
     where BATCH_ID = p_BATCH_ID
       and PAYMENT_CHANNEL_ID = 4; --quick teller
  
    IF (v_quicktellercount > 0) THEN
    
      update TRANSACTION_UPLOAD_DETAIL
         set POST_REF_NO = 'CIBQT' || (TO_CHAR(SYSDATE, 'YYMMDDHH24MMSS')) ||
                           LPAD(PAYMENTS.bills_pay_ref_id_seq.NEXTVAL,
                                12,
                                '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
         AND PAYMENT_CHANNEL_ID = 4; --quick teller
    END IF;
    IF (v_postingoption = '2') THEN
      --SINGLE DEBIT
      UPDATE TRANSACTION_UPLOAD_DETAIL
         SET DR_ACCOUNT_NO = v_holdingacctno,
             --POST_REF_NO   = 'B/' || BATCH_DETAIL_ID || '/' || p_BATCH_ID
             POST_REF_NO = 'CIB' || BATCH_DETAIL_ID
       WHERE BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'N';
    
      update TRANSACTION_UPLOAD_DETAIL
         set DR_ACCOUNT_NO = v_holdingacctno,
             POST_REF_NO   = 'CIB000018' || TO_CHAR(SYSDATE, 'YYMMDDHHMMSS') ||
                             LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL,
                                  12,
                                  -- '0') || '/' || p_BATCH_ID
                                  '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
         AND PAYMENT_CHANNEL_ID in (1, 2, 3); --NIP,NEFT,NAPS --#sprint2
    
    ELSIF (v_postingoption = '1') THEN
      --MULTIPLE DEBIT
      UPDATE TRANSACTION_UPLOAD_DETAIL
         SET POST_REF_NO = 'CIB' || BATCH_DETAIL_ID
       WHERE BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'N';
    
      update TRANSACTION_UPLOAD_DETAIL
         set POST_REF_NO = 'CIB000018' || TO_CHAR(SYSDATE, 'YYMMDDHHMMSS') ||
                           LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL,
                                12,
                                '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
         AND PAYMENT_CHANNEL_ID in (1, 2, 3); --NIP,NEFT,NAPS --#sprint2
    END IF;
    --v_holdingacctno
  
    select CHARGE_APPLY, CHARGE_AMOUNT
      into v_chargeapply, v_chargeamt
      from REF_PAYMENT_TYPES
     where PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID;
    --IF (v_chargeapply = 'Y') THEN
    select count(1)
      into v_chargediscountexist
      from CORPORATE_DISCOUNTS
     where CORP_ID = p_CORP_ID
       and PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID
       AND RECORD_STATUS_ID = 2
       AND APPROVAL_STATUS_ID = 2;
    IF (v_chargediscountexist > 0) THEN
      select PERCENTAGE_DISCOUNT
        into v_chargediscountpercent
        from CORPORATE_DISCOUNTS
       where CORP_ID = p_CORP_ID
         and PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID
         AND RECORD_STATUS_ID = 2
         AND APPROVAL_STATUS_ID = 2;
      v_chargediscountamt := ((v_chargediscountpercent / 100) * v_chargeamt);
      v_chargeamt         := (v_chargeamt - v_chargediscountamt);
    END IF;
    IF (p_CHARGE_OPTION_ID = '1') THEN
      --SENDER TO PAY
      UPDATE TRANSACTION_UPLOAD_DETAIL
         SET CHARGE_AMOUNT =
             (CHARGE_AMOUNT + v_chargeamt)
       WHERE BATCH_ID = p_BATCH_ID;
    ELSIF (p_CHARGE_OPTION_ID = '2') THEN
      -- BENEFICIARY TO PAY
      UPDATE TRANSACTION_UPLOAD_DETAIL
         SET CHARGE_AMOUNT =
             (CHARGE_AMOUNT + v_chargeamt),
             AMOUNT       =
             (AMOUNT - (CHARGE_AMOUNT + v_chargeamt))
       WHERE BATCH_ID = p_BATCH_ID;
    END IF;
    SELECT SUM(CHARGE_AMOUNT)
      into v_totalchargeamt
      FROM TRANSACTION_UPLOAD_DETAIL
     WHERE BATCH_ID = p_BATCH_ID;
  
    IF (p_CHARGE_OPTION_ID = '1') THEN
      --SENDER TO PAY
      UPDATE TRANSACTION_UPLOAD_SUMMARY a
         SET TOTAL_CHARGE_AMT            = v_totalchargeamt,
             a.original_total_charge_amt = v_totalchargeamt,
             CUMULATIVE_AMOUNT          =
             (v_totalchargeamt + TOTAL_TRAN_AMOUNT),
             original_CUMULATIVE_AMOUNT =
             (v_totalchargeamt + TOTAL_TRAN_AMOUNT)
       WHERE BATCH_ID = p_BATCH_ID;
    ELSIF (p_CHARGE_OPTION_ID = '2') THEN
      -- BENEFICIARY TO PAY
      UPDATE TRANSACTION_UPLOAD_SUMMARY a
         SET TOTAL_CHARGE_AMT             = v_totalchargeamt,
             a.original_total_charge_amt  = v_totalchargeamt,
             TOTAL_TRAN_AMOUNT           =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             a.original_total_tran_amount =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             CUMULATIVE_AMOUNT           =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             original_CUMULATIVE_AMOUNT  =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt)
       WHERE BATCH_ID = p_BATCH_ID;
    END IF;
  
    -- END IF;
  
    /* v_response := cib_ibank_sr_pkg.logApproveralRequest(p_DR_ACCOUNT,
    p_CREATED_BY,
    p_MENU_ID,
    '1',
    p_BATCH_ID,
    p_TOTAL_AMOUNT,
    p_CORP_ID,
     p_auth_token_flag,
          p_auth_token_sno
    );
    */
  
    --v_response := '00';
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      -- v_response := '00~~Upload was Successful and Account Validation in Progress. You will be notified once the Validation is Completed.';
      v_response := '00~~Account Validation in Progress. You will be notified once the Validation is Completed.';
    
      commit;
    else
      rollback;
    end if;
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'TRANSACTION', --event category
                   'batchid~' || p_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_MENU_ID,
                   1,
                   v_response,
                   p_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      INSERT INTO rib_sr_error_log
        (error_date, error_msg, error_point)
      VALUES
        (SYSDATE,
         DBMS_UTILITY.format_error_backtrace || v_err_message,
         'CIBANK.TRANSACTION_UPLOAD_SUMMARY');
    
      COMMIT;
      v_response := getFriendlyExceptionMessage(v_err_message, p_MENU_ID);
      RETURN v_response;
  END;

  FUNCTION updatenipfundtransferresponse(uids            IN VARCHAR2,
                                         responsecode    IN VARCHAR2,
                                         responsemessage IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(300);
    v_responsecode          VARCHAR2(100);
    v_recordid              VARCHAR2(100);
    v_sessionid             VARCHAR2(100);
    v_reversalamt           NUMBER(18, 2);
    v_responsemsg           VARCHAR2(400);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_initiate_reversal     INTEGER;
    v_retry                 INTEGER;
    v_batchid               VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_uids         := uids;
    v_responsecode := responsecode;
    v_responsemsg  := responsemessage;
    v_reversalamt  := 0.0;
    SELECT BATCH_DETAIL_ID, SESSIONID
      INTO v_recordid, v_sessionid
      FROM nip_fundtransfer
     WHERE uids = v_uids;
  
    UPDATE nip_fundtransfer
       SET responsecode    = v_responsecode,
           responsemessage = v_responsemsg,
           responsetime    = SYSDATE
     WHERE uids = v_uids;
  
    /*IF (((v_responsecode = '00') AND
    (v_responsemsg = 'Approved or completed successfully')) or ((v_responsecode = '94') AND
    (v_responsemsg = 'Duplicate transaction at Beneficiary Bank'))) THEN*/
    -- IF (v_responsecode in ('00','94')) THEN
    IF (v_responsecode in ('00')) THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS     = '00',
             THIRDPARTY_SESSION_ID = v_sessionid,
             ERROR_TRIAL_COUNT     = 0,
             TRANSACTION_STATUS    = 'SUCCESSFUL',
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
             THIRDPARTY_guid             = v_uids
       WHERE BATCH_DETAIL_ID = v_recordid;
    ELSIF (v_responsecode = 'TO') THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS       = '14',
             ERROR_PROCESSING_STATUS = '14',
             THIRDPARTY_SESSION_ID   = v_sessionid,
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             ERROR_TRIAL_COUNT          =
             (ERROR_TRIAL_COUNT + 1),
             TRANSACTION_STATUS          = 'UNKNOWN',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
             THIRDPARTY_guid             = v_uids,
             FAILURE_REASON              = v_responsemsg
       WHERE BATCH_DETAIL_ID = v_recordid;
    
    ELSE
      --Update RIA_INVOICES set PROCESSINGSTATUS='13',  NIBBS_FTRESPONSECODE=v_responsecode,NIBBS_FTRESPONSEXML=v_responsemsg,NIBBS_FTGUID=v_uids where INVOICEID=v_invoiceid;
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      select count(1)
        into v_retry
        from PAYMENTS.REF_RESPONSE_CODES
       where RESPONSE_CODE = v_responsecode
         AND RETRY = 'Y'
         and CHANNEL_CODE = 'NIP';
    
      select ERROR_TRIAL_COUNT, BATCH_ID, (AMOUNT + CHARGE_AMOUNT)
        into v_trialcount, v_batchid, v_reversalamt
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = v_recordid;
      v_retry := 1;
      IF ((v_trialcount < v_defaulttrialcount) and v_retry > 0) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS     = '-04',
               THIRDPARTY_SESSION_ID = v_sessionid,
               ERROR_TRIAL_COUNT    =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME      =
               (sysdate + (1 / 1440 * v_defaulttrialintervals)),
               --riaresponsecode = '00',
               --riaresponsedesciption = 'PAID',
               THIRDPARTY_RESPONSE_CODE    = v_responsecode,
               THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
               THIRDPARTY_guid             = v_uids
         WHERE BATCH_DETAIL_ID = v_recordid;
      ELSE
      
        select count(1)
          into v_initiate_reversal
          from PAYMENTS.REF_RESPONSE_CODES
         where RESPONSE_CODE = v_responsecode
           AND REVERSE = 'Y'
           and CHANNEL_CODE = 'NIP';
        IF (v_initiate_reversal > 0) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS        = '13',
                 ERROR_TRIAL_COUNT        = 0,
                 ERROR_PROCESSING_STATUS  = '10',
                 TRANSACTION_STATUS       = 'FAILED',
                 THIRDPARTY_SESSION_ID    = v_sessionid,
                 THIRDPARTY_RESPONSE_DATE = SYSDATE,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 THIRDPARTY_guid             = v_uids,
                 FAILURE_REASON              = v_responsemsg
           WHERE BATCH_DETAIL_ID = v_recordid;
        ELSE
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS  = '14',
                 ERROR_TRIAL_COUNT  = 0,
                 TRANSACTION_STATUS = 'UNKNOWN',
                 
                 MANUAL_SETTLEMENT_ADVISED = 'Y',
                 THIRDPARTY_SESSION_ID     = v_sessionid,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 THIRDPARTY_guid             = v_uids,
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                 ERROR_PROCESSING_STATUS     = '10',
                 FAILURE_REASON              = v_responsemsg
          -- customer_bvn = bvn,
          
          -- WHERE INVOICEID = v_invoiceid;
           WHERE BATCH_DETAIL_ID = v_recordid;
        END IF;
      
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;
  FUNCTION updateAkwaIbomNoticeresponse(v_batch_detail  IN VARCHAR2,
                                        responsecode    IN VARCHAR2,
                                        responsemessage IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(300);
    v_responsecode          VARCHAR2(100);
    v_recordid              VARCHAR2(100);
    v_sessionid             VARCHAR2(100);
    v_reversalamt           NUMBER(18, 2);
    v_responsemsg           VARCHAR2(400);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_initiate_reversal     INTEGER;
    v_retry                 INTEGER;
    v_batchid               VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    -- v_uids         := uids;
    v_responsecode := responsecode;
    v_responsemsg  := responsemessage;
    v_reversalamt  := 0.0;
    /* SELECT BATCH_DETAIL_ID, SESSIONID
       INTO v_recordid, v_sessionid
       FROM nip_fundtransfer
      WHERE uids = v_uids;
    
    
     UPDATE nip_fundtransfer
        SET responsecode    = v_responsecode,
            responsemessage = v_responsemsg,
            responsetime    = SYSDATE
      WHERE uids = v_uids;
    */
  
    /*IF (((v_responsecode = '00') AND
    (v_responsemsg = 'Approved or completed successfully')) or ((v_responsecode = '94') AND
    (v_responsemsg = 'Duplicate transaction at Beneficiary Bank'))) THEN*/
    -- IF (v_responsecode in ('00','94')) THEN
    IF (v_responsecode in ('00')) THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS = '00',
             --THIRDPARTY_SESSION_ID = v_sessionid,
             ERROR_TRIAL_COUNT  = 0,
             TRANSACTION_STATUS = 'SUCCESSFUL',
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg
      --THIRDPARTY_guid             = v_uids
       WHERE BATCH_DETAIL_ID = v_batch_detail;
      --update COLLECTION_DETAILS set CUSTOM_VALUE_10=v_receiptid where BATCH_DETAIL_ID = v_batch_detail;
    
    ELSE
      --Update RIA_INVOICES set PROCESSINGSTATUS='13',  NIBBS_FTRESPONSECODE=v_responsecode,NIBBS_FTRESPONSEXML=v_responsemsg,NIBBS_FTGUID=v_uids where INVOICEID=v_invoiceid;
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      /* select count(1)
       into v_retry
       from REF_RESPONSE_CODES
      where RESPONSE_CODE = v_responsecode
        AND RETRY = 'Y'
        and CHANNEL_CODE = 'NIP';*/
    
      select ERROR_TRIAL_COUNT, BATCH_ID, (AMOUNT + CHARGE_AMOUNT)
        into v_trialcount, v_batchid, v_reversalamt
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = v_recordid;
      IF ((v_trialcount < v_defaulttrialcount)) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS = '-04',
               -- THIRDPARTY_SESSION_ID = v_sessionid,
               ERROR_TRIAL_COUNT =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME  =
               (sysdate + (1 / 1440 * v_defaulttrialintervals)),
               --riaresponsecode = '00',
               --riaresponsedesciption = 'PAID',
               THIRDPARTY_RESPONSE_CODE    = v_responsecode,
               THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg
        -- THIRDPARTY_guid             = v_uids
         WHERE BATCH_DETAIL_ID = v_batch_detail;
      ELSE
      
        /*select count(1)
         into v_initiate_reversal
         from REF_RESPONSE_CODES
        where RESPONSE_CODE = v_responsecode
          AND REVERSE = 'Y'
          and CHANNEL_CODE = 'NIP';*/
        v_initiate_reversal := 1;
        IF (v_initiate_reversal > 0) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS       = '13',
                 ERROR_TRIAL_COUNT       = 0,
                 ERROR_PROCESSING_STATUS = '10',
                 TRANSACTION_STATUS      = 'FAILED',
                 --THIRDPARTY_SESSION_ID    = v_sessionid,
                 THIRDPARTY_RESPONSE_DATE = SYSDATE,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 
                 FAILURE_REASON = v_responsemsg
          --THIRDPARTY_guid             = v_uids
           WHERE BATCH_DETAIL_ID = v_batch_detail;
        ELSE
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS  = '14',
                 ERROR_TRIAL_COUNT  = 0,
                 TRANSACTION_STATUS = 'UNKNOWN',
                 
                 MANUAL_SETTLEMENT_ADVISED = 'Y',
                 --THIRDPARTY_SESSION_ID     = v_sessionid,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 THIRDPARTY_guid             = v_uids,
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                 ERROR_PROCESSING_STATUS     = '10',
                 FAILURE_REASON              = v_responsemsg
          -- customer_bvn = bvn,
          
          -- WHERE INVOICEID = v_invoiceid;
           WHERE BATCH_DETAIL_ID = v_batch_detail;
        END IF;
      
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION updateFirsNoticeresponse(v_post_ref_no   IN VARCHAR2,
                                    responsecode    IN VARCHAR2,
                                    responsemessage IN VARCHAR2,
                                    v_error_msg     IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(300);
    v_responsecode          VARCHAR2(100);
    v_recordid              VARCHAR2(100);
    v_sessionid             VARCHAR2(100);
    v_reversalamt           NUMBER(18, 2);
    v_responsemsg           VARCHAR2(400);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_initiate_reversal     INTEGER;
    v_retry                 INTEGER;
    v_batchid               VARCHAR2(200);
    v_batch_detail_id       VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    select batch_detail_id
      into v_batch_detail_id
      from TRANSACTION_BATCH_DETAIL
     where POST_REF_NO = v_post_ref_no;
  
    -- v_uids         := uids;
    v_responsecode := responsecode;
    v_responsemsg  := responsemessage;
    v_reversalamt  := 0.0;
  
    INSERT INTO FIRS_NOTIFICATION_LOG
      (RESPONSE_CODE,
       TRANSREF,
       RESPONSE_MESSAGE,
       BATCH_DETAIL_ID,
       ERROR_MSG)
    VALUES
      (responsecode,
       v_post_ref_no,
       responsemessage,
       v_batch_detail_id,
       v_error_msg);
    /*IF (((v_responsecode = '00') AND
    (v_responsemsg = 'Approved or completed successfully')) or ((v_responsecode = '94') AND
    (v_responsemsg = 'Duplicate transaction at Beneficiary Bank'))) THEN*/
    -- IF (v_responsecode in ('00','94')) THEN
    IF ((v_responsecode in ('00')) or
       (v_error_msg like
       'Unique transaction reference must be specified for%')) THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS        = '00',
             CUSTOM_RECEIPT_GENERATED = 'Y',
             --THIRDPARTY_SESSION_ID = v_sessionid,
             ERROR_TRIAL_COUNT  = 0,
             TRANSACTION_STATUS = 'SUCCESSFUL',
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg
      --THIRDPARTY_guid             = v_uids
       WHERE BATCH_DETAIL_ID = v_batch_detail_id;
      --update COLLECTION_DETAILS set CUSTOM_VALUE_10=v_receiptid where BATCH_DETAIL_ID = v_batch_detail;
    
    ELSE
      --Update RIA_INVOICES set PROCESSINGSTATUS='13',  NIBBS_FTRESPONSECODE=v_responsecode,NIBBS_FTRESPONSEXML=v_responsemsg,NIBBS_FTGUID=v_uids where INVOICEID=v_invoiceid;
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      /* select count(1)
       into v_retry
       from REF_RESPONSE_CODES
      where RESPONSE_CODE = v_responsecode
        AND RETRY = 'Y'
        and CHANNEL_CODE = 'NIP';*/
    
      select ERROR_TRIAL_COUNT, BATCH_ID, (AMOUNT + CHARGE_AMOUNT)
        into v_trialcount, v_batchid, v_reversalamt
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = v_batch_detail_id;
      IF ((v_trialcount < v_defaulttrialcount)) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS = '-04',
               -- THIRDPARTY_SESSION_ID = v_sessionid,
               ERROR_TRIAL_COUNT =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME  =
               (sysdate + (1 / 1440 * v_defaulttrialintervals)),
               --riaresponsecode = '00',
               --riaresponsedesciption = 'PAID',
               THIRDPARTY_RESPONSE_CODE    = v_responsecode,
               THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg
        -- THIRDPARTY_guid             = v_uids
         WHERE BATCH_DETAIL_ID = v_batch_detail_id;
      ELSE
      
        /*select count(1)
         into v_initiate_reversal
         from REF_RESPONSE_CODES
        where RESPONSE_CODE = v_responsecode
          AND REVERSE = 'Y'
          and CHANNEL_CODE = 'NIP';*/
        v_initiate_reversal := 1;
        IF (v_initiate_reversal > 0) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS       = '13',
                 ERROR_TRIAL_COUNT       = 0,
                 ERROR_PROCESSING_STATUS = '10',
                 TRANSACTION_STATUS      = 'FAILED',
                 --THIRDPARTY_SESSION_ID    = v_sessionid,
                 THIRDPARTY_RESPONSE_DATE = SYSDATE,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 FAILURE_REASON              = v_responsemsg
          --THIRDPARTY_guid             = v_uids
           WHERE BATCH_DETAIL_ID = v_batch_detail_id;
        ELSE
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS  = '14',
                 ERROR_TRIAL_COUNT  = 0,
                 TRANSACTION_STATUS = 'UNKNOWN',
                 
                 MANUAL_SETTLEMENT_ADVISED = 'Y',
                 --THIRDPARTY_SESSION_ID     = v_sessionid,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 THIRDPARTY_guid             = v_uids,
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                 ERROR_PROCESSING_STATUS     = '10',
                 FAILURE_REASON              = v_responsemsg
          -- customer_bvn = bvn,
          
          -- WHERE INVOICEID = v_invoiceid;
           WHERE BATCH_DETAIL_ID = v_batch_detail_id;
        END IF;
      
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;
  FUNCTION updateRevPayNoticeresponse(v_batch_detail  IN VARCHAR2,
                                      responsecode    IN VARCHAR2,
                                      responsemessage IN VARCHAR2,
                                      v_receiptid     IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(300);
    v_responsecode          VARCHAR2(100);
    v_recordid              VARCHAR2(100);
    v_sessionid             VARCHAR2(100);
    v_reversalamt           NUMBER(18, 2);
    v_responsemsg           VARCHAR2(400);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_initiate_reversal     INTEGER;
    v_retry                 INTEGER;
    v_batchid               VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    -- v_uids         := uids;
    v_responsecode := responsecode;
    v_responsemsg  := responsemessage;
    v_reversalamt  := 0.0;
    /* SELECT BATCH_DETAIL_ID, SESSIONID
       INTO v_recordid, v_sessionid
       FROM nip_fundtransfer
      WHERE uids = v_uids;
    
    
     UPDATE nip_fundtransfer
        SET responsecode    = v_responsecode,
            responsemessage = v_responsemsg,
            responsetime    = SYSDATE
      WHERE uids = v_uids;
    */
  
    /*IF (((v_responsecode = '00') AND
    (v_responsemsg = 'Approved or completed successfully')) or ((v_responsecode = '94') AND
    (v_responsemsg = 'Duplicate transaction at Beneficiary Bank'))) THEN*/
    -- IF (v_responsecode in ('00','94')) THEN
    IF (v_responsecode in ('SUCCESSFULL')) THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS = '00',
             --THIRDPARTY_SESSION_ID = v_sessionid,
             ERROR_TRIAL_COUNT  = 0,
             TRANSACTION_STATUS = 'SUCCESSFUL',
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
             CUSTOM_RECEIPT_GENERATED    = 'Y',
             CUSTOM_RECEIPT_URL          = v_receiptid
      --THIRDPARTY_guid             = v_uids
       WHERE BATCH_DETAIL_ID = v_batch_detail;
      update COLLECTION_DETAILS
         set CUSTOM_VALUE_10 = v_receiptid
       where BATCH_DETAIL_ID = v_batch_detail;
    
    ELSE
      --Update RIA_INVOICES set PROCESSINGSTATUS='13',  NIBBS_FTRESPONSECODE=v_responsecode,NIBBS_FTRESPONSEXML=v_responsemsg,NIBBS_FTGUID=v_uids where INVOICEID=v_invoiceid;
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      /* select count(1)
       into v_retry
       from REF_RESPONSE_CODES
      where RESPONSE_CODE = v_responsecode
        AND RETRY = 'Y'
        and CHANNEL_CODE = 'NIP';*/
    
      select ERROR_TRIAL_COUNT, BATCH_ID, (AMOUNT + CHARGE_AMOUNT)
        into v_trialcount, v_batchid, v_reversalamt
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = v_batch_detail;
      IF ((v_trialcount < v_defaulttrialcount)) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS = '-04',
               -- THIRDPARTY_SESSION_ID = v_sessionid,
               ERROR_TRIAL_COUNT =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME  =
               (sysdate + (1 / 1440 * v_defaulttrialintervals)),
               --riaresponsecode = '00',
               --riaresponsedesciption = 'PAID',
               THIRDPARTY_RESPONSE_CODE    = v_responsecode,
               THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg
        -- THIRDPARTY_guid             = v_uids
         WHERE BATCH_DETAIL_ID = v_batch_detail;
      ELSE
      
        /*select count(1)
         into v_initiate_reversal
         from REF_RESPONSE_CODES
        where RESPONSE_CODE = v_responsecode
          AND REVERSE = 'Y'
          and CHANNEL_CODE = 'NIP';*/
        v_initiate_reversal := 1;
        IF (v_initiate_reversal > 0) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS       = '13',
                 ERROR_TRIAL_COUNT       = 0,
                 ERROR_PROCESSING_STATUS = '10',
                 TRANSACTION_STATUS      = 'FAILED',
                 --THIRDPARTY_SESSION_ID    = v_sessionid,
                 THIRDPARTY_RESPONSE_DATE = SYSDATE,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 FAILURE_REASON              = v_responsemsg
          --THIRDPARTY_guid             = v_uids
           WHERE BATCH_DETAIL_ID = v_batch_detail;
        ELSE
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS  = '14',
                 ERROR_TRIAL_COUNT  = 0,
                 TRANSACTION_STATUS = 'UNKNOWN',
                 
                 MANUAL_SETTLEMENT_ADVISED = 'Y',
                 --THIRDPARTY_SESSION_ID     = v_sessionid,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                 THIRDPARTY_guid             = v_uids,
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                 ERROR_PROCESSING_STATUS     = '10',
                 FAILURE_REASON              = v_responsemsg
          -- customer_bvn = bvn,
          
          -- WHERE INVOICEID = v_invoiceid;
           WHERE BATCH_DETAIL_ID = v_batch_detail;
        END IF;
      
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;
  /*(FUNCTION updatenipfundtransferresponse(uids            IN VARCHAR2,
                                         responsecode    IN VARCHAR2,
                                         responsemessage IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(300);
    v_responsecode          VARCHAR2(100);
    v_recordid              VARCHAR2(100);
    v_sessionid             VARCHAR2(100);
    v_reversalamt           NUMBER(18, 2);
    v_responsemsg           VARCHAR2(400);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_batchid               VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_uids         := uids;
    v_responsecode := responsecode;
    v_responsemsg  := responsemessage;
    v_reversalamt  := 0.0;
    SELECT BATCH_DETAIL_ID, SESSIONID
      INTO v_recordid, v_sessionid
      FROM nip_fundtransfer
     WHERE uids = v_uids;
  
    UPDATE nip_fundtransfer
       SET responsecode    = v_responsecode,
           responsemessage = v_responsemsg,
           responsetime    = SYSDATE
     WHERE uids = v_uids;
  
    --IF ((v_responsecode = '00') AND
     --  (v_responsemsg = 'Approved or completed successfully')) THEN
      IF (v_responsecode = '00') THEN 
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS     = '00',
             THIRDPARTY_SESSION_ID = v_sessionid,
             ERROR_TRIAL_COUNT     = 0,
             TRANSACTION_STATUS    = 'SUCCESSFUL',
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
             THIRDPARTY_guid             = v_uids
       WHERE BATCH_DETAIL_ID = v_recordid;
     
    ELSIF (v_responsecode = 'TO') THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS       = '14',
             ERROR_PROCESSING_STATUS = '14',
             THIRDPARTY_SESSION_ID   = v_sessionid,
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             ERROR_TRIAL_COUNT          =
             (ERROR_TRIAL_COUNT + 1),
             TRANSACTION_STATUS          = 'UNKNOWN',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
             THIRDPARTY_guid             = v_uids
       WHERE BATCH_DETAIL_ID = v_recordid;
    
     
    
    ELSE
      --Update RIA_INVOICES set PROCESSINGSTATUS='13',  NIBBS_FTRESPONSECODE=v_responsecode,NIBBS_FTRESPONSEXML=v_responsemsg,NIBBS_FTGUID=v_uids where INVOICEID=v_invoiceid;
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
    
      select ERROR_TRIAL_COUNT, BATCH_ID, (AMOUNT + CHARGE_AMOUNT)
        into v_trialcount, v_batchid, v_reversalamt
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = v_recordid;
      IF (v_trialcount < v_defaulttrialcount) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS     = '-04',
               THIRDPARTY_SESSION_ID = v_sessionid,
               ERROR_TRIAL_COUNT    =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME      =
               (sysdate + (1 / 1440 * v_defaulttrialintervals)),
               --riaresponsecode = '00',
               --riaresponsedesciption = 'PAID',
               THIRDPARTY_RESPONSE_CODE    = v_responsecode,
               THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
               THIRDPARTY_guid             = v_uids
         WHERE BATCH_DETAIL_ID = v_recordid;
      ELSE
      
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS       = '13',
               ERROR_TRIAL_COUNT       = 0,
               ERROR_PROCESSING_STATUS = '10',
               TRANSACTION_STATUS      = 'FAILED',
               THIRDPARTY_SESSION_ID   = v_sessionid,
               --riaresponsecode = '00',
               --riaresponsedesciption = 'PAID',
               THIRDPARTY_RESPONSE_CODE    = v_responsecode,
               THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
               THIRDPARTY_guid             = v_uids
         WHERE BATCH_DETAIL_ID = v_recordid;
      
       
      
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;*/

  FUNCTION updatenipnameenquiryresponse(uids            IN VARCHAR2,
                                        responsecode    IN VARCHAR2,
                                        responsemessage IN VARCHAR2,
                                        acctname        IN VARCHAR2,
                                        bvn             IN VARCHAR2,
                                        kyclevel        IN VARCHAR2,
                                        recordid        IN VARCHAR2,
                                        sessionids      IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                      VARCHAR2(200);
    v_responsecode              VARCHAR2(100);
    v_responsemessage           VARCHAR2(200);
    v_invoiceid                 VARCHAR2(200);
    v_sessionid                 VARCHAR2(200);
    v_batchid                   VARCHAR2(200);
    v_manual_settlement_advised VARCHAR2(10);
    v_trialcount                INTEGER;
    v_reversalamt               NUMBER(18, 2);
    v_postingoption             INTEGER;
    v_defaulttrialcount         INTEGER;
    v_defaulttrialintervals     INTEGER;
    v_initiate_reversal         INTEGER;
    v_retry                     INTEGER;
    v_processingstatus          VARCHAR2(100);
    v_transtatus                VARCHAR2(50);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_uids                      := uids;
    v_responsecode              := responsecode;
    v_responsemessage           := responsemessage;
    v_reversalamt               := 0.0;
    v_manual_settlement_advised := 'N';
    IF (v_responsecode = '00') THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS   = '03',
             NE_RESPONSE_CODE    = v_responsecode,
             ERROR_TRIAL_COUNT   = 0,
             NE_RESPONSE_MESSAGE = v_responsemessage,
             -- NIBBS_NESESSIONID = v_sessionid,
             NE_SESSION_ID = sessionids,
             NE_CUST_NAME  = acctname,
             NE_BVN_NO     = bvn,
             CUSTOMER_BVN  = bvn,
             NE_KYCLEVEL   = kyclevel
      --WHERE INVOICEID = v_invoiceid;
       WHERE BATCH_DETAIL_ID = recordid;
    ELSE
      select count(1)
        into v_retry
        from PAYMENTS.REF_RESPONSE_CODES
       where RESPONSE_CODE = v_responsecode
         AND RETRY = 'Y'
         and CHANNEL_CODE = 'NIP';
    
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      select ERROR_TRIAL_COUNT, BATCH_ID
        into v_trialcount, v_batchid
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = recordid;
    
      IF ((v_trialcount < v_defaulttrialcount) and v_retry > 0) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS   = '-02',
               ERROR_TRIAL_COUNT  =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME    =
               (sysdate + (1 / 1440 * v_defaulttrialintervals)),
               NE_RESPONSE_CODE    = v_responsecode,
               NE_RESPONSE_MESSAGE = v_responsemessage,
               -- NIBBS_NESESSIONID = v_sessionid,
               NE_SESSION_ID = sessionids,
               NE_CUST_NAME  = acctname,
               CUSTOMER_BVN  = bvn,
               -- customer_bvn = bvn,
               NE_KYCLEVEL = kyclevel
        -- WHERE INVOICEID = v_invoiceid;
         WHERE BATCH_DETAIL_ID = recordid;
      
      ELSE
        select POSTING_OPTION_ID
          into v_postingoption
          from TRANSACTION_BATCH_SUMMARY
         where BATCH_ID = v_batchid;
        IF (v_postingoption = 1) THEN
          v_processingstatus := '07';
          v_transtatus       := 'FAILED';
        ELSIF (v_postingoption = 2) THEN
          v_processingstatus := '07';
          v_transtatus       := 'FAILED';
          select count(1)
            into v_initiate_reversal
            from PAYMENTS.REF_RESPONSE_CODES
           where RESPONSE_CODE = v_responsecode
             AND REVERSE = 'N'
             and CHANNEL_CODE = 'NIP';
          IF (v_initiate_reversal > 0) THEN
            v_manual_settlement_advised := 'Y';
            v_transtatus                := 'UNKNOWN';
            v_processingstatus          := '14';
          END IF;
          --SELECT (AMOUNT + CHARGE_AMOUNT) INTO v_reversalamt FROM TRANSACTION_BATCH_DETAIL WHERE BATCH_DETAIL_ID=recordid;
        
        END IF;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS         = v_processingstatus,
               ERROR_TRIAL_COUNT         = 0,
               TRANSACTION_STATUS        = v_transtatus,
               MANUAL_SETTLEMENT_ADVISED = v_manual_settlement_advised,
               -- riaresponsecode = '05',
               -- riaresponsedesciption =
               --                     'NAME ENQUIRY FAILED AT DESTINATION BANK',
               NE_RESPONSE_CODE    = v_responsecode,
               NE_RESPONSE_MESSAGE = v_responsemessage,
               -- NIBBS_NESESSIONID = v_sessionid,
               NE_SESSION_ID           = sessionids,
               NE_CUST_NAME            = acctname,
               CUSTOMER_BVN            = bvn,
               ERROR_PROCESSING_STATUS = '09',
               FAILURE_REASON          = v_responsemessage,
               -- customer_bvn = bvn,
               NE_KYCLEVEL = kyclevel
        -- WHERE INVOICEID = v_invoiceid;
         WHERE BATCH_DETAIL_ID = recordid;
      
        /*  Select BATCH_ID
          into v_batchid
          from TRANSACTION_BATCH_DETAIL
         where BATCH_DETAIL_ID = recordid;
        update TRANSACTION_BATCH_SUMMARY
           set FAILURE_COUNT =
               (FAILURE_COUNT + 1),PROCESSED_RECORD_COUNT=(PROCESSED_RECORD_COUNT+1),EXPECTED_REVERSAL_AMOUNT=(EXPECTED_REVERSAL_AMOUNT+v_reversalamt) 
         where BATCH_ID = v_batchid;*/
      
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  /* FUNCTION updatenipnameenquiryresponse(uids            IN VARCHAR2,
                                        responsecode    IN VARCHAR2,
                                        responsemessage IN VARCHAR2,
                                        acctname        IN VARCHAR2,
                                        bvn             IN VARCHAR2,
                                        kyclevel        IN VARCHAR2,
                                        recordid        IN VARCHAR2,
                                        sessionids      IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(200);
    v_responsecode          VARCHAR2(100);
    v_responsemessage       VARCHAR2(200);
    v_invoiceid             VARCHAR2(200);
    v_sessionid             VARCHAR2(200);
    v_batchid               VARCHAR2(200);
    v_trialcount            INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_processingstatus      VARCHAR2(100);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_uids            := uids;
    v_responsecode    := responsecode;
    v_responsemessage := responsemessage;
    v_reversalamt     := 0.0;
    IF (v_responsecode = '00') THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS   = '03',
             NE_RESPONSE_CODE    = v_responsecode,
             ERROR_TRIAL_COUNT   = 0,
             NE_RESPONSE_MESSAGE = v_responsemessage,
             -- NIBBS_NESESSIONID = v_sessionid,
             NE_SESSION_ID = sessionids,
             NE_CUST_NAME  = acctname,
             NE_BVN_NO     = bvn,
             CUSTOMER_BVN  = bvn,
             NE_KYCLEVEL   = kyclevel
      --WHERE INVOICEID = v_invoiceid;
       WHERE BATCH_DETAIL_ID = recordid;
    ELSE
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      select ERROR_TRIAL_COUNT, BATCH_ID
        into v_trialcount, v_batchid
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = recordid;
    
      IF (v_trialcount < v_defaulttrialcount) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS   = '-02',
               ERROR_TRIAL_COUNT  =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME    =
               (sysdate + (1 / 1440 * v_defaulttrialintervals)),
               NE_RESPONSE_CODE    = v_responsecode,
               NE_RESPONSE_MESSAGE = v_responsemessage,
               -- NIBBS_NESESSIONID = v_sessionid,
               NE_SESSION_ID = sessionids,
               NE_CUST_NAME  = acctname,
               CUSTOMER_BVN  = bvn,
               -- customer_bvn = bvn,
               NE_KYCLEVEL = kyclevel
        -- WHERE INVOICEID = v_invoiceid;
         WHERE BATCH_DETAIL_ID = recordid;
      
      ELSE
        select POSTING_OPTION_ID
          into v_postingoption
          from TRANSACTION_BATCH_SUMMARY
         where BATCH_ID = v_batchid;
        IF (v_postingoption = 1) THEN
          v_processingstatus := '07';
        ELSIF (v_postingoption = 2) THEN
          v_processingstatus := '07';
          --SELECT (AMOUNT + CHARGE_AMOUNT) INTO v_reversalamt FROM TRANSACTION_BATCH_DETAIL WHERE BATCH_DETAIL_ID=recordid;
        
        END IF;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS  = v_processingstatus,
               ERROR_TRIAL_COUNT  = 0,
               TRANSACTION_STATUS = 'FAILED',
               -- riaresponsecode = '05',
               -- riaresponsedesciption =
               --                     'NAME ENQUIRY FAILED AT DESTINATION BANK',
               NE_RESPONSE_CODE    = v_responsecode,
               NE_RESPONSE_MESSAGE = v_responsemessage,
               -- NIBBS_NESESSIONID = v_sessionid,
               NE_SESSION_ID           = sessionids,
               NE_CUST_NAME            = acctname,
               CUSTOMER_BVN            = bvn,
               ERROR_PROCESSING_STATUS = '09',
               -- customer_bvn = bvn,
               NE_KYCLEVEL = kyclevel
        -- WHERE INVOICEID = v_invoiceid;
         WHERE BATCH_DETAIL_ID = recordid;
      
       
      
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;*/

  FUNCTION updateaccountvalidation(recordid    IN VARCHAR2,
                                   customerid  IN VARCHAR2,
                                   bvn         IN VARCHAR2,
                                   isvalidacct IN VARCHAR2,
                                   branchcode  IN VARCHAR2,
                                   currcode    IN VARCHAR2,
                                   acctname    IN VARCHAR2) RETURN VARCHAR2 IS
    v_batchid               VARCHAR2(200);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
  BEGIN
    SET TRANSACTION READ WRITE;
    v_reversalamt := 0.0;
    --select * from RIA_INVOICES
    IF (isvalidacct = 'Y') THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET flexcubecustomerid           = customerid,
             customer_bvn                 = bvn,
             flexcubeaccountvalidationflg = 'Y',
             PROCESSING_STATUS            = '03',
             ERROR_TRIAL_COUNT            = 0,
             CR_ACCOUNT_BRANCH_CODE       = branchcode,
             CR_ACCOUNT_CURRENCY_CODE     = currcode,
             BENEFICIARY_NAME             = acctname
       WHERE BATCH_DETAIL_ID = recordid;
    END IF;
  
    IF (isvalidacct = 'N') THEN
      --update  RIA_INVOICES set FLEXCUBECUSTOMERID=CustomerID,CUSTOMER_BVN=BVN,FLEXCUBEACCOUNTVALIDATIONFLG='Y' where INVOICEID=RecordId;
      -- UPDATE RIA_INVOICES SET FLEXCUBEACCOUNTVALIDATIONFLG='F',PROCESSINGSTATUS='05',RIARESPONSECODE='01',RIARESPONSEDESCIPTION='INVALID ACCOUNT NUMBER' where INVOICEID=RecordId;
      Select BATCH_ID, ERROR_TRIAL_COUNT
        into v_batchid, v_trialcount
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = recordid;
    
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      IF (v_trialcount < v_defaulttrialcount) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS = '-01',
               ERROR_TRIAL_COUNT =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME  =
               (sysdate + (1 / 1440 * v_defaulttrialintervals))
         WHERE BATCH_DETAIL_ID = recordid;
      
      ELSE
        select POSTING_OPTION_ID
          into v_postingoption
          from TRANSACTION_BATCH_SUMMARY
         where BATCH_ID = v_batchid;
      
        IF (v_postingoption = 1) THEN
          v_processingstatus := '07';
        ELSIF (v_postingoption = 2) THEN
          v_processingstatus := '07';
          -- SELECT (AMOUNT + CHARGE_AMOUNT) INTO v_reversalamt FROM TRANSACTION_BATCH_DETAIL WHERE BATCH_DETAIL_ID=recordid;
        
        END IF;
        UPDATE TRANSACTION_BATCH_DETAIL
           SET flexcubeaccountvalidationflg = 'F',
               ERROR_PROCESSING_STATUS      = '15',
               TRANSACTION_STATUS           = 'FAILED',
               ERROR_TRIAL_COUNT            = 0,
               PROCESSING_STATUS            = v_processingstatus,
               FAILURE_REASON               = 'Invalid Account Number'
         WHERE BATCH_DETAIL_ID = recordid;
      
        /*update TRANSACTION_BATCH_SUMMARY
          set FAILURE_COUNT =
              (FAILURE_COUNT + 1),PROCESSED_RECORD_COUNT=(PROCESSED_RECORD_COUNT +1),EXPECTED_REVERSAL_AMOUNT=(EXPECTED_REVERSAL_AMOUNT+v_reversalamt)
        where BATCH_ID = v_batchid;*/
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION selectpendingtransitreversal(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    v_failurecount NUMBER;
    v_totalcharge  NUMBER;
    v_totaltranamt NUMBER;
    v_pendingcount NUMBER;
    v_guid         VARCHAR2(200);
    o_refcursor    sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
  
    /*FOR item IN (SELECT *
                   FROM TRANSACTION_BATCH_SUMMARY
                  WHERE POSTING_OPTION_ID = 2
                    and (TRANSIT_REVERSALFLG = 'N' or (TRANSIT_REVERSALFLG='RETRY' AND NEXT_TRIAL_TIME<=sysdate))
                    AND FAILURE_COUNT > 0 and NO_OF_RECORD=PROCESSED_RECORD_COUNT
                    and THREAD_ID = p_THREAD_id) LOOP
      BEGIN
      SELECT sys_guid() INTO v_guid FROM DUAL;
        --  SELECT COUNT(1) INTO v_failurecount FROM TRANSACTION_BATCH_DETAIL WHERE PROCESSING_STATUS IN('13','15','09') AND BATCH_ID=item.BATCH_ID;
        SELECT COUNT(1)
          INTO v_pendingcount
          FROM TRANSACTION_BATCH_DETAIL
         WHERE PROCESSING_STATUS IN ('01', '02', '03', '04')
           AND BATCH_ID = item.BATCH_ID;
      
        IF (v_pendingcount = 0) THEN
          SELECT COUNT(1)
            INTO v_failurecount
            FROM TRANSACTION_BATCH_DETAIL
           WHERE PROCESSING_STATUS IN ('16','12','07','08','09','10','13','15')
             AND BATCH_ID = item.BATCH_ID;
          IF (v_failurecount > 0) THEN
          
            SELECT sum(AMOUNT), sum(CHARGE_AMOUNT)
              INTO v_totaltranamt, v_totalcharge
              FROM TRANSACTION_BATCH_DETAIL
             WHERE PROCESSING_STATUS IN ('16','12','07','08','09','10','13','15')
               AND BATCH_ID = item.BATCH_ID;
            INSERT INTO TRANSACTION_BATCH_SUMMARY_TEMP
              (BATCH_REF, 
               DR_ACCOUNT,
               DR_ACCOUNT_BRANCH_CODE,
               TRANSIT_POSTREF,
               LAST_MODIFIED_BY,
               TRANSIT_POST_DATE,
               CREATED_DATE,
               HOLDING_ACCT_TYPE,
               TRANSIT_REVERSAL_POSTREF,
               THREAD_ID,
               CUMULATIVE_AMOUNT,
               BATCH_ID,
               APPROVED_DATE,
               POSTING_OPTION_ID,
               DR_ACCOUNT_CURRENCY_CODE,
               TRANSIT_REVERSAL_TRAN_AMT,
               HOLDING_ACCT_NO,
               TRANSIT_POSTFLG,
               TRANSIT_REVERSAL_GUID,
               NO_OF_RECORD,
               FAILURE_COUNT,
               TRANSIT_POST_GUID,
               FLEXCUBERESPONSECODE,
               APPROVED_BY,
               HOLDING_ACCT_CURRENCY_CODE,
               CREATED_BY,
               FLEXCUBERESPONSEDESCRIPTION,
               TOTAL_CHARGE_AMT,
               HOLDING_ACCT_BRANCH_CODE,
               TRANSIT_REVERSAL_CHARGE_AMT,
               TRANSIT_REVERSAL_DATE,
               RECORD_STATUS_ID,
               CORP_ID,
               LAST_MODIFIED_DATE,
               APPROVAL_STATUS_ID,
               SCHEDULE_SUMMARY_ID,
               SCHEDULE_DATE,
               TRANSIT_REVERSALFLG,
               CHARGE_OPTION_ID,
               TOTAL_TRAN_AMOUNT,
               PAYMENT_TYPE_ID)
            
              SELECT v_guid,
                     DR_ACCOUNT,
                     DR_ACCOUNT_BRANCH_CODE,
                     TRANSIT_POSTREF,
                     LAST_MODIFIED_BY,
                     TRANSIT_POST_DATE,
                     CREATED_DATE,
                     HOLDING_ACCT_TYPE,
                     TRANSIT_REVERSAL_POSTREF,
                     THREAD_ID,
                     CUMULATIVE_AMOUNT,
                     BATCH_ID,
                     APPROVED_DATE,
                     POSTING_OPTION_ID,
                     DR_ACCOUNT_CURRENCY_CODE,
                     TRANSIT_REVERSAL_TRAN_AMT,
                     HOLDING_ACCT_NO,
                     TRANSIT_POSTFLG,
                     TRANSIT_REVERSAL_GUID,
                     NO_OF_RECORD,
                     FAILURE_COUNT,
                     TRANSIT_POST_GUID,
                     FLEXCUBERESPONSECODE,
                     APPROVED_BY,
                     HOLDING_ACCT_CURRENCY_CODE,
                     CREATED_BY,
                     FLEXCUBERESPONSEDESCRIPTION,
                     v_totalcharge,
                     HOLDING_ACCT_BRANCH_CODE,
                     TRANSIT_REVERSAL_CHARGE_AMT,
                     TRANSIT_REVERSAL_DATE,
                     RECORD_STATUS_ID,
                     CORP_ID,
                     LAST_MODIFIED_DATE,
                     APPROVAL_STATUS_ID,
                     SCHEDULE_SUMMARY_ID,
                     SCHEDULE_DATE,
                     TRANSIT_REVERSALFLG,
                     CHARGE_OPTION_ID,
                     v_totaltranamt,
                     PAYMENT_TYPE_ID
                from TRANSACTION_BATCH_SUMMARY
               where BATCH_ID = item.BATCH_ID;
          END IF;
        END IF;
      END;
    END LOOP;*/
    OPEN o_refcursor FOR
    /*SELECT *
                                                                                                                                            FROM TRANSACTION_BATCH_SUMMARY_TEMP
                                                                                                                                           WHERE BATCH_REF = v_guid;*/
      SELECT BATCH_ID                      as BATCH_REF,
             DR_ACCOUNT,
             DR_ACCOUNT_BRANCH_CODE,
             TRANSIT_POSTREF,
             a.LAST_MODIFIED_BY,
             TRANSIT_POST_DATE,
             a.CREATED_DATE,
             HOLDING_ACCT_TYPE,
             TRANSIT_REVERSAL_POSTREF,
             THREAD_ID,
             CUMULATIVE_AMOUNT,
             BATCH_ID,
             a.APPROVED_DATE,
             a.POSTING_OPTION_ID,
             DR_ACCOUNT_CURRENCY_CODE,
             TRANSIT_REVERSAL_TRAN_AMT,
             HOLDING_ACCT_NO,
             TRANSIT_POSTFLG,
             TRANSIT_REVERSAL_GUID,
             NO_OF_RECORD,
             FAILURE_COUNT,
             TRANSIT_POST_GUID,
             FLEXCUBERESPONSECODE,
             a.APPROVED_BY,
             HOLDING_ACCT_CURRENCY_CODE,
             a.CREATED_BY,
             FLEXCUBERESPONSEDESCRIPTION,
             EXPECTED_TRANSIT_REVERSAL_FEE as TOTAL_CHARGE_AMT,
             HOLDING_ACCT_BRANCH_CODE,
             TRANSIT_REVERSAL_CHARGE_AMT,
             TRANSIT_REVERSAL_DATE,
             a.RECORD_STATUS_ID,
             a.CORP_ID,
             a.LAST_MODIFIED_DATE,
             a.APPROVAL_STATUS_ID,
             a.PAYMENT_CHANNEL_ID,
             SCHEDULE_SUMMARY_ID,
             SCHEDULE_DATE,
             TRANSIT_REVERSALFLG,
             CHARGE_OPTION_ID,
             EXPECTED_TRANSIT_REVERSAL_AMT as TOTAL_TRAN_AMOUNT,
             PAYMENT_TYPE_ID,
             BATCH_DESCRIPTION,
             b.narration_option_id
        FROM TRANSACTION_BATCH_SUMMARY a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and a.POSTING_OPTION_ID = 2
         and (TRANSIT_REVERSALFLG = 'N' or
             (TRANSIT_REVERSALFLG = 'RETRY' AND NEXT_TRIAL_TIME <= sysdate))
         AND FAILURE_COUNT > 0
         and NO_OF_RECORD = PROCESSED_RECORD_COUNT
         and THREAD_ID = p_THREAD_id;
  
    RETURN o_refcursor;
  END;

  FUNCTION selectpendingpostingreversal(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
       WHERE a.THREAD_ID = p_THREAD_id
            -- AND a.PROCESSING_STATUS in( '13','12');
         AND (a.PROCESSING_STATUS = '13' or
             (a.PROCESSING_STATUS = '-13' and a.NEXT_TRIAL_TIME <= sysdate));
  
    RETURN o_refcursor;
  END;

  FUNCTION selectpendingquicktellertxn(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
       WHERE a.THREAD_ID = p_THREAD_id
         AND a.SCHEDULE_DATE <= sysdate
         AND (a.PROCESSING_STATUS = '05' or
             (a.PROCESSING_STATUS = '-05' and a.NEXT_TRIAL_TIME <= sysdate))
            
         AND a.ISINTERBANK_TRANSFER = 'Y';
  
    RETURN o_refcursor;
  END;

  FUNCTION selectpendinginterbankft(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.CHARGE_AMOUNT,
             a.NAME_VALIDATION_MATCH_STATUS,
             a.CREATED_DATE,
             a.MOBILE_NUMBER,
             a.IS_SUMMARY_TABLE_UPDATED,
             a.POSTED_DATE,
             a.NE_DATE,
             a.BATCH_DETAIL_ID,
             a.THREAD_ID,
             a.ERROR_PROCESSING_STATUS,
             a.FLEXCUBECUSTOMERID,
             a.REVERSAL_REF_NO,
             a.AMOUNT,
             a.BENEFICIARY_NAME,
             a.CUSTOM_RECEIPT_URL,
             a.REVERSAL_DATE,
             a.BILLER_NAME,
             a.CR_ACCOUNT_NO,
             a.APPROVED_BY,
             a.BENEFICIARY_EMAIL,
             --DR_ACCOUNT_NO ,
             a.CREATED_BY,
             a.ERROR_TRIAL_COUNT,
             a.FLEXCUBETRANID,
             a.MANUAL_SETTLEMENT_ADVISED,
             a.NE_SESSION_ID,
             a.LAST_MODIFIED_DATE,
             a.CR_ACCOUNT_CURRENCY_CODE,
             a.SCHEDULE_DATE,
             a.BILLER_CUSTOM_FIELD_VALUE,
             a.THIRDPARTY_RESPONSE_DATE,
             a.PROCESSING_STATUS,
             a.REJECTED_DATE,
             a.REJECTED_BY,
             a.ISPOSTING_REVERSED,
             a.CUSTOM_RECEIPT_GENERATED,
             a.PAYMENT_TYPE_ID,
             a.ISINTERBANK_TRANSFER,
             a.POSTINGUIDS,
             a.POSTING_LOCK_COUNT,
             a.RESPONSE_CODE,
             a.BILLER_CATEGORY,
             a.THIRDPARTY_RESPONSE_MESSAGE,
             a.LAST_MODIFIED_BY,
             a.CUSTOMER_BVN,
             a.REVERSALPOSTINGUIDS,
             a.BATCH_ID,
             a.APPROVED_DATE,
             a.TRANSACTION_STATUS,
             a.REVERSAL_RESPONSE_MESSAGE,
             a.NEXT_TRIAL_TIME,
             a.FLEXCUBEACCOUNTVALIDATIONFLG,
             a.NE_BVN_NO,
             a.BILLER_RECHARGE_PIN,
             a.CR_ACCOUNT_BRANCH_CODE,
             a.BANK_CODE,
             a.BENEFICIARY_ID,
             a.FLEXCUBERESPONSECODE,
             a.NE_CUST_NAME,
             a.ISFT_SUCCESSFUL,
             a.FLEXCUBERESPONSEDESCRIPTION,
             a.THIRDPARTY_RESPONSE_CODE,
             a.RECORD_STATUS_ID,
             a.CORP_ID,
             a.POSTEDFLG,
             a.APPROVAL_STATUS_ID,
             a.PAYMENT_CHANNEL_ID,
             a.ISNE_SUCCESSFUL,
             a.NE_RESPONSE_CODE,
             a.NARRATION,
             a.NE_KYCLEVEL,
             a.POST_REF_NO,
             a.THIRDPARTY_GUID,
             a.NE_RESPONSE_MESSAGE,
             a.THIRDPARTY_SESSION_ID,
             a.REVERSAL_RESPONSE_CODE,
             a.BILLER_PRODUCT_TYPE,
             a.BANK_NAME,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT as DR_ACCOUNT_NO,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join corporate_profile k
          on b.corp_id = k.corp_id
       WHERE a.THREAD_ID = p_THREAD_id
         and a.PAYMENT_CHANNEL_ID = 1 --NIP
         AND (a.PROCESSING_STATUS = '04' or
             (a.PROCESSING_STATUS = '-04' and a.NEXT_TRIAL_TIME <= sysdate))
            
         AND a.ISINTERBANK_TRANSFER = 'Y';
  
    RETURN o_refcursor;
  END;

  FUNCTION selectpendingaccountvalidation(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.NARRATION_OPTION_ID
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
       WHERE a.THREAD_ID = p_THREAD_id
         AND a.SCHEDULE_DATE <= sysdate
         AND (a.PROCESSING_STATUS = '01' or
             (a.PROCESSING_STATUS = '-01' and a.NEXT_TRIAL_TIME <= sysdate));
  
    RETURN o_refcursor;
  END;
  FUNCTION selectpendinginterbanknenquiry(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
       WHERE ISINTERBANK_TRANSFER = 'Y'
         AND a.THREAD_ID = p_THREAD_id
         AND a.SCHEDULE_DATE <= sysdate
         AND (a.PROCESSING_STATUS = '02' or
             (a.PROCESSING_STATUS = '-02' and a.NEXT_TRIAL_TIME <= sysdate));
  
    -- AND a.PROCESSING_STATUS = '02'; --processingstatus = '02' AND isinterbanktransfer = 'Y';
  
    RETURN o_refcursor;
  END;

  FUNCTION selectpendingtransitentries(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
    
      Select a.*, b.NARRATION_OPTION_ID
        from TRANSACTION_BATCH_SUMMARY a
        join CORPORATE_PROFILE b
          on b.corp_id = a.corp_id
       where a.APPROVAL_STATUS_ID = 2
         AND SCHEDULE_DATE <= sysdate
         and (TRANSIT_POSTFLG = 'N' or
             (TRANSIT_POSTFLG = 'RETRY' and NEXT_TRIAL_TIME <= sysdate))
         AND a.POSTING_OPTION_ID = 2
         and PROCESSING_STATUS = '22'
         AND THREAD_ID = p_THREAD_id;
  
    RETURN o_refcursor;
  END;

  FUNCTION selectpendingposting(p_THREAD_id IN VARCHAR2) RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             '' as CHANNEL_CODE,
             c.NARRATION_OPTION_ID
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
      
          on b.BATCH_ID = a.BATCH_ID
        join CORPORATE_PROFILE c
          on c.corp_id = a.corp_id
      -- join REF_PAYMENT_CHANNELS c on c.CHANNEL_ID=a.PAYMENT_CHANNEL_ID
      --  WHERE (postedflg = 'N' or (postedflg = 'RETRY' and a.NEXT_TRIAL_TIME<=sysdate))
       WHERE postedflg = 'N'
         AND a.SCHEDULE_DATE <= sysdate
            
         AND (a.PROCESSING_STATUS = '03' or
             (a.PROCESSING_STATUS = '-03' and a.NEXT_TRIAL_TIME <= sysdate))
         AND ISINTERBANK_TRANSFER = 'N'
         AND a.THREAD_ID = p_THREAD_id
      UNION ALL
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             c.NARRATION_OPTION_ID
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.BATCH_ID = a.BATCH_ID
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join CORPORATE_PROFILE c
          on c.corp_id = a.corp_id
       WHERE postedflg = 'N'
            --AND a.PROCESSING_STATUS IN ('01', '03')
         AND (a.PROCESSING_STATUS = '03' or
             (a.PROCESSING_STATUS = '-03' and a.NEXT_TRIAL_TIME <= sysdate))
         AND ISINTERBANK_TRANSFER = 'Y'
         AND NE_RESPONSE_CODE in ('00', 'N/A')
         AND a.THREAD_ID = p_THREAD_id;
  
    RETURN o_refcursor;
  END;
  FUNCTION getPaymentTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select * from REF_PAYMENT_TYPES where del_flg = 'N';
  
    RETURN c_refcursor;
  END getPaymentTypes;

  function getRecordStatusId(i_requestTypeId integer) return integer is
    v_record_status_id int;
  begin
  
    return case i_requestTypeId when 1 then 1 when 2 then 2 when 3 then 3 when 4 then 2 when 5 then 4 when 11 then 2 when 12 then 2 when 13 then 3 when 14 then 2 when 15 then 4 end;
  
  end;

  function getApprovalStatusId(i_requestTypeId integer) return integer is
  
  begin
  
    return case i_requestTypeId when 1 then 1 when 2 then 4 when 3 then 4 when 4 then 4 when 5 then 4 when 11 then 2 when 12 then 2 when 13 then 2 when 14 then 2 when 15 then 4 end;
  
  end getApprovalStatusId;

  function addTransactionBatchDetails(p_BATCH_ID             IN VARCHAR2,
                                      p_AMOUNT               IN VARCHAR2,
                                      p_CR_ACCOUNT_NO        IN VARCHAR2,
                                      p_BENEFICIARY_ID       IN VARCHAR2,
                                      p_BANK_CODE            IN VARCHAR2,
                                      p_DR_ACCOUNT_NO        IN VARCHAR2,
                                      p_CREATED_BY           IN VARCHAR2,
                                      p_SCHEDULE_DATE        IN VARCHAR2,
                                      p_NARRATION            IN VARCHAR2,
                                      p_PAYMENT_TYPE_ID      IN VARCHAR2,
                                      p_BANK_NAME            IN VARCHAR2,
                                      p_CORP_ID              IN VARCHAR2,
                                      p_PAYMENT_CHANNEL_ID   IN VARCHAR2,
                                      p_MOBILE_NETWORK_ID    IN VARCHAR2,
                                      p_MOBILE_NUMBER        IN VARCHAR2,
                                      p_BILLER_CATEGORY      IN VARCHAR2,
                                      p_BENEFICIARY_EMAIL    IN VARCHAR2,
                                      p_BILLER_NAME          IN VARCHAR2,
                                      p_CHARGE_AMOUNT        IN VARCHAR2,
                                      p_beneficiary_name     varchar2, --#sprint2
                                      p_uploadbatchid        varchar2, --correct
                                      p_nameenquiry_name     varchar2, --correct
                                      p_bvn                  varchar2,
                                      p_sessioid             varchar2,
                                      p_kyclevel             varchar2,
                                      p_namevalidationstatus varchar2)
    return varchar2 IS
  
    v_err_message         VARCHAR2(3000);
    v_response_code       varchar2(300);
    v_isinterbanktransfer VARCHAR2(100);
    v_paymentcode         VARCHAR2(100);
    --v_feeAmt  VARCHAR2(100);
    v_suspense_account VARCHAR2(100);
    v_fee              VARCHAR2(100);
    v_incomeaccount    VARCHAR2(100);
    v_bank_code        VARCHAR2(100);
    v_neresponsecode   VARCHAR2(100);
    v_feereturnval     VARCHAR2(100);
    v_maintableid      NUMBER;
    v_chargeamt        NUMBER;
    v_tranamt          NUMBER;
    v_reqid            NUMBER;
    v_approvalstatus   VARCHAR2(2);
    v_found_flag       int := 0;
    v_cr_acct          VARCHAR2(100);
  
    v_neftnapsfeeExist NUMBER;
    v_sortCodeExist    NUMBER;
    v_neftnapscharge   NUMBER;
  BEGIN
    v_isinterbanktransfer := 'N';
    v_neresponsecode      := '99';
    v_bank_code           := p_BANK_CODE;
    v_cr_acct             := p_CR_ACCOUNT_NO;
  
    begin
      if (to_number(NVL(p_CHARGE_AMOUNT, '0')) < 0) then
        v_response_code := 'INVALID FEE FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
      
      end if;
    EXCEPTION
      WHEN VALUE_ERROR THEN
        --v_response_code := '16';
        v_response_code := 'INVALID FEE FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
    end;
  
    -- p_CHARGE_AMOUNT := NVL( p_CHARGE_AMOUNT, '0' );
    --- amount validation
    begin
      if (to_number(p_AMOUNT) <= 0) then
        v_response_code := 'INVALID AMOUNT FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
      
      end if;
    EXCEPTION
      WHEN VALUE_ERROR THEN
        --v_response_code := '16';
        v_response_code := 'INVALID AMOUNT FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
    end;
  
    v_chargeamt := NVL(p_CHARGE_AMOUNT, '0');
    --insert into IDVALID values(p_PAYMENT_CHANNEL_ID,p_PAYMENT_CHANNEL_ID);
    IF ((p_PAYMENT_CHANNEL_ID in ('2', '3'))) then
      --neft/naps
    
      select count(1)
        into v_neftnapsfeeExist
        from apps.ONEFT_COMMISSION_SETUP
       where p_AMOUNT >= MIN_AMOUNT
         and p_AMOUNT <= MAX_AMOUNT;
      if (v_neftnapsfeeExist > 0) then
        select COMMISSION
          into v_neftnapscharge
          from apps.ONEFT_COMMISSION_SETUP
         where p_AMOUNT >= MIN_AMOUNT
           and p_AMOUNT <= MAX_AMOUNT;
        v_chargeamt := v_chargeamt + v_neftnapscharge;
      else
        v_response_code := 'Amount out of range for Neft/Naps fee';
        return v_response_code;
      end if;
    end if;
  
    IF ((p_PAYMENT_CHANNEL_ID in ('5'))) THEN
      --RTGS
      SELECT COUNT(1)
        INTO v_sortCodeExist
        --from RTSXMT101.MT_SWIFT_SORTCODES
--       where nibbscode = p_BANK_CODE;
  from newibank.RIB_BANKS_LIST
       where NIBSSCODE = p_BANK_CODE and SWIFT_CODE is not null and SWIFT_BIC_NUBAN is not null;
      if (v_sortCodeExist = 0) then
        v_response_code := 'Destination Bank for account ' ||
                           p_DR_ACCOUNT_NO ||
                           ' not configured for Swift Messages(RTGS). Please use another channel and try again';
        return v_response_code;
      end if;
    end if;
    IF ((p_PAYMENT_CHANNEL_ID in ('1', '4', '5')) and
       (p_BANK_CODE not in ('032', '000018'))) THEN
      --UIP,QUICKTELLER ,REMITTA
      select CHANNEL_CODE
        into v_paymentcode
        from REF_PAYMENT_CHANNELS
       where CHANNEL_ID = p_PAYMENT_CHANNEL_ID;
    
      v_feereturnval := PAYMENTS.mdw_ibank_posting_pkg.get_fee_and_susp_nib(v_paymentcode,
                                                                            p_AMOUNT,
                                                                            v_suspense_account,
                                                                            v_fee,
                                                                            
                                                                            v_incomeaccount);
    
      IF (p_PAYMENT_CHANNEL_ID in ('1')) THEN
        v_chargeamt := v_chargeamt + v_fee;
      END IF;
    
      -- v_chargeamt    := v_chargeamt + v_fee;
    END IF;
    --- series of validation should go in here
    if (p_BANK_CODE is null or trim(p_BANK_CODE) = '' or
       length(p_bank_code) not in (3, 6)) then
      --v_response_code := '16';
      v_response_code := 'INVALID BANK CODE FOR CR ACCOUNT ' ||
                         p_CR_ACCOUNT_NO;
      -- o_response_message:='Invalid Bank Code';
      return v_response_code;
    else
    
      IF (p_BANK_CODE not in ('032', '000018')) THEN
        v_isinterbanktransfer := 'Y';
      END IF;
    
      -- if(length(p_bank_code) in(3)) then
      if ((length(p_bank_code) in (3)) and (p_bank_code not in ('N/A'))) then
        --corretion
        select NIBSSCODE
          into v_bank_code
          from newibank.RIB_BANKS_LIST
        
         WHERE DEL_FLG = 'N'
           and BNK_CODE = p_bank_code;
      end if;
      /* if (v_isinterbanktransfer = 'N') then
        v_response_code := validateAccount(p_CR_ACCOUNT_NO);
        if (v_response_code <> '00') then
          return v_response_code;
        end if
      else*/
      if p_CR_ACCOUNT_NO = null or p_CR_ACCOUNT_NO = '' --or length(p_CR_ACCOUNT_NO) <> 10 
       then
        --v_response_code := '07';
        v_response_code := 'INVALID CR ACCOUNT / CUSTOM FIELD ';
        return v_response_code;
      end if;
      -- end if;
    
    end if;
    --- validation ends here
    if ((v_neresponsecode is not null) and length(v_neresponsecode) > 1) then
      v_neresponsecode := '00';
    end if;
    if (p_PAYMENT_TYPE_ID = '7') then
      --FIRS
    
      SELECT suspense_account
        INTO v_cr_acct
        FROM payments.mdw_fee_log
       WHERE (payment_type = 'FIRS')
         AND (del_flg = 'N');
    
    END IF;
    --THREAD_ID_SEQ
    -- begin
    INSERT INTO TRANSACTION_BATCH_DETAIL
      (CREATED_DATE,
       THREAD_ID,
       BATCH_ID,
       AMOUNT,
       CR_ACCOUNT_NO,
       BENEFICIARY_ID,
       BANK_CODE,
       DR_ACCOUNT_NO,
       CREATED_BY,
       SCHEDULE_DATE,
       NARRATION,
       PROCESSING_STATUS,
       APPROVAL_STATUS_ID,
       PAYMENT_TYPE_ID,
       BANK_NAME,
       ISINTERBANK_TRANSFER,
       CORP_ID,
       PAYMENT_CHANNEL_ID,
       biller_product_type,
       MOBILE_NUMBER,
       BILLER_CATEGORY,
       BENEFICIARY_EMAIL,
       BILLER_NAME,
       BILLER_CUSTOM_FIELD_VALUE,
       CHARGE_AMOUNT,
       beneficiary_name,
       NE_BVN_NO,
       NE_CUST_NAME,
       NE_RESPONSE_CODE,
       NE_SESSION_ID,
       NE_KYCLEVEL,
       NAME_VALIDATION_MATCH_STATUS
       
       )
    VALUES
      (SYSDATE,
       THREAD_ID_SEQ.NEXTVAL,
       p_BATCH_ID,
       p_AMOUNT,
       v_cr_acct,
       p_BENEFICIARY_ID,
       v_bank_code,
       p_DR_ACCOUNT_NO,
       p_CREATED_BY,
       TO_DATE(p_SCHEDULE_DATE, 'DD-MM-YYYY'),
       p_NARRATION,
       21,
       1,
       p_PAYMENT_TYPE_ID,
       p_BANK_NAME,
       v_isinterbanktransfer,
       p_CORP_ID,
       p_PAYMENT_CHANNEL_ID,
       p_MOBILE_NETWORK_ID,
       p_MOBILE_NUMBER,
       p_BILLER_CATEGORY,
       p_BENEFICIARY_EMAIL,
       p_BILLER_NAME,
       p_CR_ACCOUNT_NO,
       v_chargeamt,
       p_beneficiary_name,
       p_bvn,
       p_nameenquiry_name,
       v_neresponsecode,
       p_sessioid,
       p_kyclevel,
       p_namevalidationstatus);
  
    if ((p_uploadbatchid is not null) and length(p_uploadbatchid) > 2) then
      --CORRECT
      update TRANSACTION_UPLOAD_DETAIL
         set TRANSACTION_INITIATED = 'Y',
             LAST_MODIFIED_BY      = p_CREATED_BY,
             LAST_MODIFIED_DATE    = SYSDATE
       WHERE BATCH_DETAIL_ID = p_uploadbatchid;
    
    end if;
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.TRANSACTION_BATCH_DETAIL');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  FUNCTION addTransactionBatchSummary(p_DR_ACCOUNT         IN VARCHAR2,
                                      p_CREATED_BY         IN VARCHAR2,
                                      p_CORP_ID            IN VARCHAR2,
                                      p_BATCH_ID           IN VARCHAR2,
                                      p_SCHEDULE_DATE      IN VARCHAR2,
                                      p_NO_OF_RECORD       IN VARCHAR2,
                                      p_TOTAL_AMOUNT       IN VARCHAR2,
                                      p_PAYMENT_TYPE_ID    IN VARCHAR2,
                                      p_MENU_ID            IN VARCHAR2,
                                      p_CHARGE_OPTION_ID   IN VARCHAR2,
                                      p_BATCH_DESCRIPTION  IN VARCHAR2,
                                      p_POSTING_OPTIONID   IN VARCHAR2,
                                      p_payment_channel_id varchar2,
                                      
                                      p_upload_filename varchar2, --#sprint2
                                      p_auth_token_flag char,
                                      p_auth_token_sno  varchar2,
                                      p_context_url     varchar2,
                                      p_ip_mac_address  varchar2,
                                      p_session_id      varchar2)
    RETURN VARCHAR2 IS
    v_err_message             VARCHAR2(3000);
    v_response                VARCHAR2(100);
    v_recordstatus            VARCHAR2(2);
    v_maintableid             NUMBER;
    v_reqid                   NUMBER;
    v_approvalstatus          VARCHAR2(2);
    v_branchcode              VARCHAR2(10);
    v_holdingacctid           VARCHAR2(15);
    v_holdingacctno           VARCHAR2(15);
    v_holdingacctbranchcode   VARCHAR2(15);
    v_holdingacctcurrencycode VARCHAR2(15);
    v_holdingaccttype         VARCHAR2(15);
    v_postingoption           VARCHAR2(10);
    v_acctCurrency            VARCHAR2(10);
    v_transitpostref          VARCHAR2(200);
    v_batch_detail_id         varchar2(300);
  
    v_taxtype VARCHAR2(200);
    --TRANSIT_POSTREF
    v_chargeapply               VARCHAR2(2);
    v_validatetoken             NUMBER;
    v_istokenused               VARCHAR2(20);
    v_collection                VARCHAR2(200);
    v_chargeamt                 NUMBER;
    v_totalchargeamt            NUMBER;
    v_chargediscountexist       NUMBER;
    v_chargediscountpercent     NUMBER;
    v_chargediscountamt         NUMBER;
    v_quicktellercount          NUMBER;
    v_holdingacctexist          NUMBER;
    v_corporate_limit           corporate_limits%rowtype;
    v_actual_daily_limit_amount number;
    v_collectionid              VARCHAR2(200);
    v_collectionrecordid        VARCHAR2(200);
    v_collectionnarration       VARCHAR2(700);
    --multidebit
    v_threadid           NUMBER;
    v_pendinguploadexist NUMBER;
  BEGIN
    v_istokenused   := 'N';
    v_response      := validateAccount(p_DR_ACCOUNT);
    v_postingoption := p_POSTING_OPTIONID;
  
    if (p_payment_channel_id in ('2', '3')) then
      --neft/naps
      v_postingoption := '2';
    end if;
    begin
      v_corporate_limit := getCorporateLimitSetup(p_CORP_ID);
    exception
      when no_Data_found then
      
        return '99~~No limit found for the corporate and no default limit maintained';
      
    end;
  
    /* select sum(a.total_tran_amount)
        into v_actual_daily_limit_amount
        from transaction_batch_summary a
       where a.corp_id = p_CORP_ID
         and trunc(a.created_date) = trunc(sysdate);
    */
    /*select nvl(sum(a.total_tran_amount), 0)
     into v_actual_daily_limit_amount
     from transaction_batch_summary a
    where a.corp_id = p_CORP_ID
      and processing_status not in ('99', '07')
      and trunc(a.created_date) = trunc(sysdate);*/
    select nvl(sum(a.amount), 0)
      into v_actual_daily_limit_amount
      from TRANSACTION_BATCH_DETAIL a
     where a.corp_id = p_CORP_ID
       and processing_status not in ('12',
                                     '07',
                                     '13',
                                     '14',
                                     '-13',
                                     '16',
                                     '99',
                                     '15',
                                     '10',
                                     '09',
                                     '08')
       and trunc(a.created_date) = trunc(sysdate);
    v_actual_daily_limit_amount := v_actual_daily_limit_amount -
                                   p_TOTAL_AMOUNT;
    -- insert into testval(VALU) values(v_corporate_limit.daily_limit_amount);
    --  commit;
  
    if (p_TOTAL_AMOUNT > v_corporate_limit.transaction_limit_amount) then
      --if (p_TOTAL_AMOUNT > 10000000) then
      return '99~~Transaction Limit exceed by ' ||(p_TOTAL_AMOUNT -
                                                   v_corporate_limit.transaction_limit_amount);
    
    elsif ((v_actual_daily_limit_amount + p_TOTAL_AMOUNT) >
          v_corporate_limit.daily_limit_amount) then
      --elsif ((0+ p_TOTAL_AMOUNT) > 10000000) then
    
      return '99~~Daily Limit exceed by ' ||((v_actual_daily_limit_amount +
                                             p_TOTAL_AMOUNT) -
                                             v_corporate_limit.daily_limit_amount);
    elsif (v_response is null or v_response = '' or v_response <> '00') then
      return v_response;
    end if;
    -- SET TRANSACTION READ WRITE;
    --v_transitpostref :='';
    --DR_ACCOUNT_CURRENCY_CODE
    -- v_chargeamt :=0.0;
    --v_chargediscountamt :=0.0;
    select BRANCH_CODE, CCY
      into v_branchcode, v_acctCurrency
      from sttm_cust_account
     where cust_ac_no = p_DR_ACCOUNT
       and auth_stat = 'A'
       and record_stat = 'O';
    select NVL(HOLDING_ACCOUNT_ID, '0')
      into v_holdingacctid
      from CORPORATE_PROFILE
     where corp_id = p_CORP_ID;
    --#sprint2
    IF (v_holdingacctid = '0') THEN
      SELECT COUNT(1)
        INTO v_holdingacctexist
        FROM HOLDING_ACCOUNTS
       WHERE IS_DEFAULT_HOLDING_ACCT = 'Y'
         AND ROWNUM < 2;
      IF (v_holdingacctexist > 0) THEN
        SELECT ACCOUNT_NO, ACCOUNT_TYPE, BRANCH_CODE, CURRENCY_CODE
          INTO v_holdingacctno,
               v_holdingaccttype,
               v_holdingacctbranchcode,
               v_holdingacctcurrencycode
          FROM HOLDING_ACCOUNTS
         WHERE IS_DEFAULT_HOLDING_ACCT = 'Y'
           AND ROWNUM < 2;
      ELSE
        return 'HOLDING ACCOUNT NOT YET MAINTAINED FOR LUMPSUM DEBIT. PLEASE CONTACT THE UNION BANK CONTACT CENTER';
      END IF;
    ELSE
      SELECT COUNT(1)
        INTO v_holdingacctexist
        FROM HOLDING_ACCOUNTS
       WHERE HOLDING_ACCOUNT_ID = v_holdingacctid;
      IF (v_holdingacctexist > 0) THEN
        SELECT ACCOUNT_NO, ACCOUNT_TYPE, BRANCH_CODE, CURRENCY_CODE
          INTO v_holdingacctno,
               v_holdingaccttype,
               v_holdingacctbranchcode,
               v_holdingacctcurrencycode
          FROM HOLDING_ACCOUNTS
         WHERE HOLDING_ACCOUNT_ID = v_holdingacctid;
      
      ELSE
        return 'HOLDING ACCOUNT NOT YET MAINTAINED FOR LUMPSUM DEBIT. PLEASE CONTACT THE UNION BANK CONTACT CENTER';
      
      END IF;
    END IF;
  
    IF (v_postingoption = '2') THEN
      --v_holdingacctexist
      --#sprint2
    
      v_transitpostref := 'CIB' || p_BATCH_ID;
    END IF;
  
    if (p_auth_token_sno is not null and length(p_auth_token_sno) > 0) then
      select count(1)
        into v_validatetoken
        from TOKEN_VALIDATION_LOG
       where VALIDATION_REF = p_auth_token_sno
         and RESPONSE_CODE = '1'
         and ((sysdate - CREATED_DATE) * 24 * 60 * 60) < 120;
      if (v_validatetoken = 0) then
        v_response := '99~~Token has expired or invalid. Kindly use another token and try again.'; --INVALID APPROVAL OPTION
        RETURN v_response;
      else
        v_istokenused := 'Y';
      end if;
    end if;
    --multidebit
  
    select THREAD_ID_SEQ.NEXTVAL into v_threadid from dual;
  
    IF (v_postingoption = '1') THEN
      Select count(1)
        into v_pendinguploadexist
        from TRANSACTION_BATCH_SUMMARY
       where CORP_ID = p_CORP_ID
         and DR_ACCOUNT = p_DR_ACCOUNT
         and POSTING_OPTION_ID = 1
         and PROCESSING_STATUS = '22';
      if (v_pendinguploadexist > 0) then
        select thread_id
          into v_threadid
          from TRANSACTION_BATCH_SUMMARY
         where CORP_ID = p_CORP_ID
           and DR_ACCOUNT = p_DR_ACCOUNT
           and POSTING_OPTION_ID = 1
           and PROCESSING_STATUS = '22'
           and rownum < 2;
      end if;
    
    END IF;
  
    INSERT INTO TRANSACTION_BATCH_SUMMARY
      (HOLDING_ACCT_BRANCH_CODE,
       HOLDING_ACCT_CURRENCY_CODE,
       HOLDING_ACCT_TYPE,
       HOLDING_ACCT_NO,
       POSTING_OPTION_ID,
       DR_ACCOUNT,
       CREATED_BY,
       CREATED_DATE,
       CORP_ID,
       APPROVAL_STATUS_ID,
       BATCH_ID,
       SCHEDULE_DATE,
       NO_OF_RECORD,
       TOTAL_TRAN_AMOUNT,
       PAYMENT_TYPE_ID,
       DR_ACCOUNT_BRANCH_CODE,
       DR_ACCOUNT_CURRENCY_CODE,
       THREAD_ID,
       TRANSIT_POSTREF,
       BATCH_DESCRIPTION,
       original_total_tran_amount,
       payment_channel_id,
       upload_filename, --#sprint2
       auth_token_flag,
       auth_token_sno)
    VALUES
      (v_holdingacctbranchcode,
       v_holdingacctcurrencycode,
       v_holdingaccttype,
       v_holdingacctno,
       v_postingoption,
       p_DR_ACCOUNT,
       p_CREATED_BY,
       SYSDATE,
       p_CORP_ID,
       1,
       p_BATCH_ID,
       --TO_DATE( SUBSTR(p_SCHEDULE_DATE, 0, 10), 'YYYY-MM-DD'),
       TO_DATE(p_SCHEDULE_DATE, 'DD-MM-YYYY'),
       p_NO_OF_RECORD,
       p_TOTAL_AMOUNT,
       p_PAYMENT_TYPE_ID,
       v_branchcode,
       v_acctCurrency,
       v_threadid,
       -- THREAD_ID_SEQ.NEXTVAL,
       v_transitpostref,
       p_BATCH_DESCRIPTION,
       p_TOTAL_AMOUNT,
       p_payment_channel_id,
       p_upload_filename, --#sprint2
       v_istokenused,
       p_auth_token_sno);
  
    IF (v_postingoption = '1') THEN
      update TRANSACTION_BATCH_DETAIL
         set THREAD_ID = v_threadid
       where BATCH_ID = p_BATCH_ID;
    END IF;
  
    if ((p_upload_filename is not null) and length(p_upload_filename) > 1) then
      update TRANSACTION_UPLOAD_SUMMARY
         set TRANSACTION_INITIATED = 'Y',
             LAST_MODIFIED_BY      = p_CREATED_BY,
             LAST_MODIFIED_DATE    = SYSDATE
       WHERE BATCH_ID = p_upload_filename;
    
    end if;
    select count(1)
      into v_quicktellercount
      from TRANSACTION_BATCH_DETAIL
     where BATCH_ID = p_BATCH_ID
       and PAYMENT_CHANNEL_ID = 4; --quick teller
  
    IF (v_quicktellercount > 0) THEN
    
      update TRANSACTION_BATCH_DETAIL
         set POST_REF_NO = 'CIBQT' || (TO_CHAR(SYSDATE, 'YYMMDDHH24MMSS')) ||
                           LPAD(PAYMENTS.bills_pay_ref_id_seq.NEXTVAL,
                                12,
                                '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
         AND PAYMENT_CHANNEL_ID = 4; --quick teller
    END IF;
    IF (v_postingoption = '2') THEN
      --SINGLE DEBIT
      UPDATE TRANSACTION_BATCH_DETAIL
         SET DR_ACCOUNT_NO = v_holdingacctno,
             --POST_REF_NO   = 'B/' || BATCH_DETAIL_ID || '/' || p_BATCH_ID
             POST_REF_NO = 'CIB' || BATCH_DETAIL_ID
       WHERE BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'N';
    
      update TRANSACTION_BATCH_DETAIL
         set DR_ACCOUNT_NO = v_holdingacctno,
             POST_REF_NO   = 'CIB000018' || TO_CHAR(SYSDATE, 'YYMMDDHHMMSS') ||
                             LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL,
                                  12,
                                  -- '0') || '/' || p_BATCH_ID
                                  '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
         AND PAYMENT_CHANNEL_ID in (1, 2, 3); --NIP,NEFT,NAPS --#sprint2
    
    ELSIF (v_postingoption = '1') THEN
      --MULTIPLE DEBIT
      UPDATE TRANSACTION_BATCH_DETAIL
         SET POST_REF_NO = 'CIB' || BATCH_DETAIL_ID
       WHERE BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'N';
    
      update TRANSACTION_BATCH_DETAIL
         set POST_REF_NO = 'CIB000018' || TO_CHAR(SYSDATE, 'YYMMDDHHMMSS') ||
                           LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL,
                                12,
                                '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
-- AND PAYMENT_CHANNEL_ID in (1, 2, 3); --NIP,NEFT,NAPS --#sprint2
 AND PAYMENT_CHANNEL_ID in (1, 2, 3,5); --NIP,NEFT,NAPS,RTGS --#phase3 sprint1
    END IF;
    --v_holdingacctno
  
    select CHARGE_APPLY, CHARGE_AMOUNT
      into v_chargeapply, v_chargeamt
      from REF_PAYMENT_TYPES
     where PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID;
    --IF (v_chargeapply = 'Y') THEN
    select count(1)
      into v_chargediscountexist
      from CORPORATE_DISCOUNTS
     where CORP_ID = p_CORP_ID
       and PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID
       AND RECORD_STATUS_ID = 2
       AND APPROVAL_STATUS_ID = 2;
    IF (v_chargediscountexist > 0) THEN
      select PERCENTAGE_DISCOUNT
        into v_chargediscountpercent
        from CORPORATE_DISCOUNTS
       where CORP_ID = p_CORP_ID
         and PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID
         AND RECORD_STATUS_ID = 2
         AND APPROVAL_STATUS_ID = 2;
      v_chargediscountamt := ((v_chargediscountpercent / 100) * v_chargeamt);
      v_chargeamt         := (v_chargeamt - v_chargediscountamt);
    END IF;
    IF (p_CHARGE_OPTION_ID = '1') THEN
      --SENDER TO PAY
      UPDATE TRANSACTION_BATCH_DETAIL
         SET CHARGE_AMOUNT =
             (CHARGE_AMOUNT + v_chargeamt)
       WHERE BATCH_ID = p_BATCH_ID;
    ELSIF (p_CHARGE_OPTION_ID = '2') THEN
      -- BENEFICIARY TO PAY
      UPDATE TRANSACTION_BATCH_DETAIL
         SET CHARGE_AMOUNT =
             (CHARGE_AMOUNT + v_chargeamt),
             AMOUNT       =
             (AMOUNT - (CHARGE_AMOUNT + v_chargeamt))
       WHERE BATCH_ID = p_BATCH_ID;
    END IF;
    
     if ((p_upload_filename is not null) and length(p_upload_filename) > 1 and v_postingoption='2') then
     update TRANSACTION_BATCH_DETAIL set CHARGE_AMOUNT='15.75' where BATCH_ID=p_BATCH_ID and ISINTERBANK_TRANSFER='Y' and PAYMENT_CHANNEL_ID ='1';
     
     END IF;
    
    SELECT SUM(CHARGE_AMOUNT)
      into v_totalchargeamt
      FROM TRANSACTION_BATCH_DETAIL
     WHERE BATCH_ID = p_BATCH_ID;
  
    IF (p_CHARGE_OPTION_ID = '1') THEN
      --SENDER TO PAY
      UPDATE TRANSACTION_BATCH_SUMMARY a
         SET TOTAL_CHARGE_AMT            = v_totalchargeamt,
             a.original_total_charge_amt = v_totalchargeamt,
             CUMULATIVE_AMOUNT          =
             (v_totalchargeamt + TOTAL_TRAN_AMOUNT),
             original_CUMULATIVE_AMOUNT =
             (v_totalchargeamt + TOTAL_TRAN_AMOUNT)
       WHERE BATCH_ID = p_BATCH_ID;
    ELSIF (p_CHARGE_OPTION_ID = '2') THEN
      -- BENEFICIARY TO PAY
      UPDATE TRANSACTION_BATCH_SUMMARY a
         SET TOTAL_CHARGE_AMT             = v_totalchargeamt,
             a.original_total_charge_amt  = v_totalchargeamt,
             TOTAL_TRAN_AMOUNT           =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             a.original_total_tran_amount =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             CUMULATIVE_AMOUNT           =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             original_CUMULATIVE_AMOUNT  =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt)
       WHERE BATCH_ID = p_BATCH_ID;
    END IF;
  
    if (p_PAYMENT_TYPE_ID = '7') THEN
      --FIRS 
    
      select BATCH_DETAIL_ID
        into v_batch_detail_id
        from TRANSACTION_BATCH_DETAIL
       where BATCH_ID = p_BATCH_ID
         and rownum < 2;
      select TAXTYPE
        into v_taxtype
        from FIRS_REMITTANCE_DETAILS
       where BATCH_DETAIL_ID = p_BATCH_ID
         and rownum < 2;
    
      update FIRS_REMITTANCE_DETAILS
         set BATCH_DETAIL_ID = v_batch_detail_id
       where BATCH_DETAIL_ID = p_BATCH_ID;
      if (v_taxtype = 'WHT') THEN
        UPDATE FIRS_REMITTANCE_DETAILS_WHT
           SET BATCH_DETAIL_ID = v_batch_detail_id
         where BATCH_DETAIL_ID = p_BATCH_ID;
      END IF;
      if (v_taxtype = 'PAYE') THEN
        UPDATE FIRS_REMITTANCE_DETAILS_PAYE
           SET BATCH_DETAIL_ID = v_batch_detail_id
         where BATCH_DETAIL_ID = p_BATCH_ID;
      END IF;
    END IF;
    if (p_PAYMENT_TYPE_ID = '8') then
    
      select collection_id, REQUEST_ID
        into v_collectionid, v_collectionrecordid
        from COLLECTION_DETAILS
       where batch_detail_id in (select batch_detail_id
                                   from TRANSACTION_BATCH_DETAIL
                                  where batch_id = p_BATCH_ID
                                    and rownum < 2);
    
      if (v_collectionid in ('286', '287')) THEN
        SELECT 'REVPAY/' || CUSTOM_VALUE_1 || '/' || CUSTOM_VALUE_2 || '/' ||
               CUSTOM_VALUE_3 || '/' || CUSTOM_VALUE_4
          INTO v_collectionnarration
          FROM COLLECTION_DETAILS
         WHERE REQUEST_ID = v_collectionrecordid;
        update TRANSACTION_BATCH_SUMMARY
           set BATCH_DESCRIPTION = v_collectionnarration
         where batch_id = p_BATCH_ID;
        update TRANSACTION_BATCH_detail
           set NARRATION = v_collectionnarration
         where batch_id = p_BATCH_ID
           and rownum < 2;
      
      END IF;
    end if;
    -- END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest(p_DR_ACCOUNT,
                                                        p_CREATED_BY,
                                                        p_MENU_ID,
                                                        '1',
                                                        p_BATCH_ID,
                                                        p_TOTAL_AMOUNT,
                                                        p_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'TRANSACTION', --event category
                   'batchid~' || p_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_MENU_ID,
                   1,
                   v_response,
                   p_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      INSERT INTO rib_sr_error_log
        (error_date, error_msg, error_point)
      VALUES
        (SYSDATE,
         DBMS_UTILITY.format_error_backtrace || v_err_message,
         'CIBANK.TRANSACTION_BATCH_SUMMARY');
    
      COMMIT;
      v_response := getFriendlyExceptionMessage(v_err_message, p_MENU_ID);
      RETURN v_response;
  END;

  FUNCTION addsignatory(o_reference                    out varchar2,
                        p_CREATED_BY                   IN VARCHAR2,
                        p_NO_OF_SIGNATORIES_FOR_LEVEL  IN VARCHAR2,
                        p_ROUTEID                      IN VARCHAR2,
                        p_APPROVAL_LEVEL               IN VARCHAR2,
                        p_GROUP_USERS_APPROVAL_ORDERED IN VARCHAR2,
                        p_APPROVER_ROUTE_TYPEID        IN VARCHAR2,
                        p_CAN_ANY_GROUP_USER_APPROVE   IN VARCHAR2,
                        p_REQUEST_TYPE_ID              IN VARCHAR2,
                        p_EXPECTED_GROUP_APPROVER_ID   IN VARCHAR2,
                        p_ROUTE_SIGNATORY_ID           IN VARCHAR2,
                        p_EXPECTED_USER_APPROVER_ID    IN VARCHAR2,
                        p_MENU_ID                      IN VARCHAR2,
                        p_APPLY_APPROVAL_LIMIT         IN VARCHAR2,
                        p_signatory_type_id            varchar2,
                        p_system_generated             char,
                        p_context_url                  varchar2,
                        p_ip_mac_address               varchar2,
                        p_session_id                   varchar2)
    RETURN VARCHAR2 IS
    v_err_message      VARCHAR2(3000);
    v_response         VARCHAR2(100);
    v_recordstatus     VARCHAR2(2);
    v_maintableid      NUMBER := 0;
    v_reqid            NUMBER;
    v_count            NUMBER;
    v_merchant_corp_id NUMBER;
    v_routetypeid      NUMBER;
    v_approvalstatus   VARCHAR2(2);
    --v_routeType number:=0;
  BEGIN
    SELECT APPROVAL_ROUTE_SIGN_REQ_SEQ.NEXTVAL INTO v_reqid FROM DUAL;
    select ROUTE_TYPE_ID
      into v_routetypeid
      from APPROVAL_ROUTE
     where APPROVAL_ROUTE_ID = p_ROUTEID;
    select corp_id
      into v_merchant_corp_id
      from APPROVAL_ROUTE
     where APPROVAL_ROUTE_ID = p_ROUTEID;
    IF (p_REQUEST_TYPE_ID = '1') -- NEW
     THEN
      SELECT APPROVAL_ROUTE_SIGNatories_SEQ.NEXTVAL
        INTO v_maintableid
        FROM DUAL;
      -- SELECT CORPORATE_PROFILE_REQ_SEQ.nextval INTO v_reqid FROM DUAL;
    
      /*IF (p_system_generated IN ('Y')) THEN
        INSERT INTO APPROVAL_ROUTE_SIGNATORIES
          (CREATED_BY,
           CREATED_DATE,
           NO_OF_SIGNATORIES_FOR_LEVEL,
           ROUTEID,
           RECORD_STATUS_ID,
           APPROVAL_LEVEL,
           REQUEST_TABLE_ID,
           APPROVAL_STATUS_ID,
           GROUP_USERS_APPROVAL_ORDERED,
           APPROVER_ROUTE_TYPEID,
           CAN_ANY_GROUP_USER_APPROVE,
           REQUEST_TYPE_ID,
           EXPECTED_GROUP_APPROVER_ID,
           ROUTE_SIGNATORY_ID,
           EXPECTED_USER_APPROVER_ID,
           APPLY_APPROVAL_LIMIT,
           signatory_type_id
           --, approved_by
           )
        VALUES
          (p_CREATED_BY,
           SYSDATE,
           p_NO_OF_SIGNATORIES_FOR_LEVEL,
           p_ROUTEID,
           1,
           p_APPROVAL_LEVEL,
           v_reqid,
           1,
           p_GROUP_USERS_APPROVAL_ORDERED,
           v_routetypeid,
           p_CAN_ANY_GROUP_USER_APPROVE,
           p_REQUEST_TYPE_ID,
           p_EXPECTED_GROUP_APPROVER_ID,
           v_maintableid,
           p_EXPECTED_USER_APPROVER_ID,
           p_APPLY_APPROVAL_LIMIT,
           p_signatory_type_id
           --,2
           );
           o_reference := v_maintableid;
           RETURN '00~~RECORD CREATED AND SENT FOR APPROVAL';
           
      ELSE*/
      INSERT INTO APPROVAL_ROUTE_SIGNATORIES
        (CREATED_BY,
         CREATED_DATE,
         NO_OF_SIGNATORIES_FOR_LEVEL,
         ROUTEID,
         RECORD_STATUS_ID,
         APPROVAL_LEVEL,
         REQUEST_TABLE_ID,
         APPROVAL_STATUS_ID,
         GROUP_USERS_APPROVAL_ORDERED,
         APPROVER_ROUTE_TYPEID,
         CAN_ANY_GROUP_USER_APPROVE,
         REQUEST_TYPE_ID,
         EXPECTED_GROUP_APPROVER_ID,
         ROUTE_SIGNATORY_ID,
         EXPECTED_USER_APPROVER_ID,
         APPLY_APPROVAL_LIMIT,
         signatory_type_id)
      VALUES
        (p_CREATED_BY,
         SYSDATE,
         p_NO_OF_SIGNATORIES_FOR_LEVEL,
         p_ROUTEID,
         1,
         p_APPROVAL_LEVEL,
         v_reqid,
         1,
         p_GROUP_USERS_APPROVAL_ORDERED,
         v_routetypeid,
         p_CAN_ANY_GROUP_USER_APPROVE,
         p_REQUEST_TYPE_ID,
         p_EXPECTED_GROUP_APPROVER_ID,
         v_maintableid,
         p_EXPECTED_USER_APPROVER_ID,
         p_APPLY_APPROVAL_LIMIT,
         p_signatory_type_id);
      -- END IF;
      INSERT INTO APPROVAL_ROUTE_SIGNATORIES_REQ
        (CREATED_BY,
         CREATED_DATE,
         NO_OF_SIGNATORIES_FOR_LEVEL,
         ROUTEID,
         APPROVAL_LEVEL,
         APPROVAL_STATUS_ID,
         ROUTE_SIGNATORY_REQ_ID,
         PARENT_TABLE_ID,
         GROUP_USERS_APPROVAL_ORDERED,
         APPROVER_ROUTE_TYPEID,
         CAN_ANY_GROUP_USER_APPROVE,
         REQUEST_TYPE_ID,
         EXPECTED_GROUP_APPROVER_ID,
         ROUTE_SIGNATORY_ID,
         EXPECTED_USER_APPROVER_ID,
         APPLY_APPROVAL_LIMIT,
         signatory_type_id)
      VALUES
        (p_CREATED_BY,
         sysdate,
         p_NO_OF_SIGNATORIES_FOR_LEVEL,
         p_ROUTEID,
         p_APPROVAL_LEVEL,
         1,
         v_reqid,
         v_maintableid,
         p_GROUP_USERS_APPROVAL_ORDERED,
         v_routetypeid,
         p_CAN_ANY_GROUP_USER_APPROVE,
         p_REQUEST_TYPE_ID,
         p_EXPECTED_GROUP_APPROVER_ID,
         v_maintableid,
         p_EXPECTED_USER_APPROVER_ID,
         p_APPLY_APPROVAL_LIMIT,
         p_signatory_type_id);
    ELSIF (p_REQUEST_TYPE_ID = '2') THEN
      -- EDIT
    
      --v_corpid := p_CORP_ID;
    
      INSERT INTO APPROVAL_ROUTE_SIGNATORIES_REQ
        (CREATED_BY,
         CREATED_DATE,
         NO_OF_SIGNATORIES_FOR_LEVEL,
         ROUTEID,
         APPROVAL_LEVEL,
         APPROVAL_STATUS_ID,
         ROUTE_SIGNATORY_REQ_ID,
         PARENT_TABLE_ID,
         GROUP_USERS_APPROVAL_ORDERED,
         APPROVER_ROUTE_TYPEID,
         CAN_ANY_GROUP_USER_APPROVE,
         REQUEST_TYPE_ID,
         EXPECTED_GROUP_APPROVER_ID,
         ROUTE_SIGNATORY_ID,
         EXPECTED_USER_APPROVER_ID,
         APPLY_APPROVAL_LIMIT,
         signatory_type_id)
      VALUES
        (p_CREATED_BY,
         sysdate,
         p_NO_OF_SIGNATORIES_FOR_LEVEL,
         p_ROUTEID,
         p_APPROVAL_LEVEL,
         1,
         v_reqid,
         p_ROUTE_SIGNATORY_ID,
         p_GROUP_USERS_APPROVAL_ORDERED,
         v_routetypeid,
         p_CAN_ANY_GROUP_USER_APPROVE,
         p_REQUEST_TYPE_ID,
         p_EXPECTED_GROUP_APPROVER_ID,
         p_ROUTE_SIGNATORY_ID,
         p_EXPECTED_USER_APPROVER_ID,
         p_APPLY_APPROVAL_LIMIT,
         p_signatory_type_id);
    ELSE
      --DELETE,DEACTIVATE,ACTIVATE
      --v_corpid := p_CORP_ID;
      -- FOR item IN (SELECT * FROM CORPORATE_PROFILE WHERE CORP_ID=v_corpid) LOOP
      --  BEGIN
      --v_corpid :=p_CORP_ID;
    
      insert INTO APPROVAL_ROUTE_SIGNATORIES_REQ
        (CREATED_BY,
         CREATED_DATE,
         NO_OF_SIGNATORIES_FOR_LEVEL,
         ROUTEID,
         APPROVAL_LEVEL,
         APPROVAL_STATUS_ID,
         ROUTE_SIGNATORY_REQ_ID,
         PARENT_TABLE_ID,
         GROUP_USERS_APPROVAL_ORDERED,
         APPROVER_ROUTE_TYPEID,
         CAN_ANY_GROUP_USER_APPROVE,
         REQUEST_TYPE_ID,
         EXPECTED_GROUP_APPROVER_ID,
         ROUTE_SIGNATORY_ID,
         EXPECTED_USER_APPROVER_ID,
         APPLY_APPROVAL_LIMIT,
         signatory_type_id)
      --VALUES
      -- (
        SELECT p_CREATED_BY,
               sysdate,
               p_signatory_type_id,
               ROUTEID,
               p_APPROVAL_LEVEL,
               1,
               v_reqid,
               p_ROUTE_SIGNATORY_ID,
               p_GROUP_USERS_APPROVAL_ORDERED,
               APPROVER_ROUTE_TYPEID,
               CAN_ANY_GROUP_USER_APPROVE,
               p_REQUEST_TYPE_ID,
               p_EXPECTED_GROUP_APPROVER_ID,
               p_ROUTE_SIGNATORY_ID,
               p_EXPECTED_USER_APPROVER_ID,
               APPLY_APPROVAL_LIMIT,
               p_signatory_type_id
          FROM APPROVAL_ROUTE_SIGNATORIES
         WHERE ROUTE_SIGNATORY_ID = p_ROUTE_SIGNATORY_ID;
    
      -- END;
      -- END LOOP;
    END IF;
    if (p_system_generated IN ('Y')) then
      -- RETURN '00~~RECORD CREATED AND SENT FOR APPROVAL';
      v_response := '00~~RECORD CREATED AND SENT FOR APPROVAL';
    else
      v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                          p_CREATED_BY,
                                                          p_MENU_ID,
                                                          p_REQUEST_TYPE_ID,
                                                          v_reqid,
                                                          0,
                                                          v_merchant_corp_id,
                                                          p_context_url,
                                                          p_ip_mac_address,
                                                          p_session_id);
    
    end if;
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      --commit;
      if (v_maintableid = 0) then
        o_reference := p_ROUTE_SIGNATORY_ID;
      else
        o_reference := v_maintableid;
      end if;
    else
      rollback;
    end if;
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'SIGNATORY', --event category
                   'recordid~' || v_maintableid || '~~requestid~' ||
                   v_reqid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_MENU_ID,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   v_reqid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.APPROVAL_ROUTE_SIGNATORIES_REQ');
    
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, p_MENU_ID);
  END;

  FUNCTION updateEmailNotification(i_SCHEDULE_ID    IN VARCHAR2,
                                   i_STATUS         IN VARCHAR2,
                                   i_status_message varchar2) RETURN VARCHAR2 IS
    v_err_message VARCHAR2(3000);
    v_response    VARCHAR2(100);
  
  BEGIN
  
    UPDATE EMAIL_SCHEDULES
       SET SENT_STATUS   = i_STATUS,
           sent_date     = sysdate,
           retry_count   = retry_count + 1,
           error_message = i_status_message
     WHERE SCHEDULE_ID = i_SCHEDULE_ID;
    v_response := '00';
    RETURN v_response;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.EMAIL_SCHEDULES');
    
      v_response := '99';
      RETURN v_response;
  END;

  FUNCTION getPendingEmailNotification RETURN SYS_REFCURSOR IS
    o_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN o_refcursor FOR
      SELECT *
        FROM EMAIL_SCHEDULES
       WHERE SENT_STATUS = 'NEW'
         and retry_count <= 10;
  
    RETURN o_refcursor;
  END getPendingEmailNotification;

  PROCEDURE send_mail(p_to        IN VARCHAR2,
                      p_from      IN VARCHAR2,
                      p_message   IN VARCHAR2,
                      p_smtp_host IN VARCHAR2,
                      p_smtp_port IN NUMBER DEFAULT 25) AS
  
    v_err_message VARCHAR2(2000);
    l_mail_conn   UTL_SMTP.connection;
  BEGIN
  
    l_mail_conn := UTL_SMTP.open_connection(p_smtp_host, p_smtp_port);
    UTL_SMTP.helo(l_mail_conn, p_smtp_host);
    UTL_SMTP.mail(l_mail_conn, p_from);
    UTL_SMTP.rcpt(l_mail_conn, p_to);
    UTL_SMTP.data(l_mail_conn, p_message || UTL_TCP.crlf || UTL_TCP.crlf);
    UTL_SMTP.quit(l_mail_conn);
  
  EXCEPTION
    WHEN OTHERS THEN
      -- Consider logging the error and then re-raise
      v_err_message := SQLERRM;
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'send_mail to:' || p_to);
    
    --COMMIT;
  END;

  FUNCTION createapprovalroute(o_reference              out varchar2,
                               p_APPROVAL_ROUTE_ID_REQ  IN VARCHAR2,
                               p_IS_APPROVAL_SEQUENTIAL IN VARCHAR2,
                               p_ISFINANCIAL            IN VARCHAR2,
                               p_CORP_ACCT_ID           IN NUMBER,
                               p_MODULE_ID              IN NUMBER,
                               p_REQUEST_TYPE_ID        IN VARCHAR2,
                               p_ISGLOBALRULE           IN VARCHAR2,
                               p_CREATED_BY             IN VARCHAR2,
                               p_TRAN_TYPE_ID           IN NUMBER,
                               p_DEPARTMENT_ID          IN NUMBER,
                               p_CORP_ID                IN VARCHAR2,
                               --p_NO_OF_APPROVAL         IN VARCHAR2,
                               p_NO_OF_SIGNATORIES     VARCHAR2,
                               p_NO_OF_APPROVAL_LEVELS varchar2,
                               p_ROUTE_TYPE_ID         IN VARCHAR2,
                               p_APPROVAL_OPTIONS_ID   IN VARCHAR2,
                               -- p_PARENT_TABLE_ID        IN VARCHAR2,
                               p_ISGLOBAL_ACCTRULE IN VARCHAR2,
                               p_ISMODULERULE      IN VARCHAR2,
                               p_MENU_ID           IN VARCHAR2,
                               p_ROUTE_NAME        IN VARCHAR2,
                               p_ROUTE_DESC        IN VARCHAR2,
                               p_IS_AMOUNT_RULE    varchar2,
                               p_START_AMOUNT      number,
                               p_END_AMOUNT        number,
                               p_system_generated  char,
                               p_context_url       varchar2,
                               p_ip_mac_address    varchar2,
                               p_session_id        varchar2
                               
                               ) RETURN VARCHAR2 IS
    v_err_message          VARCHAR2(3000);
    v_response             VARCHAR2(100);
    v_recordstatus         VARCHAR2(2);
    v_tableid              NUMBER;
    v_reqid                NUMBER;
    v_approvalstatus       VARCHAR2(2);
    v_ISFINANCIAL          integer;
    v_approval_route_count integer := 0;
  BEGIN
    SELECT APPROVAL_ROUTE_REQ_SEQ.nextval INTO v_reqid FROM DUAL;
  
    IF (p_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      --validate multipe approval rule for sole proprietorship
      select count(1)
        into v_approval_route_count
        from approval_route a
       where a.RECORD_STATUS_ID = 2
         and a.corp_id = p_CORP_ID
         and isCorporateSoleProprietorship(p_CORP_ID) = 'Y';
    
      if (v_approval_route_count > 0) then
        return '99~~Sole Proprietor can only have one approval rule';
      else
      
        SELECT APPROVAL_ROUTE_SEQ.NEXTVAL INTO v_tableid FROM DUAL;
        -- SELECT CORPORATE_PROFILE_REQ_SEQ.nextval INTO v_reqid FROM DUAL;
        o_reference := v_tableid;
        /*IF (p_system_generated IN ('Y')) THEN
          
            INSERT INTO APPROVAL_ROUTE
            (CREATED_BY,
             APPROVAL_ROUTE_ID,
             TRAN_TYPE_ID,
             DEPARTMENT_ID,
             CREATED_DATE,
             RECORD_STATUS_ID,
             CORP_ID,
             NO_OF_SIGNATORIES,
             NO_OF_APPROVAL_LEVELS,
             APPROVAL_STATUS_ID,
             ROUTE_TYPE_ID,
             IS_APPROVAL_SEQUENTIAL,
             APPROVAL_OPTIONS_ID,
             ISFINANCIAL,
             ISGLOBAL_ACCTRULE,
             CORP_ACCT_ID,
             ISMODULERULE,
             MODULE_ID,
             REQUEST_TYPE_ID,
             ISGLOBALRULE,
             ROUTE_NAME,
             ROUTE_DESC,
             IS_AMOUNT_RULE,
             START_AMOUNT,
             END_AMOUNT
            -- , approved_by
             )
          VALUES
            (p_CREATED_BY,
             v_tableid,
             p_TRAN_TYPE_ID,
             p_DEPARTMENT_ID,
             SYSDATE,
             1,
             p_CORP_ID,
             p_NO_OF_SIGNATORIES,
             p_NO_OF_APPROVAL_LEVELS,
             1,
             p_ROUTE_TYPE_ID,
             p_IS_APPROVAL_SEQUENTIAL,
             p_APPROVAL_OPTIONS_ID,
             p_ISFINANCIAL,
             p_ISGLOBAL_ACCTRULE,
             p_CORP_ACCT_ID,
             p_ISMODULERULE,
             p_MODULE_ID,
             p_REQUEST_TYPE_ID,
             p_ISGLOBALRULE,
             p_ROUTE_NAME,
             p_ROUTE_DESC,
             p_IS_AMOUNT_RULE,
             p_START_AMOUNT,
             p_END_AMOUNT
            -- ,2
             );
             o_reference := v_tableid;
             return '00~~RECORD CREATED AND SENT FOR APPROVAL';
        ELSE*/
        INSERT INTO APPROVAL_ROUTE_REQ
          (APPROVAL_ROUTE_ID,
           CREATED_DATE,
           APPROVAL_ROUTE_ID_REQ,
           IS_APPROVAL_SEQUENTIAL,
           ISFINANCIAL,
           CORP_ACCT_ID,
           MODULE_ID,
           REQUEST_TYPE_ID,
           ISGLOBALRULE,
           CREATED_BY,
           TRAN_TYPE_ID,
           DEPARTMENT_ID,
           CORP_ID,
           NO_OF_SIGNATORIES,
           NO_OF_APPROVAL_LEVELS,
           APPROVAL_STATUS_ID,
           ROUTE_TYPE_ID,
           APPROVAL_OPTIONS_ID,
           PARENT_TABLE_ID,
           ISGLOBAL_ACCTRULE,
           ISMODULERULE,
           ROUTE_NAME,
           ROUTE_DESC,
           IS_AMOUNT_RULE,
           START_AMOUNT,
           END_AMOUNT)
        VALUES
          (v_tableid,
           SYSDATE,
           v_reqid,
           p_IS_APPROVAL_SEQUENTIAL,
           p_ISFINANCIAL,
           p_CORP_ACCT_ID,
           p_MODULE_ID,
           p_REQUEST_TYPE_ID,
           p_ISGLOBALRULE,
           p_CREATED_BY,
           p_TRAN_TYPE_ID,
           p_DEPARTMENT_ID,
           p_CORP_ID,
           p_NO_OF_SIGNATORIES,
           p_NO_OF_APPROVAL_LEVELS,
           1,
           p_ROUTE_TYPE_ID,
           p_APPROVAL_OPTIONS_ID,
           v_tableid,
           p_ISGLOBAL_ACCTRULE,
           p_ISMODULERULE,
           p_ROUTE_NAME,
           p_ROUTE_DESC,
           p_IS_AMOUNT_RULE,
           p_START_AMOUNT,
           p_END_AMOUNT);
        INSERT INTO APPROVAL_ROUTE
          (CREATED_BY,
           APPROVAL_ROUTE_ID,
           TRAN_TYPE_ID,
           DEPARTMENT_ID,
           CREATED_DATE,
           RECORD_STATUS_ID,
           CORP_ID,
           NO_OF_SIGNATORIES,
           NO_OF_APPROVAL_LEVELS,
           APPROVAL_STATUS_ID,
           ROUTE_TYPE_ID,
           IS_APPROVAL_SEQUENTIAL,
           APPROVAL_OPTIONS_ID,
           ISFINANCIAL,
           ISGLOBAL_ACCTRULE,
           CORP_ACCT_ID,
           ISMODULERULE,
           MODULE_ID,
           REQUEST_TYPE_ID,
           ISGLOBALRULE,
           ROUTE_NAME,
           ROUTE_DESC,
           IS_AMOUNT_RULE,
           START_AMOUNT,
           END_AMOUNT)
        VALUES
          (p_CREATED_BY,
           v_tableid,
           p_TRAN_TYPE_ID,
           p_DEPARTMENT_ID,
           SYSDATE,
           1,
           p_CORP_ID,
           p_NO_OF_SIGNATORIES,
           p_NO_OF_APPROVAL_LEVELS,
           1,
           p_ROUTE_TYPE_ID,
           p_IS_APPROVAL_SEQUENTIAL,
           p_APPROVAL_OPTIONS_ID,
           p_ISFINANCIAL,
           p_ISGLOBAL_ACCTRULE,
           p_CORP_ACCT_ID,
           p_ISMODULERULE,
           p_MODULE_ID,
           p_REQUEST_TYPE_ID,
           p_ISGLOBALRULE,
           p_ROUTE_NAME,
           p_ROUTE_DESC,
           p_IS_AMOUNT_RULE,
           p_START_AMOUNT,
           p_END_AMOUNT);
        -- END IF;
      end if;
    ELSIF (p_REQUEST_TYPE_ID = '2') THEN
      -- EDIT
    
      v_tableid := p_APPROVAL_ROUTE_ID_REQ;
    
      INSERT INTO APPROVAL_ROUTE_REQ
        (APPROVAL_ROUTE_ID,
         CREATED_DATE,
         APPROVAL_ROUTE_ID_REQ,
         IS_APPROVAL_SEQUENTIAL,
         ISFINANCIAL,
         CORP_ACCT_ID,
         MODULE_ID,
         REQUEST_TYPE_ID,
         ISGLOBALRULE,
         CREATED_BY,
         TRAN_TYPE_ID,
         DEPARTMENT_ID,
         CORP_ID,
         NO_OF_SIGNATORIES,
         NO_OF_APPROVAL_LEVELS,
         APPROVAL_STATUS_ID,
         ROUTE_TYPE_ID,
         APPROVAL_OPTIONS_ID,
         PARENT_TABLE_ID,
         ISGLOBAL_ACCTRULE,
         ISMODULERULE,
         ROUTE_NAME,
         ROUTE_DESC,
         IS_AMOUNT_RULE,
         START_AMOUNT,
         END_AMOUNT)
      VALUES
        (v_tableid,
         SYSDATE,
         v_reqid,
         p_IS_APPROVAL_SEQUENTIAL,
         p_ISFINANCIAL,
         p_CORP_ACCT_ID,
         p_MODULE_ID,
         p_REQUEST_TYPE_ID,
         p_ISGLOBALRULE,
         p_CREATED_BY,
         p_TRAN_TYPE_ID,
         p_DEPARTMENT_ID,
         p_CORP_ID,
         p_NO_OF_SIGNATORIES,
         p_NO_OF_APPROVAL_LEVELS,
         1,
         p_ROUTE_TYPE_ID,
         p_APPROVAL_OPTIONS_ID,
         v_tableid,
         p_ISGLOBAL_ACCTRULE,
         p_ISMODULERULE,
         p_ROUTE_NAME,
         p_ROUTE_DESC,
         p_IS_AMOUNT_RULE,
         p_START_AMOUNT,
         p_END_AMOUNT);
    ELSE
      --DELETE,DEACTIVATE,ACTIVATE
      v_tableid := p_APPROVAL_ROUTE_ID_REQ;
      -- FOR item IN (SELECT * FROM CORPORATE_PROFILE WHERE CORP_ID=v_corpid) LOOP
      --  BEGIN
      --v_corpid :=p_CORP_ID;
    
      INSERT INTO APPROVAL_ROUTE_REQ
        (APPROVAL_ROUTE_ID,
         CREATED_DATE,
         APPROVAL_ROUTE_ID_REQ,
         IS_APPROVAL_SEQUENTIAL,
         ISFINANCIAL,
         CORP_ACCT_ID,
         MODULE_ID,
         REQUEST_TYPE_ID,
         ISGLOBALRULE,
         CREATED_BY,
         TRAN_TYPE_ID,
         DEPARTMENT_ID,
         CORP_ID,
         NO_OF_SIGNATORIES,
         NO_OF_APPROVAL_LEVELS,
         APPROVAL_STATUS_ID,
         ROUTE_TYPE_ID,
         APPROVAL_OPTIONS_ID,
         PARENT_TABLE_ID,
         ISGLOBAL_ACCTRULE,
         ISMODULERULE,
         ROUTE_NAME,
         ROUTE_DESC,
         IS_AMOUNT_RULE,
         START_AMOUNT,
         END_AMOUNT)
        SELECT v_tableid,
               SYSDATE,
               v_reqid,
               IS_APPROVAL_SEQUENTIAL,
               ISFINANCIAL,
               CORP_ACCT_ID,
               MODULE_ID,
               p_REQUEST_TYPE_ID,
               ISGLOBALRULE,
               p_CREATED_BY,
               TRAN_TYPE_ID,
               DEPARTMENT_ID,
               CORP_ID,
               NO_OF_SIGNATORIES,
               NO_OF_APPROVAL_LEVELS,
               1,
               ROUTE_TYPE_ID,
               APPROVAL_OPTIONS_ID,
               v_tableid,
               ISGLOBAL_ACCTRULE,
               ISMODULERULE,
               ROUTE_NAME,
               ROUTE_DESC,
               IS_AMOUNT_RULE,
               START_AMOUNT,
               END_AMOUNT
          from APPROVAL_ROUTE
         where APPROVAL_ROUTE_ID = v_tableid;
      -- END;
      -- END LOOP;
    END IF;
    if (p_system_generated IN ('Y')) then
      --return '00~~RECORD CREATED AND SENT FOR APPROVAL';
      v_response := '00~~RECORD CREATED AND SENT FOR APPROVAL';
    else
      v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                          p_CREATED_BY,
                                                          p_MENU_ID,
                                                          p_REQUEST_TYPE_ID,
                                                          v_reqid,
                                                          0,
                                                          p_CORP_ID,
                                                          p_context_url,
                                                          p_ip_mac_address,
                                                          p_session_id);
    end if;
  
    if (instr(v_response, '00')) > 0 then
      o_reference := v_tableid;
      -- commit;
    else
      rollback;
    end if;
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'APPROVAL-RULE', --event category
                   'recordid~' || v_tableid || '~~requestid~' || v_reqid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_MENU_ID,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   v_reqid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.APPROVAL_ROUTE_REQ');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, p_MENU_ID);
  END;

  function getUserFullname(p_firstname varchar2, p_lastname varchar2)
    return varchar2 as
  begin
  
    return p_firstname || ' ' || p_lastname;
  
  end;

  function formatDate(p_date date, p_format varchar2) return varchar2 as
  begin
  
    return to_char(p_date, p_format);
  
  end;

  function formatDate(p_date date) return varchar2 as
    v_format varchar2(50) := 'DD/MM/RRRR';
  begin
  
    return formatDate(p_date, v_format);
  
  end;

  function formatDateTime(p_date date) return varchar2 as
    v_format varchar2(50) := 'DD/MM/RRRR HH:MI:SS AM';
  begin
  
    return formatDate(p_date, v_format);
  
  end;

  FUNCTION getTranDetailsByScheduleID(ptrantype      IN VARCHAR2,
                                      pparenttableid IN VARCHAR2,
                                      p_view_only    char)
    RETURN SYS_REFCURSOR IS
    o_refcursor     SYS_REFCURSOR;
    v_parenttableid VARCHAR2(100);
    v_corpid        VARCHAR2(100);
    v_ptrantype     VARCHAR2(100);
  
    v_recordcount    NUMBER;
    v_isSalaryUpload NUMBER;
  
    v_scheduletypeid     VARCHAR2(100);
    v_scheduleoptionid   VARCHAR2(100);
    v_taxtype            VARCHAR2(200);
    v_batch_detail_id    VARCHAR2(200);
    v_scheduletype       VARCHAR2(100);
    v_scheduleoption     VARCHAR2(100);
    v_startdate          VARCHAR2(100);
    v_enddate            VARCHAR2(100);
    v_scheduledays       VARCHAR2(300);
    v_scheduletime       VARCHAR2(100);
    v_sweepoption        VARCHAR2(300);
    v_sweepvariable      VARCHAR2(300);
    v_parenttableref     VARCHAR2(200); --ph2sprint1
    v_year               VARCHAR2(100);
    v_month              VARCHAR2(500);
    v_days               VARCHAR2(300);
    v_daysofmonth        VARCHAR2(400);
    v_hour               VARCHAR2(100);
    v_collectionid       VARCHAR2(100);
    r_approval_route_req APPROVAL_ROUTE_REQ%rowtype;
  BEGIN
  
    select PARENT_TABLE_ID, TRANSACTION_TYPE_ID
      into v_parenttableid, v_ptrantype
      from APPROVAL_SCHEDULES
     where APPROVAL_SCHEDULE_ID = pparenttableid;
    --insert into idvalid values('tableid',v_parenttableid||' '||v_ptrantype);
    --  commit;
  
    IF (v_ptrantype = '4') THEN
      select corp_id
        into v_corpid
        from CORPORATE_PROFILE_REQ
       where CORP_REQ_ID = v_parenttableid;
      select count(1)
        into v_recordcount
        from APPROVAL_ROUTE_REQ
       where REQUEST_TYPE_ID = 1
         and SCHEDULE_SUMMARY_ID is null
         and APPROVAL_STATUS_ID = 1
         and ROUTE_TYPE_ID = 5
         AND corp_id = v_corpid
         and ROWNUM < 2;
      IF (v_recordcount > 0) THEN
        SELECT *
          INTO r_approval_route_req
          from APPROVAL_ROUTE_REQ
         where REQUEST_TYPE_ID = 1
           and SCHEDULE_SUMMARY_ID is null
           and APPROVAL_STATUS_ID = 1
           AND corp_id = v_corpid
           and ROUTE_TYPE_ID = 5
           AND ROWNUM < 2;
      END IF;
      IF (v_recordcount > 0) THEN
        OPEN o_refcursor FOR
          Select CORPORATE_PROFILE_REQ.NAME            Corporate_Name,
                 CORPORATE_PROFILE_REQ.CORPORATE_ID    as Corporate_Id,
                 CORPORATE_PROFILE_REQ.ADDRESS         as Address,
                 CORPORATE_PROFILE_REQ.OFFICE_PHONE_NO as Office_Phone,
                 CORPORATE_PROFILE_REQ.MOBILE_PHONE_NO as Mobile_Phone,
                 CORPORATE_PROFILE_REQ.EMAIL           As Corporate_Email,
                 CORPORATE_PROFILE_REQ.RM_EMAIL        as RM_Email,
                 
                 REF_POSTING_OPTIONS.Name as Posting_Option,
                 -- CORPORATE_PROFILE_REQ.HOLDING_ACCOUNT_ID,
                 --   CORPORATE_PROFILE_REQ.AUTO_APPROVAL_ENABLED,
                 -- CORPORATE_PROFILE_REQ.Has_Token as Token_Enabled,
                 CORPORATE_PROFILE_REQ.ENABLE_INPUTTER_TOKEN as Inputter_Use_Token,
                 CORPORATE_PROFILE_REQ.ENABLE_VERIFIER_TOKEN AS Verifier_Use_Token,
                 CORPORATE_PROFILE_REQ.AUTHORIZER_TOKEN_FLAG AS Authoriser_Token_Option,
                 
                 r_approval_route_req.ROUTE_NAME as Mandate_Rule_Name,
                 'GLOBAL RULE' as Mandate_Rule_Type,
                 r_approval_route_req.NO_OF_APPROVAL_LEVELS as No_Of_Approval_Levels,
                 r_approval_route_req.NO_OF_SIGNATORIES as Total_Signatory_To_Sign,
                 
                 -- CORPORATE_PROFILE_REQ.CREATED_BY,
                 (USER_PROFILE.FIRST_NAME || ' ' || USER_PROFILE.LAST_NAME) AS Created_By,
                 TO_CHAR(CORPORATE_PROFILE_REQ.CREATED_DATE, 'DD/MM/YYYY') Created_Date,
                 -- CORPORATE_PROFILE_REQ.LAST_MODIFIED_BY,
                 -- CORPORATE_PROFILE_REQ.LAST_MODIFIED_DATE,
                 --CORPORATE_PROFILE_REQ.CUSTOMER_ID,
                 -- CORPORATE_PROFILE_REQ.APPROVAL_STATUS_ID,
                 -- CORPORATE_PROFILE_REQ.REQUEST_TYPE_ID,
                 --  CORPORATE_PROFILE_REQ.PARENT_TABLE_ID,
                 --  CORPORATE_PROFILE_REQ.SCHEDULE_SUMMARY_ID,
                 
                 REF_APPROVAL_STATUS.NAME As Approval_Status
            From CORPORATE_PROFILE_REQ
            join USER_PROFILE
              on CORPORATE_PROFILE_REQ.CREATED_BY = USER_PROFILE.USER_ID
            join REF_POSTING_OPTIONS
              on REF_POSTING_OPTIONS.POSTING_OPTION_ID =
                 CORPORATE_PROFILE_REQ.POSTING_OPTION_ID
            join REF_APPROVAL_STATUS
              on CORPORATE_PROFILE_REQ.APPROVAL_STATUS_ID =
                 REF_APPROVAL_STATUS.APPROVAL_STATUS_ID
           Where CORP_REQ_ID = v_parenttableid;
        RETURN o_refcursor;
      ELSE
      
        OPEN o_refcursor FOR
          Select CORPORATE_PROFILE_REQ.NAME            Corporate_Name,
                 CORPORATE_PROFILE_REQ.CORPORATE_ID    as Corporate_Id,
                 CORPORATE_PROFILE_REQ.ADDRESS         as Address,
                 CORPORATE_PROFILE_REQ.OFFICE_PHONE_NO as Office_Phone,
                 CORPORATE_PROFILE_REQ.MOBILE_PHONE_NO as Mobile_Phone,
                 CORPORATE_PROFILE_REQ.EMAIL           As Corporate_Email,
                 CORPORATE_PROFILE_REQ.RM_EMAIL        as RM_Email,
                 
                 REF_POSTING_OPTIONS.Name as Posting_Option,
                 -- CORPORATE_PROFILE_REQ.HOLDING_ACCOUNT_ID,
                 --   CORPORATE_PROFILE_REQ.AUTO_APPROVAL_ENABLED,
                 --CORPORATE_PROFILE_REQ.Has_Token as Token_Enabled,
                 CORPORATE_PROFILE_REQ.ENABLE_INPUTTER_TOKEN as Inputter_Use_Token,
                 CORPORATE_PROFILE_REQ.ENABLE_VERIFIER_TOKEN AS Verifier_Use_Token,
                 case CORPORATE_PROFILE_REQ.AUTHORIZER_TOKEN_FLAG
                   when '1' then
                    'All Authorisers Will Use Token'
                   when '2' then
                    'At Least One Authoriser Will Use Token'
                   else
                    ''
                 end Authoriser_Token_Option,
                 --CORPORATE_PROFILE_REQ.AUTHORIZER_TOKEN_FLAG AS Authoriser_Token_Option,
                 
                 -- CORPORATE_PROFILE_REQ.CREATED_BY,
                 (USER_PROFILE.FIRST_NAME || ' ' || USER_PROFILE.LAST_NAME) AS Created_By,
                 TO_CHAR(CORPORATE_PROFILE_REQ.CREATED_DATE, 'DD/MM/YYYY') Created_Date,
                 -- CORPORATE_PROFILE_REQ.LAST_MODIFIED_BY,
                 -- CORPORATE_PROFILE_REQ.LAST_MODIFIED_DATE,
                 --CORPORATE_PROFILE_REQ.CUSTOMER_ID,
                 -- CORPORATE_PROFILE_REQ.APPROVAL_STATUS_ID,
                 -- CORPORATE_PROFILE_REQ.REQUEST_TYPE_ID,
                 --  CORPORATE_PROFILE_REQ.PARENT_TABLE_ID,
                 --  CORPORATE_PROFILE_REQ.SCHEDULE_SUMMARY_ID,
                 
                 REF_APPROVAL_STATUS.NAME As Approval_Status
            From CORPORATE_PROFILE_REQ
            join USER_PROFILE
              on CORPORATE_PROFILE_REQ.CREATED_BY = USER_PROFILE.USER_ID
            join REF_POSTING_OPTIONS
              on REF_POSTING_OPTIONS.POSTING_OPTION_ID =
                 CORPORATE_PROFILE_REQ.POSTING_OPTION_ID
            join REF_APPROVAL_STATUS
              on CORPORATE_PROFILE_REQ.APPROVAL_STATUS_ID =
                 REF_APPROVAL_STATUS.APPROVAL_STATUS_ID
           Where CORP_REQ_ID = v_parenttableid;
      
        RETURN o_refcursor;
      END IF;
    ELSIF (v_ptrantype = '5') THEN
      OPEN o_refcursor FOR
        SELECT b.name Corporate_Name,
               --a.user_id User_Id,
               
               a.first_name      First_Name,
               a.last_name       Last_Name,
               a.username        Username,
               a.MOBILE_PHONE_NO as Mobile_Phone_No,
               a.EMAIL           as Email_Address,
               a.ENABLE_TOKEN    as Use_Token,
               
               a.HAS_GLOBAL_ACCT_ACCESS as Has_Global_Account_Access,
               a.IS_SIGNATORY as Is_A_Signatory,
               a.APPROVAL_LIMIT AS Approval_Limit,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          FROM USER_PROFILE_REQ a, corporate_profile b, user_profile maker
         WHERE a.corp_id = b.corp_id
           and USER_ID_REQ = v_parenttableid
           and a.created_by = maker.user_id;
      RETURN o_refcursor;
    
    elsif (v_ptrantype = '6') then
      open o_refcursor for
        select d.first_name || ' ' || d.last_name User_Name,
               b.name Role_Name,
               c.name Role_Type,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from user_role_req  a,
               roles          b,
               ref_role_types c,
               user_profile   d,
               user_profile   maker
         where a.user_id = d.user_id
           and a.role_id = b.role_id
           and b.role_type_id = c.role_type_id
           and a.request_id = v_parenttableid
           and a.created_by = maker.user_id;
      return o_refcursor;
    elsif (v_ptrantype = '7') then
      open o_refcursor for
        select a.account_number Account_Number,
               a.account_name Account_Name,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
        
          from corporate_account_req a, user_profile maker
         where a.request_id = v_parenttableid
           and a.created_by = maker.user_id;
      return o_refcursor;
    elsif (v_ptrantype = '8') then
      open o_refcursor for
        select a.name Role_Name,
               b.name Role_Type,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from roles_req a, ref_role_types b, user_profile maker
         where a.request_id = v_parenttableid
           and a.role_type_id = b.role_type_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    elsif (v_ptrantype = '9') then
      open o_refcursor for
        select a.name Department_Name,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from departments_req a, user_profile maker
         where a.request_id = v_parenttableid
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '11') then
      open o_refcursor for
        select b.name Role_Name,
               c.menuname Menu_Name,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from appmenuroles_req a, roles b, menu c, user_profile maker
         where a.request_id = v_parenttableid
           and a.roleid = b.role_id
           and a.appmenuid = c.menuid
           and a.created_by = maker.user_id;
    
      return o_refcursor;
    
    elsif (v_ptrantype in ('12')) then
    
      open o_refcursor for
        select c.first_name || ' ' || c.last_name User_Name,
               b.account_number,
               b.account_name,
               
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
        
          from user_account_access_req a,
               
               corporate_account b,
               user_profile      c,
               user_profile      maker
         where a.request_id = v_parenttableid
           and a.user_id = c.user_id
           and a.corp_acct_id = b.corp_acct_id
           and a.created_by = maker.user_id;
    
      return o_refcursor;
    
    elsif (v_ptrantype = '13') then
      open o_refcursor for
        select a.name Group_Name,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from approval_groups_req a, user_profile maker
         where a.request_id = v_parenttableid
           and a.created_by = maker.user_id;
    
      return o_refcursor;
    
    elsif (v_ptrantype in ('14', '22')) then
    
      open o_refcursor for
        select c.first_name || ' ' || c.last_name User_Name,
               b.name Group_Name,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               a.created_date Date_Created
          from approval_groups_users_req a,
               approval_groups           b,
               user_profile              c,
               departments               d,
               user_profile              maker
         where a.request_id = v_parenttableid
           and a.approval_group_id = b.group_id
           and a.user_id = c.user_id(+)
           and a.dept_id = d.dept_id(+)
           and a.created_by = maker.user_id;
      return o_refcursor;
    ELSIF (v_ptrantype in (15)) then
      open o_refcursor for
        select a.NO_OF_SIGNATORIES Number_of_Approval,
               a.route_name Route_Name,
               b.name RouteTypeDesc,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from approval_route_req      a,
               ref_approval_route_type b,
               user_profile            maker
         where a.approval_route_id_req = v_parenttableid
           and a.route_type_id = b.approval_route_type_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    ELSIF (v_ptrantype = '16') THEN
      --MANAGE APPROVAL SIGNATORIES
      OPEN o_refcursor FOR
      
      /* Select APPROVAL_ROUTE_SIGNATORIES_REQ.ROUTE_SIGNATORY_ID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.ROUTEID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVAL_LEVEL,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVER_ROUTE_TYPEID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.EXPECTED_USER_APPROVER_ID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.CREATED_BY,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.CREATED_DATE,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVED_BY,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVED_DATE,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.LAST_MODIFIED_DATE,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.LAST_MODIFIED_BY,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.RECORD_STATUS_ID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVAL_STATUS_ID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.EXPECTED_GROUP_APPROVER_ID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVAL_COMMENT,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.CAN_ANY_GROUP_USER_APPROVE,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.NO_OF_SIGNATORIES_FOR_LEVEL,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.GROUP_USERS_APPROVAL_ORDERED,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.REQUEST_TYPE_ID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.PARENT_TABLE_ID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.SCHEDULE_SUMMARY_ID,
                                                                                                                                                                                                                            APPROVAL_ROUTE_SIGNATORIES_REQ.ROUTE_SIGNATORY_REQ_ID,
                                                                                                                                                                                                                            (USER_PROFILE.FIRST_NAME || ' ' || USER_PROFILE.LAST_NAME) AS CREATED_BY_NAME,
                                                                                                                                                                                                                            (USER_PROFILE1.FIRST_NAME || ' ' || USER_PROFILE1.LAST_NAME) AS USERAPPROVER_NAME,
                                                                                                                                                                                                                            REF_APPROVAL_ROUTE_TYPE.NAME As APPROVAL_ROUTE_TYPE_DESC,
                                                                                                                                                                                                                            
                                                                                                                                                                                                                            APPROVAL_GROUPS.NAME         As APPROVAL_GROUP_DESC,
                                                                                                                                                                                                                            REF_REQUEST_TYPE.DESCRIPTION AS REQUEST_TYPE_DESC
                                                                                                                                                                                                                       From APPROVAL_ROUTE_SIGNATORIES_REQ
                                                                                                                                                                                                                       JOIN USER_PROFILE
                                                                                                                                                                                                                         ON APPROVAL_ROUTE_SIGNATORIES_REQ.CREATED_BY =
                                                                                                                                                                                                                            USER_PROFILE.USER_ID
                                                                                                                                                                                                                       JOIN REF_APPROVAL_ROUTE_TYPE
                                                                                                                                                                                                                         ON APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVER_ROUTE_TYPEID =
                                                                                                                                                                                                                            REF_APPROVAL_ROUTE_TYPE.APPROVAL_ROUTE_TYPE_ID
                                                                                                                                                                                                                       JOIN USER_PROFILE USER_PROFILE1
                                                                                                                                                                                                                         ON APPROVAL_ROUTE_SIGNATORIES_REQ.EXPECTED_USER_APPROVER_ID =
                                                                                                                                                                                                                            USER_PROFILE1.USER_ID
                                                                                                                                                                                                                       JOIN APPROVAL_GROUPS
                                                                                                                                                                                                                         ON APPROVAL_ROUTE_SIGNATORIES_REQ.EXPECTED_GROUP_APPROVER_ID =
                                                                                                                                                                                                                            APPROVAL_GROUPS.GROUP_ID
                                                                                                                                                                                                                       JOIN REF_REQUEST_TYPE
                                                                                                                                                                                                                         ON APPROVAL_ROUTE_SIGNATORIES_REQ.REQUEST_TYPE_ID =
                                                                                                                                                                                                                            REF_REQUEST_TYPE.REQUEST_TYPE_ID
                                                                                                                                                                                                                      Where ROUTE_SIGNATORY_REQ_ID = v_parenttableid;*/
      
        Select APPROVAL_ROUTE.ROUTE_NAME as Mandate_Rule_Name,
               case APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVAL_LEVEL
                 when 0 then
                  'Verifiers'
               
                 else
                  TO_CHAR(APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVAL_LEVEL)
               end Approval_Level,
               -- APPROVAL_ROUTE_SIGNATORIES_REQ.APPROVAL_LEVEL as Approval_Level,
               
               APPROVAL_ROUTE_SIGNATORIES_REQ.NO_OF_SIGNATORIES_FOR_LEVEL as No_Of_Signatories_To_Sign,
               
               (USER_PROFILE.FIRST_NAME || ' ' || USER_PROFILE.LAST_NAME) AS Created_By,
               to_char(APPROVAL_ROUTE_SIGNATORIES_REQ.created_date,
                       'DD-MON-RRRR HH:MI:SS AM') Date_Created
        
          From APPROVAL_ROUTE_SIGNATORIES_REQ
          JOIN USER_PROFILE
            ON APPROVAL_ROUTE_SIGNATORIES_REQ.CREATED_BY =
               USER_PROFILE.USER_ID
          join APPROVAL_ROUTE
            on APPROVAL_ROUTE.APPROVAL_ROUTE_ID =
               APPROVAL_ROUTE_SIGNATORIES_REQ.ROUTEID
         Where ROUTE_SIGNATORY_REQ_ID = v_parenttableid;
    
      RETURN o_refcursor;
    
      /*ELSIF (v_ptrantype = '17') THEN
      --PAYMENTS
      OPEN o_refcursor FOR
      
        Select *
          FROM TRANSACTION_BATCH_DETAIL
         Where BATCH_ID = v_parenttableid;
      
      RETURN o_refcursor;
      --   END IF;*/
    elsif (v_ptrantype = '18') then
      open o_refcursor for
        select b.name Corporate_Name,
               c.name Payment_Type,
               a.percentage_discount Discount,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from corporate_discounts_req a,
               corporate_profile       b,
               ref_payment_types       c,
               user_profile            maker
         where a.corp_id = b.corp_id
           and a.payment_type_id = c.payment_type_id
           and a.request_id = v_parenttableid
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '19') then
      open o_refcursor for
        select a.account_no Account_Number,
               a.account_type Account_Type,
               a.name Account_Name,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
        
          from holding_accounts_req a, user_profile maker
         where a.request_id = v_parenttableid
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '20') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.terminal_id Terminal_ID,
               a.outlet_name Outlet_Name,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from corporate_terminals_req a,
               corporate_profile       b,
               user_profile            maker
         where a.request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '23') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.preferred_name Preferred_Name,
               a.acctno_phoneno_rsa_tax_tin_id Beneficiary_Ref_Number,
               a.beneficiary_category Beneficiary_Category,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from corporate_beneficiaries_req a,
               corporate_profile           b,
               user_profile                maker
         where a.batch_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '24') then
      open o_refcursor for
        select b.name Priority_Name,
               a.priority_no Priority_Level,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from approval_route_type_pr_req a,
               ref_approval_route_type    b,
               user_profile               maker
         where a.batch_id = v_parenttableid
           and a.approval_route_type_id = b.approval_route_type_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '25') then
      if (p_view_only = 'Y') then
        open o_refcursor for
        /* select '' Biller_Category,
                                                                                                                                                                                                                                                                                                                                                      '' Biller_Name,
                                                                                                                                                                                                                                                                                                                                                      '' Beneficiary_Name,
                                                                                                                                                                                                                                                                                                                                                      0 Amount,
                                                                                                                                                                                                                                                                                                                                                      '' Beneficiary_Reference,
                                                                                                                                                                                                                                                                                                                                                      '' CreatedBy,
                                                                                                                                                                                                                                                                                                                                                      '' Date_Created,
                                                                                                                                                                                                                                                                                                                                                      'Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>' Approve,
                                                                                                                                                                                                                                                                                                                                                      'Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>' Reject from dual
                                                                                                                                                                                                                                                                                                                                             union*/
          select a.biller_category Biller_Category,
                 a.biller_name Biller_Name,
                 a.beneficiary_name Beneficiary_Name,
                 a.amount Amount,
                 a.cr_account_no Beneficiary_Reference,
                 maker.first_name || ' ' || maker.last_name CreatedBy,
                 to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          
          --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
          --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
            from transaction_batch_detail a,
                 
                 user_profile maker,
                 user_profile rejectby
           where a.batch_id = v_parenttableid
             and a.rejected_by = rejectby.user_id(+)
             and a.created_by = maker.user_id;
        return o_refcursor;
      else
        open o_refcursor for
        /* select '' Biller_Category,
                                                                                                                                                                                                                                                                                                                                                      '' Biller_Name,
                                                                                                                                                                                                                                                                                                                                                      '' Beneficiary_Name,
                                                                                                                                                                                                                                                                                                                                                      0 Amount,
                                                                                                                                                                                                                                                                                                                                                      '' Beneficiary_Reference,
                                                                                                                                                                                                                                                                                                                                                      '' CreatedBy,
                                                                                                                                                                                                                                                                                                                                                      '' Date_Created,
                                                                                                                                                                                                                                                                                                                                                      'Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>' Approve,
                                                                                                                                                                                                                                                                                                                                                      'Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>' Reject from dual
                                                                                                                                                                                                                                                                                                                                             union*/
          select decode(p_view_only,
                        'Y',
                        ' ',
                        case a.processing_status
                          when '99' then
                           '<span style="color:red" title="' ||
                           rejectby.first_name || ' ' || rejectby.last_name ||
                           '">Declined<span>'
                        
                          else
                           '<input type="radio" name="row' ||
                           a.batch_detail_id || '" value="' ||
                           a.batch_detail_id ||
                           '~~1" class="radioa radioApprove">'
                        end) APPM7NBAT1,
                 decode(p_view_only,
                        'Y',
                        ' ',
                        case a.processing_status
                          when '99' then
                           ''
                          else
                           '<input type="radio" name="row' ||
                           a.batch_detail_id ||
                           '" class="radioa radioReject" value="' ||
                           a.batch_detail_id || '~~2">'
                        end) REJX8YBAT2,a.biller_category Biller_Category,
                 a.biller_name Biller_Name,
                 a.beneficiary_name Beneficiary_Name,
                 a.amount Amount,
                 a.cr_account_no Beneficiary_Reference,
                 maker.first_name || ' ' || maker.last_name CreatedBy,
                 to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                 
          --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
          --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
            from transaction_batch_detail a,
                 
                 user_profile maker,
                 user_profile rejectby
           where a.batch_id = v_parenttableid
                
             and a.rejected_by = rejectby.user_id(+)
             and a.created_by = maker.user_id;
        return o_refcursor;
      
      end if;
    
    elsif (v_ptrantype in ('1', '2', '3', '17')) then
    
      if (v_ptrantype in ('17')) then
      
        if (p_view_only = 'Y') then
          open o_refcursor for
          
            select b.bnk_name         Beneficiary_Bank,
                   a.cr_account_no    Beneficiary_Account,
                   a.beneficiary_name Beneficiary_Name,
                   a.amount           Amount,
                   a.narration,
                   --b.name Payment_Type              
                   maker.first_name || ' ' || maker.last_name CreatedBy,
                   to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
            
            --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
            --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
            
              from transaction_batch_detail a,
                   -- ref_payment_types b
                   user_profile            maker,
                   user_profile            rejectby,
                   newibank.RIB_BANKS_LIST b
             where a.batch_id = v_parenttableid
               and a.bank_code = b.nibsscode(+)
               and a.rejected_by = rejectby.user_id(+)
                  --a.payment_type_id=b.payment_type_id
               and a.created_by = maker.user_id;
          return o_refcursor;
        else
          open o_refcursor for
            select  decode(p_view_only,
                          'Y',
                          ' ',
                          case a.processing_status
                            when '99' then
                             '<span style="color:red" title="' ||
                             rejectby.first_name || ' ' || rejectby.last_name ||
                             '">Declined<span>'
                          
                            else
                             '<input type="radio" name="row' ||
                             a.batch_detail_id || '" value="' ||
                             a.batch_detail_id ||
                             '~~1" class="radioa radioApprove">'
                          end) APPM7NBAT1,
                   decode(p_view_only,
                          'Y',
                          ' ',
                          case a.processing_status
                            when '99' then
                             ''
                            else
                             '<input type="radio" name="row' ||
                             a.batch_detail_id ||
                             '" class="radioa radioReject" value="' ||
                             a.batch_detail_id || '~~2">'
                          end) REJX8YBAT2,
						  b.bnk_name      Beneficiary_Bank,
                   a.cr_account_no Beneficiary_Account,
                   
                   a.amount Amount,
                   a.narration,
                   a.beneficiary_name Uploaded_Name,
                   a.NE_CUST_NAME Actual_Name,
                   case NAME_VALIDATION_MATCH_STATUS
                     when '01' then
                      '<span style="color:red">FAILED<span>'
                     when '02' then
                      '<span style="color:#D2691E;">NOT MATCHED<span>'
                     when '03' then
                      '<span style="color:#DAA520;">PARTIAL MATCH<span>'
                     when '04' then
                      '<span style="color:green;">FULL MATCH<span>'
                     else
                      ''
                   end Name_Validation,
                   --b.name Payment_Type              
                   maker.first_name || ' ' || maker.last_name CreatedBy,
                   to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                   --this should not be visible to view only
                  
            --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
            --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
            
              from transaction_batch_detail a,
                   -- ref_payment_types b
                   user_profile maker,
                   user_profile rejectby,
                   
                   newibank.RIB_BANKS_LIST b
             where a.batch_id = v_parenttableid
               and a.bank_code = b.nibsscode(+)
               and a.rejected_by = rejectby.user_id(+)
                  --a.payment_type_id=b.payment_type_id
               and a.created_by = maker.user_id
             ORDER BY NAME_VALIDATION_MATCH_STATUS ASC;
          return o_refcursor;
        end if;
      else
        if (p_view_only = 'Y') then
          open o_refcursor for
          
            select b.bnk_name         Beneficiary_Bank,
                   a.cr_account_no    Beneficiary_Account,
                   a.beneficiary_name Beneficiary_Name,
                   a.amount           Amount,
                   a.narration,
                   --b.name Payment_Type              
                   maker.first_name || ' ' || maker.last_name CreatedBy,
                   to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
            
            --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
            --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
            
              from transaction_batch_detail a,
                   -- ref_payment_types b
                   user_profile maker,
                   user_profile rejectby,
                   
                   newibank.RIB_BANKS_LIST b
             where a.batch_id = v_parenttableid
               and a.bank_code = b.nibsscode(+)
               and a.rejected_by = rejectby.user_id(+)
                  --a.payment_type_id=b.payment_type_id
               and a.created_by = maker.user_id;
          return o_refcursor;
        else
          open o_refcursor for
            select                    decode(p_view_only,
                          'Y',
                          ' ',
                          case a.processing_status
                            when '99' then
                             '<span style="color:red" title="' ||
                             rejectby.first_name || ' ' || rejectby.last_name ||
                             '">Declined<span>'
                          
                            else
                             '<input type="radio" name="row' ||
                             a.batch_detail_id || '" value="' ||
                             a.batch_detail_id ||
                             '~~1" class="radioa radioApprove">'
                          end) APPM7NBAT1,
                   decode(p_view_only,
                          'Y',
                          ' ',
                          case a.processing_status
                            when '99' then
                             ''
                            else
                             '<input type="radio" name="row' ||
                             a.batch_detail_id ||
                             '" class="radioa radioReject" value="' ||
                             a.batch_detail_id || '~~2">'
                          end) REJX8YBAT2,
						  
						  
						  
						  b.bnk_name         Beneficiary_Bank,
                   a.cr_account_no    Beneficiary_Account,
                   a.beneficiary_name Beneficiary_Name,
                   a.amount           Amount,
                   a.narration,
                   --b.name Payment_Type              
                   maker.first_name || ' ' || maker.last_name CreatedBy,
                   to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                   --this should not be visible to view only

            --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
            --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
            
              from transaction_batch_detail a,
                   -- ref_payment_types b
                   user_profile maker,
                   user_profile rejectby,
                   
                   newibank.RIB_BANKS_LIST b
             where a.batch_id = v_parenttableid
               and a.bank_code = b.nibsscode(+)
               and a.rejected_by = rejectby.user_id(+)
                  --a.payment_type_id=b.payment_type_id
               and a.created_by = maker.user_id;
          return o_refcursor;
        end if;
      
      end if;
    elsif (v_ptrantype in ('35')) then
    
      select TAXTYPE, BATCH_DETAIL_ID
        into v_taxtype, v_batch_detail_id
        from FIRS_REMITTANCE_DETAILS
       where BATCH_DETAIL_ID in (select BATCH_DETAIL_ID
                                   from transaction_batch_detail
                                  where batch_id = v_parenttableid
                                    and rownum < 2);
      if (v_taxtype in ('WHT')) then
      
        open o_refcursor for
          select                  decode(p_view_only,
                        'Y',
                        ' ',
                        case b.processing_status
                          when '99' then
                           '<span style="color:red" title="' ||
                           rejectby.first_name || ' ' || rejectby.last_name ||
                           '">Declined<span>'
                        
                          else
                           '<input type="radio" name="row' || a.WHT_DETAIL_ID ||
                           '" value="' || a.WHT_DETAIL_ID ||
                           '~~1" class="radioa radioApprove">'
                        end) APPM7NBAT1,
                 decode(p_view_only,
                        'Y',
                        ' ',
                        case b.processing_status
                          when '99' then
                           ''
                          else
                           '<input type="radio" name="row' || a.WHT_DETAIL_ID ||
                           '" class="radioa radioReject" value="' ||
                           a.WHT_DETAIL_ID || '~~2">'
                        end) REJX8YBAT2,
						c.PAYERTIN        as Payer_Tin,
                 c.PAYERNAME       as Payer_Name,
                 c.PAYPERIODFROM   as Pay_Period_From,
                 c.PAYPERIODTO     as Pay_Period_To,
                 a.TAXAUTHORITY    Tax_Authority,
                 a.BENEFICIARYTIN  Beneficiary_TIN,
                 a.BENEFICIARYNAME Uploaded_Beneficiary_Name,
                 a.NE_CUST_NAME    Verified_Beneficiary_Name,
                 
                 case NAMEVALIDATIONSTATUS
                   when '01' then
                    '<span style="color:red">FAILED<span>'
                   when '02' then
                    '<span style="color:#D2691E;">NOT MATCHED<span>'
                   when '03' then
                    '<span style="color:#DAA520;">PARTIAL MATCH<span>'
                   when '04' then
                    '<span style="color:green;">FULL MATCH<span>'
                   else
                    ''
                 end Name_Validation_Status,
                 
                 TO_CHAR(a.TAXAMOUNT, '999,999,999,999.99') Tax_Amount,
                 'WHT' as Tax_Type,
                 a.DESCRIPTION as Description,
                 a.BENEFICIARYADDRESS as Beneficiary_Address,
                 a.RATE as Rate,
                 to_char(a.CONTRACTDATE, 'DD-MON-RRRR HH:MI:SS AM') Contract_Date,
                 a.INVOICENUMBER as Invoice_Number,
                 
                 TO_CHAR(a.CONTRACTAMOUNT, '999,999,999,999.99') as Contract_Amount,
                 a.CONTRACTTYPE as Contract_Type,
                 
                 -- a.beneficiary_name Uploaded_Name,
                 -- a.NE_CUST_NAME Actual_Name,
                 
                 --b.name Payment_Type              
                 maker.first_name || ' ' || maker.last_name CreatedBy,
                 to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                 --this should not be visible to view only

          --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
          --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
          
            from FIRS_REMITTANCE_DETAILS_WHT a,
                 -- ref_payment_types b
                 user_profile maker,
                 user_profile rejectby,
                 
                 transaction_batch_detail b,
                 FIRS_REMITTANCE_DETAILS  c
           where a.BATCH_DETAIL_ID = v_batch_detail_id
             and a.BATCH_DETAIL_ID = b.BATCH_DETAIL_ID
             and a.BATCH_DETAIL_ID = c.BATCH_DETAIL_ID
             and b.rejected_by = rejectby.user_id(+)
                --a.payment_type_id=b.payment_type_id
             and a.created_by = maker.user_id
           ORDER BY NAMEVALIDATIONSTATUS ASC;
        return o_refcursor;
        -- end if;
      elsif (v_taxtype in ('PAYE')) then
        open o_refcursor for
          select                  decode(p_view_only,
                        'Y',
                        ' ',
                        case b.processing_status
                          when '99' then
                           '<span style="color:red" title="' ||
                           rejectby.first_name || ' ' || rejectby.last_name ||
                           '">Declined<span>'
                        
                          else
                           '<input type="radio" name="row' ||
                           a.PAYE_DETAIL_ID || '" value="' ||
                           a.PAYE_DETAIL_ID ||
                           '~~1" class="radioa radioApprove">'
                        end) APPM7NBAT1,
                 decode(p_view_only,
                        'Y',
                        ' ',
                        case b.processing_status
                          when '99' then
                           ''
                          else
                           '<input type="radio" name="row' ||
                           a.PAYE_DETAIL_ID ||
                           '" class="radioa radioReject" value="' ||
                           a.PAYE_DETAIL_ID || '~~2">'
                        end) REJX8YBAT2,
						c.PAYERTIN as Payer_Tin,
                 c.PAYERNAME as Payer_Name,
                 c.PAYPERIODFROM as Pay_Period_From,
                 c.PAYPERIODTO as Pay_Period_To,
                 a.TAXAUTHORITY Tax_Authority,
                 a.BENEFICIARYTIN Beneficiary_TIN,
                 a.BENEFICIARYNAME Uploaded_Beneficiary_Name,
                 a.NE_CUST_NAME Verified_Beneficiary_Name,
                 case NAMEVALIDATIONSTATUS
                   when '01' then
                    '<span style="color:red">FAILED<span>'
                   when '02' then
                    '<span style="color:#D2691E;">NOT MATCHED<span>'
                   when '03' then
                    '<span style="color:#DAA520;">PARTIAL MATCH<span>'
                   when '04' then
                    '<span style="color:green;">FULL MATCH<span>'
                   else
                    ''
                 end Name_Validation_Status,
                 
                 TO_CHAR(a.TAXAMOUNT, '999,999,999,999.99') Tax_Amount,
                 'PAYE' as Tax_Type,
                 TO_CHAR(a.NHIS, '999,999,999,999.99') Nhis,
                 TO_CHAR(a.BASICSALARY, '999,999,999,999.99') Basic_Salary,
                 TO_CHAR(a.RATE, '999,999,999,999.99') Rate,
                 TO_CHAR(a.LIFEASSURANCE, '999,999,999,999.99') Life_Assurance,
                 TO_CHAR(a.PENSION, '999,999,999,999.99') Pension,
                 TO_CHAR(a.NHF, '999,999,999,999.99') Nhf,
                 TO_CHAR(a.PAYABLEPERANNUM, '999,999,999,999.99') Payable_Per_Annum,
                 TO_CHAR(a.GRATUITY, '999,999,999,999.99') Gratuity,
                 STAFFNUMBER Staff_Number,
                 TO_CHAR(a.GROSSPAY, '999,999,999,999.99') Gross_Pay,
                 BENEFICIARYDESIGNATION Beneficiary_Designation,
                 TO_CHAR(a.ALLOWANCE, '999,999,999,999.99') Allowance,
                 TO_CHAR(a.CRA, '999,999,999,999.99') Cra,
                 TO_CHAR(a.MINPAYABLEPERANNUM, '999,999,999,999.99') Min_Payable_Per_Annum,
                 TO_CHAR(a.STATUTORYPAYABLEPERANNUM, '999,999,999,999.99') Statutory_Payable_Per_Annum,
                 
                 maker.first_name || ' ' || maker.last_name CreatedBy,
                 to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                 --this should not be visible to view only

          --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
          --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
          
            from FIRS_REMITTANCE_DETAILS_PAYE a,
                 -- ref_payment_types b
                 user_profile maker,
                 user_profile rejectby,
                 
                 transaction_batch_detail b,
                 FIRS_REMITTANCE_DETAILS  c
           where a.BATCH_DETAIL_ID = v_batch_detail_id
             and a.BATCH_DETAIL_ID = b.BATCH_DETAIL_ID
             and a.BATCH_DETAIL_ID = c.BATCH_DETAIL_ID
             and b.rejected_by = rejectby.user_id(+)
                --a.payment_type_id=b.payment_type_id
             and a.created_by = maker.user_id
           ORDER BY NAMEVALIDATIONSTATUS ASC;
        return o_refcursor;
      
      else
        open o_refcursor for
          select
           decode(p_view_only,
                  'Y',
                  ' ',
                  case b.processing_status
                    when '99' then
                     '<span style="color:red" title="' || rejectby.first_name || ' ' ||
                     rejectby.last_name || '">Declined<span>'
                  
                    else
                     '<input type="radio" name="row' || b.batch_detail_id ||
                     '" value="' || b.batch_detail_id ||
                     '~~1" class="radioa radioApprove">'
                  end) APPM7NBAT1,
           decode(p_view_only,
                  'Y',
                  ' ',
                  case b.processing_status
                    when '99' then
                     ''
                    else
                     '<input type="radio" name="row' || b.batch_detail_id ||
                     '" class="radioa radioReject" value="' ||
                     b.batch_detail_id || '~~2">'
                  end) REJX8YBAT2,
           a.PAYERTIN as Payer_Tin,
           a.PAYERNAME as Payer_Name,
           a.TAXOFFICE as Tax_Office,
           a.PAYPERIODFROM as Pay_Period_From,
           a.PAYPERIODTO as Pay_Period_To,
           a.TAXTYPE_DESCRIPTION as Tax_Type,
           a.ADDRESS as Address,
           a.PAYREF as Payment_Reference,
           TO_CHAR(b.AMOUNT, '999,999,999,999.99') Tax_Amount,
           
           maker.first_name || ' ' || maker.last_name CreatedBy,
           to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
           --this should not be visible to view only
          
          --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
          --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
          
            from FIRS_REMITTANCE_DETAILS a,
                 -- ref_payment_types b
                 user_profile maker,
                 user_profile rejectby,
                 
                 transaction_batch_detail b
           where a.BATCH_DETAIL_ID = v_batch_detail_id
             and a.BATCH_DETAIL_ID = b.BATCH_DETAIL_ID
             and b.rejected_by = rejectby.user_id(+)
                --a.payment_type_id=b.payment_type_id
             and a.created_by = maker.user_id;
        -- ORDER BY NAMEVALIDATIONSTATUS ASC;
        return o_refcursor;
      
      end if;
    
    elsif (v_ptrantype in ('36')) then
      --collections
    
      select COLLECTION_ID, BATCH_DETAIL_ID
        into v_collectionid, v_batch_detail_id
        from COLLECTION_DETAILS
       where BATCH_DETAIL_ID in (select BATCH_DETAIL_ID
                                   from transaction_batch_detail
                                  where batch_id = v_parenttableid
                                    and rownum < 2);
      if (v_collectionid in ('286', '287')) then
        --revpay
      
        open o_refcursor for
        
          select                  decode(p_view_only,
                        'Y',
                        ' ',
                        case b.processing_status
                          when '99' then
                           '<span style="color:red" title="' ||
                           rejectby.first_name || ' ' || rejectby.last_name ||
                           '">Declined<span>'
                        
                          else
                           '<input type="radio" name="row' ||
                           b.batch_detail_id || '" value="' ||
                           b.batch_detail_id ||
                           '~~1" class="radioa radioApprove">'
                        end) APPM7NBAT1,
                 decode(p_view_only,
                        'Y',
                        ' ',
                        case b.processing_status
                          when '99' then
                           ''
                          else
                           '<input type="radio" name="row' ||
                           b.batch_detail_id ||
                           '" class="radioa radioReject" value="' ||
                           b.batch_detail_id || '~~2">'
                        end) REJX8YBAT2,
						'REV PAY(Lagos State)' as Tax_Type,
                 CUSTOM_VALUE_1 as PID,
                 CUSTOM_VALUE_3 as Full_Name,
                 CUSTOM_VALUE_4 as WebGui,
                 CUSTOM_VALUE_5 as State_,
                 CUSTOM_VALUE_7 as Agency_Rev,
                 TO_CHAR(b.Amount, '999,999,999,999.99') as Amount,
                 
                 maker.first_name || ' ' || maker.last_name CreatedBy,
                 to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                 --this should not be visible to view only

          --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
          --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
          
            from COLLECTION_DETAILS a,
                 -- ref_payment_types b
                 user_profile maker,
                 user_profile rejectby,
                 
                 transaction_batch_detail b
           where a.BATCH_DETAIL_ID = v_batch_detail_id
             and a.BATCH_DETAIL_ID = b.BATCH_DETAIL_ID
             and b.rejected_by = rejectby.user_id(+)
                --a.payment_type_id=b.payment_type_id
             and a.created_by = maker.user_id;
        --ORDER BY NAMEVALIDATIONSTATUS ASC;
        return o_refcursor;
        -- end if;
      elsif (v_collectionid in ('265')) then
        --DELTA STATE TSA PROJECT (XPRESS PAY WITH ID) - IGR
        open o_refcursor for
          select
            decode(p_view_only,
                  'Y',
                  ' ',
                  case b.processing_status
                    when '99' then
                     '<span style="color:red" title="' || rejectby.first_name || ' ' ||
                     rejectby.last_name || '">Declined<span>'
                  
                    else
                     '<input type="radio" name="row' || b.batch_detail_id ||
                     '" value="' || b.batch_detail_id ||
                     '~~1" class="radioa radioApprove">'
                  end) APPM7NBAT1,
           decode(p_view_only,
                  'Y',
                  ' ',
                  case b.processing_status
                    when '99' then
                     ''
                    else
                     '<input type="radio" name="row' || b.batch_detail_id ||
                     '" class="radioa radioReject" value="' ||
                     b.batch_detail_id || '~~2">'
                  end) REJX8YBAT2,
           'DELTA STATE TSA PROJECT (XPRESS PAY WITH ID) - IGR' as Tax_Type,
           CUSTOM_VALUE_7 as Customer_ID,
           CUSTOM_VALUE_1 as Full_Name,
           CUSTOM_VALUE_5 as Revenue_Office_Name,
           CUSTOM_VALUE_6 as Payment_Item_Name,
           CUSTOM_VALUE_3 as Phone,
           CUSTOM_VALUE_4 as Address,
           TO_CHAR(b.Amount, '999,999,999,999.99') as Amount,
           
           maker.first_name || ' ' || maker.last_name CreatedBy,
           to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
           --this should not be visible to view only
         
          --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
          --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
          
            from COLLECTION_DETAILS a,
                 -- ref_payment_types b
                 user_profile maker,
                 user_profile rejectby,
                 
                 transaction_batch_detail b
           where a.BATCH_DETAIL_ID = v_batch_detail_id
             and a.BATCH_DETAIL_ID = b.BATCH_DETAIL_ID
             and b.rejected_by = rejectby.user_id(+)
                --a.payment_type_id=b.payment_type_id
             and a.created_by = maker.user_id;
        return o_refcursor;
      elsif (v_collectionid in ('331')) then
        --PAYARENA AKWA IBOM STATE INTERNAL REVENUE
        open o_refcursor for
          select
           decode(p_view_only,
                  'Y',
                  ' ',
                  case b.processing_status
                    when '99' then
                     '<span style="color:red" title="' || rejectby.first_name || ' ' ||
                     rejectby.last_name || '">Declined<span>'
                  
                    else
                     '<input type="radio" name="row' || b.batch_detail_id ||
                     '" value="' || b.batch_detail_id ||
                     '~~1" class="radioa radioApprove">'
                  end) APPM7NBAT1,
           decode(p_view_only,
                  'Y',
                  ' ',
                  case b.processing_status
                    when '99' then
                     ''
                    else
                     '<input type="radio" name="row' || b.batch_detail_id ||
                     '" class="radioa radioReject" value="' ||
                     b.batch_detail_id || '~~2">'
                  end) REJX8YBAT2,
           'PAYARENA AKWA IBOM STATE INTERNAL REVENUE' as Tax_Type,
           CUSTOM_VALUE_1 as Applicant_Id,
           CUSTOM_VALUE_2 as Applicant_Name,
           CUSTOM_VALUE_3 as Applicantion_Type,
           TO_CHAR(b.Amount, '999,999,999,999.99') as Amount,
           
           maker.first_name || ' ' || maker.last_name CreatedBy,
           to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
           --this should not be visible to view only
          
          --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
          --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
          
            from COLLECTION_DETAILS a,
                 -- ref_payment_types b
                 user_profile maker,
                 user_profile rejectby,
                 
                 transaction_batch_detail b
           where a.BATCH_DETAIL_ID = v_batch_detail_id
             and a.BATCH_DETAIL_ID = b.BATCH_DETAIL_ID
             and b.rejected_by = rejectby.user_id(+)
                --a.payment_type_id=b.payment_type_id
             and a.created_by = maker.user_id;
        return o_refcursor;
      
      end if;
    
    elsif (v_ptrantype in ('31')) then
      --v_parenttableid
      select PARENT_TABLE_ID
        into v_parenttableref
        from TRANSACTION_SCHED_SUMMARY_REQ
       where REQUEST_TABLE_ID = v_parenttableid;
      select b.NAME,
             c.NAME,
             SCHEDULE_START_DATE,
             SCHEDULE_END_DATE,
             SWEEP_VARIABLE,
             d.NAME,
             a.SCHEDULE_TYPE_ID,
             a.SCHEDULE_OPTION_ID
        into v_scheduletype,
             v_scheduleoption,
             v_startdate,
             v_enddate,
             v_sweepvariable,
             v_sweepoption,
             v_scheduletypeid,
             v_scheduleoptionid
        from TRANSACTION_SCHEDULE_SUMMARY a
        join REF_SCHEDULE_TYPE b
          on b.SCHEDULE_TYPE_ID = a.SCHEDULE_TYPE_ID
        join REF_SCHEDULE_OPTIONS c
          on c.SCHEDULE_OPTION_ID = a.SCHEDULE_OPTION_ID
        left join REF_SWEEP_OPTIONS d
          on d.SWEEP_OPTION_ID = a.SWEEP_OPTION_ID
       Where a.batch_id = v_parenttableref;
    
      IF (v_enddate = NULL) THEN
      
        v_enddate := 'INDEFINITE';
      END IF;
      if (v_scheduleoptionid = '1') THEN
        SELECT TO_CHAR(TO_DATE(SCHEDULE_MONTH, 'MM'), 'MONTH')
          into v_month
          from TRANSACTION_SCHEDULE_CALENDAR
         where batch_id = v_parenttableref;
        select SCHEDULE_DAY || ' ' || v_month || ',' || SCHEDULE_YEAR,
               SCHEDULE_TIME
          into v_days, v_scheduletime
          from TRANSACTION_SCHEDULE_CALENDAR
         where batch_id = v_parenttableref;
      elsif (v_scheduleoptionid = '2') THEN
        select 'MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY',
               SCHEDULE_TIME
          into v_days, v_scheduletime
          from TRANSACTION_SCHEDULE_CALENDAR
         where batch_id = v_parenttableref;
      elsif (v_scheduleoptionid = '3') THEN
        select listagg(SCHEDULE_DAY, ', ') within group(order by SCHEDULE_DAY)
          INTO v_days
          from TRANSACTION_SCHEDULE_CALENDAR
         where batch_id = v_parenttableref;
        SELECT SCHEDULE_TIME
          INTO v_scheduletime
          from TRANSACTION_SCHEDULE_CALENDAR
         where batch_id = v_parenttableref
           AND ROWNUM < 2;
      elsif (v_scheduleoptionid = '4') THEN
      
        v_month := '';
        FOR item IN (SELECT DISTINCT (SCHEDULE_MONTH)
                       FROM TRANSACTION_SCHEDULE_CALENDAR
                      where batch_id = v_parenttableref) LOOP
          BEGIN
            v_month := v_month || ',' ||
                       TO_CHAR(TO_DATE(item.SCHEDULE_MONTH, 'MM'), 'MONTH');
          END;
        END LOOP;
        SELECT SUBSTR(v_month, 2, LENGTH(v_month)) INTO v_month FROM DUAL;
        v_daysofmonth := '';
        FOR item IN (SELECT DISTINCT (SCHEDULE_DAY)
                       FROM TRANSACTION_SCHEDULE_CALENDAR
                      where batch_id = v_parenttableref) LOOP
          BEGIN
            v_daysofmonth := v_daysofmonth || ',' || item.SCHEDULE_DAY;
          END;
        END LOOP;
        --select listagg(TO_CHAR(TO_DATE(SCHEDULE_MONTH, 'MM'), 'MONTH'), ', ') within group(order by SCHEDULE_MONTH) INTO v_month from TRANSACTION_SCHEDULE_CALENDAR where batch_id=v_parenttableid;
        --select listagg(SCHEDULE_DAY, ', ') within group(order by SCHEDULE_DAY) INTO v_daysofmonth from TRANSACTION_SCHEDULE_CALENDAR where batch_id=v_parenttableid;
        SELECT SCHEDULE_TIME
          INTO v_scheduletime
          from TRANSACTION_SCHEDULE_CALENDAR
         where batch_id = v_parenttableref
           AND ROWNUM < 2;
      
        select v_month || ' on day(s) ' || v_daysofmonth
          INTO v_days
          from dual;
      
      end if;
      select count(1)
        into v_isSalaryUpload
        from TRANSACTION_SCHEDULE_SUMMARY
       where BATCH_ID = v_parenttableref
         and UPLOAD_FILENAME is not null;
    
      IF (v_scheduletypeid = '1') THEN
        if (v_isSalaryUpload > 0) then
        
          if (p_view_only = 'Y') then
            open o_refcursor for
            
              select b.bnk_name         Beneficiary_Bank,
                     a.cr_account_no    Beneficiary_Account,
                     a.beneficiary_name Beneficiary_Name,
                     a.amount           Amount,
                     a.narration,
                     v_startdate        AS Start_Date,
                     v_enddate          AS End_Date,
                     v_scheduletype     AS Schedule_Type,
                     v_scheduleoption   AS Schedule_Option,
                     v_days             as Schedule_Days,
                     v_scheduletime     as Execution_Time,
                     --b.name Payment_Type              
                     maker.first_name || ' ' || maker.last_name CreatedBy,
                     to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
              
              --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
              --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
              
                from TRANSACTION_SCHEDULE_DETAIL a,
                     -- ref_payment_types b
                     user_profile            maker,
                     user_profile            rejectby,
                     newibank.RIB_BANKS_LIST b
               where a.batch_id = v_parenttableref
                 and a.bank_code = b.nibsscode(+)
                 and a.rejected_by = rejectby.user_id(+)
                    --a.payment_type_id=b.payment_type_id
                 and a.created_by = maker.user_id;
            return o_refcursor;
          else
            open o_refcursor for
              select decode(p_view_only,
                            'Y',
                            ' ',
                            case a.processing_status
                              when '99' then
                               '<span style="color:red" title="' ||
                               rejectby.first_name || ' ' ||
                               rejectby.last_name || '">Declined<span>'
                            
                              else
                               '<input type="radio" name="row' ||
                               a.batch_detail_id || '" value="' ||
                               a.batch_detail_id ||
                               '~~1" class="radioa radioApprove">'
                            end) APPM7NBAT1,
                     decode(p_view_only,
                            'Y',
                            ' ',
                            case a.processing_status
                              when '99' then
                               ''
                              else
                               '<input type="radio" name="row' ||
                               a.batch_detail_id ||
                               '" class="radioa radioReject" value="' ||
                               a.batch_detail_id || '~~2">'
                            end) REJX8YBAT2,
							b.bnk_name      Beneficiary_Bank,
                     a.cr_account_no Beneficiary_Account,
                     
                     a.amount Amount,
                     a.narration,
                     a.beneficiary_name Uploaded_Name,
                     a.NE_CUST_NAME Actual_Name,
                     case NAME_VALIDATION_MATCH_STATUS
                       when '01' then
                        '<span style="color:red">FAILED<span>'
                       when '02' then
                        '<span style="color:#D2691E;">NOT MATCHED<span>'
                       when '03' then
                        '<span style="color:#DAA520;">PARTIAL MATCH<span>'
                       when '04' then
                        '<span style="color:green;">FULL MATCH<span>'
                       else
                        ''
                     end Name_Validation,
                     v_startdate AS Start_Date,
                     v_enddate AS End_Date,
                     v_scheduletype AS Schedule_Type,
                     v_scheduleoption AS Schedule_Option,
                     v_days as Schedule_Days,
                     v_scheduletime as Execution_Time,
                     --b.name Payment_Type              
                     maker.first_name || ' ' || maker.last_name CreatedBy,
                     to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                     --this should not be visible to view only
                     
              --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
              --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
              
                from TRANSACTION_SCHEDULE_DETAIL a,
                     -- ref_payment_types b
                     user_profile maker,
                     user_profile rejectby,
                     
                     newibank.RIB_BANKS_LIST b
               where a.batch_id = v_parenttableref
                 and a.bank_code = b.nibsscode(+)
                 and a.rejected_by = rejectby.user_id(+)
                    --a.payment_type_id=b.payment_type_id
                 and a.created_by = maker.user_id
               ORDER BY NAME_VALIDATION_MATCH_STATUS ASC;
            return o_refcursor;
          end if;
        else
          if (p_view_only = 'Y') then
            open o_refcursor for
            
              select b.bnk_name         Beneficiary_Bank,
                     a.cr_account_no    Beneficiary_Account,
                     a.beneficiary_name Beneficiary_Name,
                     a.amount           Amount,
                     a.narration,
                     v_startdate        AS Start_Date,
                     v_enddate          AS End_Date,
                     v_scheduletype     AS Schedule_Type,
                     v_scheduleoption   AS Schedule_Option,
                     v_days             as Schedule_Days,
                     v_scheduletime     as Execution_Time,
                     --b.name Payment_Type              
                     maker.first_name || ' ' || maker.last_name CreatedBy,
                     to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
              
              --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
              --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
              
                from TRANSACTION_SCHEDULE_DETAIL a,
                     -- ref_payment_types b
                     user_profile maker,
                     user_profile rejectby,
                     
                     newibank.RIB_BANKS_LIST b
               where a.batch_id = v_parenttableref
                 and a.bank_code = b.nibsscode(+)
                 and a.rejected_by = rejectby.user_id(+)
                    --a.payment_type_id=b.payment_type_id
                 and a.created_by = maker.user_id;
            return o_refcursor;
          else
            open o_refcursor for
              select  decode(p_view_only,
                            'Y',
                            ' ',
                            case a.processing_status
                              when '99' then
                               '<span style="color:red" title="' ||
                               rejectby.first_name || ' ' ||
                               rejectby.last_name || '">Declined<span>'
                            
                              else
                               '<input type="radio" name="row' ||
                               a.batch_detail_id || '" value="' ||
                               a.batch_detail_id ||
                               '~~1" class="radioa radioApprove">'
                            end) APPM7NBAT1,
                     decode(p_view_only,
                            'Y',
                            ' ',
                            case a.processing_status
                              when '99' then
                               ''
                              else
                               '<input type="radio" name="row' ||
                               a.batch_detail_id ||
                               '" class="radioa radioReject" value="' ||
                               a.batch_detail_id || '~~2">'
                            end) REJX8YBAT2,
							b.bnk_name         Beneficiary_Bank,
                     a.cr_account_no    Beneficiary_Account,
                     a.beneficiary_name Beneficiary_Name,
                     a.amount           Amount,
                     a.narration,
                     v_startdate        AS Start_Date,
                     v_enddate          AS End_Date,
                     v_scheduletype     AS Schedule_Type,
                     v_scheduleoption   AS Schedule_Option,
                     v_days             as Schedule_Days,
                     v_scheduletime     as Execution_Time,
                     --b.name Payment_Type              
                     maker.first_name || ' ' || maker.last_name CreatedBy,
                     to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                     --this should not be visible to view only
                    
              --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
              --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
              
                from TRANSACTION_SCHEDULE_DETAIL a,
                     -- ref_payment_types b
                     user_profile maker,
                     user_profile rejectby,
                     
                     newibank.RIB_BANKS_LIST b
               where a.batch_id = v_parenttableref
                 and a.bank_code = b.nibsscode(+)
                 and a.rejected_by = rejectby.user_id(+)
                    --a.payment_type_id=b.payment_type_id
                 and a.created_by = maker.user_id;
            return o_refcursor;
          end if;
        
        end if;
      ELSIF (v_scheduletypeid = '2') THEN
      
        if (v_isSalaryUpload > 0) then
        
          if (p_view_only = 'Y') then
            open o_refcursor for
            
              select b.bnk_name         Beneficiary_Bank,
                     a.cr_account_no    Beneficiary_Account,
                     a.beneficiary_name Beneficiary_Name,
                     a.amount           Amount,
                     a.narration,
                     v_startdate        AS Start_Date,
                     v_enddate          AS End_Date,
                     v_scheduletype     AS Schedule_Type,
                     v_scheduleoption   AS Schedule_Option,
                     v_days             as Schedule_Days,
                     v_scheduletime     as Execution_Time,
                     v_sweepoption      as Sweep_Option,
                     v_sweepvariable    as Sweep_Option_Value,
                     --b.name Payment_Type              
                     maker.first_name || ' ' || maker.last_name CreatedBy,
                     to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
              
              --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
              --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
              
                from TRANSACTION_SCHEDULE_DETAIL a,
                     -- ref_payment_types b
                     user_profile            maker,
                     user_profile            rejectby,
                     newibank.RIB_BANKS_LIST b
               where a.batch_id = v_parenttableref
                 and a.bank_code = b.nibsscode(+)
                 and a.rejected_by = rejectby.user_id(+)
                    --a.payment_type_id=b.payment_type_id
                 and a.created_by = maker.user_id;
            return o_refcursor;
          else
            open o_refcursor for
              select decode(p_view_only,
                            'Y',
                            ' ',
                            case a.processing_status
                              when '99' then
                               '<span style="color:red" title="' ||
                               rejectby.first_name || ' ' ||
                               rejectby.last_name || '">Declined<span>'
                            
                              else
                               '<input type="radio" name="row' ||
                               a.batch_detail_id || '" value="' ||
                               a.batch_detail_id ||
                               '~~1" class="radioa radioApprove">'
                            end) APPM7NBAT1,
                     decode(p_view_only,
                            'Y',
                            ' ',
                            case a.processing_status
                              when '99' then
                               ''
                              else
                               '<input type="radio" name="row' ||
                               a.batch_detail_id ||
                               '" class="radioa radioReject" value="' ||
                               a.batch_detail_id || '~~2">'
                            end) REJX8YBAT2,
							b.bnk_name      Beneficiary_Bank,
                     a.cr_account_no Beneficiary_Account,
                     
                     a.amount Amount,
                     a.narration,
                     a.beneficiary_name Uploaded_Name,
                     a.NE_CUST_NAME Actual_Name,
                     case NAME_VALIDATION_MATCH_STATUS
                       when '01' then
                        '<span style="color:red">FAILED<span>'
                       when '02' then
                        '<span style="color:#D2691E;">NOT MATCHED<span>'
                       when '03' then
                        '<span style="color:#DAA520;">PARTIAL MATCH<span>'
                       when '04' then
                        '<span style="color:green;">FULL MATCH<span>'
                       else
                        ''
                     end Name_Validation,
                     
                     v_startdate      AS Start_Date,
                     v_enddate        AS End_Date,
                     v_scheduletype   AS Schedule_Type,
                     v_scheduleoption AS Schedule_Option,
                     v_days           as Schedule_Days,
                     v_scheduletime   as Execution_Time,
                     v_sweepoption    as Sweep_Option,
                     v_sweepvariable  as Sweep_Option_Value,
                     --b.name Payment_Type              
                     maker.first_name || ' ' || maker.last_name CreatedBy,
                     to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                     --this should not be visible to view only
                     
              --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
              --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
              
                from TRANSACTION_SCHEDULE_DETAIL a,
                     -- ref_payment_types b
                     user_profile maker,
                     user_profile rejectby,
                     
                     newibank.RIB_BANKS_LIST b
               where a.batch_id = v_parenttableref
                 and a.bank_code = b.nibsscode(+)
                 and a.rejected_by = rejectby.user_id(+)
                    --a.payment_type_id=b.payment_type_id
                 and a.created_by = maker.user_id
               ORDER BY NAME_VALIDATION_MATCH_STATUS ASC;
            return o_refcursor;
          end if;
        else
          if (p_view_only = 'Y') then
            open o_refcursor for
            
              select b.bnk_name         Beneficiary_Bank,
                     a.cr_account_no    Beneficiary_Account,
                     a.beneficiary_name Beneficiary_Name,
                     a.amount           Amount,
                     a.narration,
                     v_startdate        AS Start_Date,
                     v_enddate          AS End_Date,
                     v_scheduletype     AS Schedule_Type,
                     v_scheduleoption   AS Schedule_Option,
                     v_days             as Schedule_Days,
                     v_scheduletime     as Execution_Time,
                     v_sweepoption      as Sweep_Option,
                     v_sweepvariable    as Sweep_Option_Value,
                     --b.name Payment_Type              
                     maker.first_name || ' ' || maker.last_name CreatedBy,
                     to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
              
              --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
              --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
              
                from TRANSACTION_SCHEDULE_DETAIL a,
                     -- ref_payment_types b
                     user_profile maker,
                     user_profile rejectby,
                     
                     newibank.RIB_BANKS_LIST b
               where a.batch_id = v_parenttableref
                 and a.bank_code = b.nibsscode(+)
                 and a.rejected_by = rejectby.user_id(+)
                    --a.payment_type_id=b.payment_type_id
                 and a.created_by = maker.user_id;
            return o_refcursor;
          else
            open o_refcursor for
              select  decode(p_view_only,
                            'Y',
                            ' ',
                            case a.processing_status
                              when '99' then
                               '<span style="color:red" title="' ||
                               rejectby.first_name || ' ' ||
                               rejectby.last_name || '">Declined<span>'
                            
                              else
                               '<input type="radio" name="row' ||
                               a.batch_detail_id || '" value="' ||
                               a.batch_detail_id ||
                               '~~1" class="radioa radioApprove">'
                            end) APPM7NBAT1,
                     decode(p_view_only,
                            'Y',
                            ' ',
                            case a.processing_status
                              when '99' then
                               ''
                              else
                               '<input type="radio" name="row' ||
                               a.batch_detail_id ||
                               '" class="radioa radioReject" value="' ||
                               a.batch_detail_id || '~~2">'
                            end) REJX8YBAT2,
							b.bnk_name         Beneficiary_Bank,
                     a.cr_account_no    Beneficiary_Account,
                     a.beneficiary_name Beneficiary_Name,
                     a.amount           Amount,
                     a.narration,
                     v_startdate        AS Start_Date,
                     v_enddate          AS End_Date,
                     v_scheduletype     AS Schedule_Type,
                     v_scheduleoption   AS Schedule_Option,
                     v_days             as Schedule_Days,
                     v_scheduletime     as Execution_Time,
                     v_sweepoption      as Sweep_Option,
                     v_sweepvariable    as Sweep_Option_Value,
                     --b.name Payment_Type              
                     maker.first_name || ' ' || maker.last_name CreatedBy,
                     to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
                     --this should not be visible to view only
                    
              --'' as   "Approve All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkApproveAll()>",
              --'' as  "Reject All<input type =''checkbox'' id =''approveall'' value=''approving'' onclick=checkRejectAll()>"
              
                from TRANSACTION_SCHEDULE_DETAIL a,
                     -- ref_payment_types b
                     user_profile maker,
                     user_profile rejectby,
                     
                     newibank.RIB_BANKS_LIST b
               where a.batch_id = v_parenttableref
                 and a.bank_code = b.nibsscode(+)
                 and a.rejected_by = rejectby.user_id(+)
                    --a.payment_type_id=b.payment_type_id
                 and a.created_by = maker.user_id;
            return o_refcursor;
          end if;
        
        end if;
      
      END IF;
    
    elsif (v_ptrantype = '26') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.transaction_limit_amount Transaction_Limit_Amount,
               a.daily_limit_amount Daily_Limit_Amount,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from corporate_limits_req a,
               corporate_profile    b,
               user_profile         maker
         where a.request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '27') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.NO_OF_LEAFLETS Number_Of_Leaflets,
               a.NO_OF_BOOKLETS No_Of_Booklets,
               a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from cheque_book_requests a,
               corporate_profile    b,
               user_profile         maker
         where a.request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
      
       elsif (v_ptrantype = '45') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.CARD_TYPE card_type,
              
               a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from CARD_REQUESTS a,
               corporate_profile    b,
               user_profile         maker
         where a.card_request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
	  
	  elsif (v_ptrantype = '46') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.START_CHEQUE_NUMBER,
			   a.END_CHEQUE_NUMBER,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from STOP_CHEQUE_REQUESTS a,
               corporate_profile    b,
               user_profile         maker
         where a.REQUEST_ID = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
	  
	  elsif (v_ptrantype = '47') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.CARD_PAN,
			   a.ACTION,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from EXPENSE_CARD_REQUESTS a,
               corporate_profile    b,
               user_profile         maker
         where a.CARD_REQUEST_ID = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
	  
	  elsif (v_ptrantype = '48') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.STAFF_NUMBER,
			   a.STAFF_MOBILE,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from HR_QUICK_RESPONSE a,
               corporate_profile    b,
               user_profile         maker
         where a.REQUEST_ID = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
	  
    
    elsif (v_ptrantype = '28') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.AMOUNT Amount,
               a.BENEFICIARY_NAME Beneficiary_Name,
               a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from MANAGERS_CHEQUE_REQUESTS a,
               corporate_profile        b,
               user_profile             maker
         where a.request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '30') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.AMOUNT Amount,
               a.ISSUANCE_DATE issuance_date,
               a.BENEFICIARY_NAME Beneficiary_Name,
               a.PURPOSE_OF_ISSUANCE Purpose_Of_Issuance,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from CHEQUE_CONFIRMATION_REQUESTS a,
               corporate_profile            b,
               user_profile                 maker
         where a.request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    elsif (v_ptrantype = '39') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.AMOUNT Amount,
               a.BENEFICIARY_NAME Beneficiary_Name,
               a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from MANAGERS_CHEQUE_REQUESTS_TEMP a,
               corporate_profile             b,
               user_profile                  maker
         where a.request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    elsif (v_ptrantype = '40') then
      open o_refcursor for
		
		 select decode(p_view_only,
                      'Y',
                      ' ',
                      case 'dummy'
                        when '99' then
                         '<span style="color:red" title="' ||
                         maker.first_name || ' ' || maker.last_name ||
                         '">Declined<span>'
                      
                        else
                         '<input type="radio" name="row' || a.fx_trf_request_id ||
                         '" value="' || a.fx_trf_request_id ||
                         '~~1" class="radioa radioApprove">'
                      end) APPM7NBAT1,
               decode(p_view_only,
                      'Y',
                      ' ',
                      case 'dummy'
                        when '99' then
                         ''
                        else
                         '<input type="radio" name="row' || a.fx_trf_request_id ||
                         '" class="radioa radioReject" value="' ||
                         a.fx_trf_request_id || '~~2">'
                      end) REJX8YBAT2,
		
		
		b.name             Corporate_Name,
               a.account_Number   Account_Number,
               a.transfer_amount  Amount,
               a.BENEFICIARY_NAME Beneficiary_Name,
               --a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from intl_FX_TRANSFER_REQUESTS a,
               corporate_profile         b,
               user_profile              maker
         where a.fx_trf_request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
		   
		  
		   
      return o_refcursor;
    
    elsif (v_ptrantype = '41') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.account_Number debit_Account_Number,
               a.account_name debit_Account_name,
               a.amount Amount,
               a.payer_NAME payer_Name,
               a.narration description,
               formatdate(a.start_date) start_date,
               formatdate(a.end_date) end_date,
               --a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created,
               '' mandate,
               '<a href="/sec/DownloadManDoc?id=' || a.MANDATE_ID ||
               '">Download</a>',
               '<a href="/sec/DownloadManDoc?id=' || a.file_content ||
               '">Download2</a>'
          from direct_dr_mandate_requests a,
               corporate_profile          b,
               user_profile               maker
         where a.mandate_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (v_ptrantype = '42') then
      open o_refcursor for
        select decode(p_view_only,
                      'Y',
                      ' ',
                      case 'dummy'
                        when '99' then
                         '<span style="color:red" title="' ||
                         rejectby.first_name || ' ' || rejectby.last_name ||
                         '">Declined<span>'
                      
                        else
                         '<input type="radio" name="row' || a.mandate_id ||
                         '" value="' || a.mandate_id ||
                         '~~1" class="radioa radioApprove">'
                      end) APPM7NBAT1,
               decode(p_view_only,
                      'Y',
                      ' ',
                      case 'dummy'
                        when '99' then
                         ''
                        else
                         '<input type="radio" name="row' || a.mandate_id ||
                         '" class="radioa radioReject" value="' ||
                         a.mandate_id || '~~2">'
                      end) REJX8YBAT2,
					  b.name Corporate_Name,
               a.account_Number debit_Account_Number,
               a.account_name debit_Account_name,
               a.amount Amount,
               a.payer_NAME payer_Name,
               a.narration description,
               formatdate(a.start_date) start_date,
               formatdate(a.end_date) end_date,
               --a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created,
               '' mandate,
               '<a href="/sec/DownloadManDoc?id=' || a.MANDATE_ID ||
               '">Download</a>'
               --this should not be visible to view only
               
          from direct_dr_mandate_requests a,
               corporate_profile          b,
               user_profile               maker,
               user_profile               rejectby
         where a.batch_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id
           and a.approved_by = rejectby.user_id(+);
      return o_refcursor;
    --#ee start
    elsif (v_ptrantype = '43') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.payday_loan_ref Reference,
               a.AMOUNT Amount,
               a.target_account_number Beneficiary_Account,
               
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from cibank.payday_loans a,
               corporate_profile             b,
               user_profile                  maker
         where a.payday_loan_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
      elsif (v_ptrantype = '44') then
      open o_refcursor for
        select decode(p_view_only,
                      'Y',
                      ' ',
                      case 'dummy'
                        when '99' then
                         '<span style="color:red" title="' ||
                         maker.first_name || ' ' || maker.last_name ||
                         '">Declined<span>'
                      
                        else
                         '<input type="radio" name="row' || a.id ||
                         '" value="' || a.id ||
                         '~~1" class="radioa radioApprove">'
                      end) APPM7NBAT1,
               decode(p_view_only,
                      'Y',
                      ' ',
                      case 'dummy'
                        when '99' then
                         ''
                        else
                         '<input type="radio" name="row' || a.id ||
                         '" class="radioa radioReject" value="' ||
                         a.id || '~~2">'
                      end) REJX8YBAT2,
		
		
		b.name Corporate_Name,
               a.account_number Account_Number,
               a.AMOUNT Amount,
               a.tenor tenor_in_months,
--               a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from cibank.fixed_deposits a,
               corporate_profile             b,
               user_profile                  maker
         where a.id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
      
       
      elsif (v_ptrantype = '45') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.account_no Account_Number,
              a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from cibank.CARD_REQUESTS a,
               corporate_profile             b,
               user_profile                  maker
         where a.card_request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
	  
	   elsif (v_ptrantype = '46') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.account_no Account_Number,
			   a.START_CHEQUE_NUMBER ,
              a.END_CHEQUE_NUMBER ,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from cibank.STOP_CHEQUE_REQUESTS a,
               corporate_profile             b,
               user_profile                  maker
         where a.request_id = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
	  
	  elsif (v_ptrantype = '47') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.account_no Account_Number,
			   a.CARD_PAN ,
              a.ACTION ,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from cibank.EXPENSE_CARD_REQUESTS a,
               corporate_profile             b,
               user_profile                  maker
         where a.CARD_REQUEST_ID = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
	  
	   elsif (v_ptrantype = '48') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.account_no Account_Number,
			   a.STAFF_NUMBER ,
              a.STAFF_NAME ,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from cibank.HR_QUICK_RESPONSE a,
               corporate_profile             b,
               user_profile                  maker
         where a.REQUEST_ID = v_parenttableid
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    --#ee end
    END IF;
  END getTranDetailsByScheduleID;


  PROCEDURE updateParentTable(p_requesttype   IN VARCHAR2,
                              p_parenttableid IN VARCHAR2,
                              p_scheduleid    IN NUMBER,
                              p_menuid        IN VARCHAR2,
                              p_approved_by   varchar2,
                              p_response_code OUT VARCHAR2) AS
    v_trantype                 VARCHAR2(100);
    p_narration                VARCHAR2(300);
    p_amount                   NUMBER(18, 2);
    p_dr_acct                  VARCHAR2(20);
    v_corpid                   VARCHAR2(100);
    v_menutype                 VARCHAR2(100);
    v_isfinancialmenu          VARCHAR2(100);
    v_moduleid                 VARCHAR2(100);
    v_postingoption            VARCHAR2(100);
    v_maintableid              VARCHAR2(100);
    v_postingoptionbulk        VARCHAR2(100);
    v_payment_channel_id       VARCHAR2(100); --#sprint2
    v_err_message              VARCHAR2(2000);
    v_parenttableid            VARCHAR2(200); --ph2sprint1
    r_approval_signatories_req APPROVAL_ROUTE_SIGNATORIES_REQ%rowtype;
    r_departments_req          departments_req%rowtype;
    r_user_profile_req         USER_PROFILE_REQ%rowtype;
    r_roles_req                roles_req%rowtype;
    r_user_role_req            USER_ROLE_req%rowtype;
    r_approval_route_req       APPROVAL_ROUTE_REQ%rowtype;
    --r_approval_route_req             APPROVAL_ROUTE_REQ%rowtype;
  
    r_corporate_account_req       corporate_account_req%rowtype;
    r_appmenuroles_req            APPMENUROLES_REQ%rowtype;
    r_approval_groups_users_req   APPROVAL_GROUPS_USERS_REQ%rowtype;
    r_approval_groups_req         APPROVAL_GROUPS_REQ%rowtype;
    r_user_account_access_req     user_account_access_req%rowtype;
    r_CORPORATE_DISCOUNTS_req     corporate_discounts_req%rowtype;
    r_HOLDING_ACCOUNTS_req        holding_accounts_req%rowtype;
    r_corporate_terminals_req     corporate_terminals_req%rowtype;
    r_corporate_limits_req        corporate_limits_req%rowtype;
    r_corporate_beneficiaries_req corporate_beneficiaries_req%rowtype;
  BEGIN
    p_response_code := '00~~FINAL APPROVAL WAS SUCCESSFUL';
    SELECT ISTRANSACTION_MENU, TRANSACTION_TYPE, MENU_TYPE_ID, MODULE_ID
      INTO v_isfinancialmenu, v_trantype, v_menutype, v_moduleid
      FROM MENU
     WHERE MENUID = p_menuid;
  
    IF ((v_trantype = '1') OR (v_trantype = '2') OR (v_trantype = '3') OR
       (v_trantype = '25') OR (v_trantype = '17') OR (v_trantype = '35') OR
       (v_trantype = '36')) THEN
      --TRANSFERS
      /*SELECT 'TRANSFER REQUEST FROM ACCOUNT ' || DR_ACCOUNT || ' (' ||
            NO_OF_RECORD || ' RECORDS',
            TOTAL_TRAN_AMOUNT,
            DR_ACCOUNT
       INTO p_narration, p_amount, p_dr_acct
       FROM TRANSACTION_BATCH_SUMMARY
      WHERE BATCH_ID = p_parenttableid;*/
      -- insert into idvalid values('dyyy',p_parenttableid);
      -- commit;
      --#sprint2
      select POSTING_OPTION_ID, PAYMENT_CHANNEL_ID
        into v_postingoptionbulk, v_payment_channel_id
        from TRANSACTION_BATCH_SUMMARY
       where BATCH_ID = p_parenttableid;
      update TRANSACTION_BATCH_SUMMARY
         set APPROVAL_STATUS_ID = 2,
             APPROVED_DATE      = SYSDATE,
             approved_by        = p_approved_by,
             PROCESSING_STATUS  = '22'
       where BATCH_ID = p_parenttableid;
    
      IF (v_postingoptionbulk = '1') THEN
        IF (v_trantype = '25') THEN
          update TRANSACTION_BATCH_DETAIL
             set APPROVAL_STATUS_ID = 2,
                 APPROVED_DATE      = sysdate,
                 approved_by        = p_approved_by,
                 --PROCESSING_STATUS  = '-2'
                 PROCESSING_STATUS = '03',
                 NE_RESPONSE_CODE  = 'N/A'
           where BATCH_ID = p_parenttableid
             AND PROCESSING_STATUS NOT IN ('99');
        ELSE
          --#sprint2
          IF (v_payment_channel_id IN ('2', '3')) THEN
            --NAPS,NEFT
            update TRANSACTION_BATCH_DETAIL
               set APPROVAL_STATUS_ID = 2,
                   APPROVED_DATE      = sysdate,
                   approved_by        = p_approved_by,
                   -- NE_RESPONSE_CODE   = 'N/A',
                   PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                         when 'N' then
                                          '01'
                                         when 'Y' then
                                          '03'
                                       end
             where BATCH_ID = p_parenttableid
               and NE_RESPONSE_CODE = '99' --correct
               AND PROCESSING_STATUS NOT IN ('99');
          
            update TRANSACTION_BATCH_DETAIL
               set APPROVAL_STATUS_ID = 2,
                   APPROVED_DATE      = sysdate,
                   approved_by        = p_approved_by,
                   -- NE_RESPONSE_CODE   = 'N/A',
                   PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                         when 'N' then
                                          '03'
                                         when 'Y' then
                                          '03'
                                       end
             where BATCH_ID = p_parenttableid
               and NE_RESPONSE_CODE = '00'
               AND PROCESSING_STATUS NOT IN ('99');
          --ELSIF (v_payment_channel_id IN ('1')) THEN
           ELSIF (v_payment_channel_id IN ('1','5')) THEN --nip,rtgs phase3 sprint1
            --#sprint2 --NIP
            update TRANSACTION_BATCH_DETAIL
               set APPROVAL_STATUS_ID = 2,
                   APPROVED_DATE      = sysdate,
                   approved_by        = p_approved_by,
                   PROCESSING_STATUS  = case ISINTERBANK_TRANSFER
                                          when 'N' then
                                           '01'
                                          when 'Y' then
                                           '02'
                                        end
             where BATCH_ID = p_parenttableid
               and NE_RESPONSE_CODE = '99'
               AND PROCESSING_STATUS NOT IN ('99');
            update TRANSACTION_BATCH_DETAIL
               set APPROVAL_STATUS_ID = 2,
                   APPROVED_DATE      = sysdate,
                   approved_by        = p_approved_by,
                   PROCESSING_STATUS  = case ISINTERBANK_TRANSFER
                                          when 'N' then
                                           '03'
                                          when 'Y' then
                                           '03'
                                        end
             where BATCH_ID = p_parenttableid
               and NE_RESPONSE_CODE = '00'
               AND PROCESSING_STATUS NOT IN ('99');
            --and ISINTERBANK_TRANSFER = 'N';
          END IF;
        END IF;
      ELSIF (v_postingoptionbulk = '2') THEN
      
        update TRANSACTION_BATCH_DETAIL
           set APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               APPROVED_DATE      = sysdate
        
         where BATCH_ID = p_parenttableid
           AND PROCESSING_STATUS NOT IN ('99');
      END IF;
      --ph2sprint1
    ELSIF ((v_trantype = '31')) THEN
    
      --ph2sprint1
      select PARENT_TABLE_ID
        into v_parenttableid
        from TRANSACTION_SCHED_SUMMARY_REQ
       where REQUEST_TABLE_ID = p_parenttableid;
      update TRANSACTION_SCHED_SUMMARY_REQ
         set APPROVAL_STATUS_ID = 2,
             LAST_MODIFIED_BY   = p_approved_by,
             LAST_MODIFIED_DATE = SYSDATE
       where REQUEST_TABLE_ID = p_parenttableid;
      IF (p_requesttype = '11') THEN
        select POSTING_OPTION_ID, PAYMENT_CHANNEL_ID
          into v_postingoptionbulk, v_payment_channel_id
          from TRANSACTION_SCHEDULE_SUMMARY
         where BATCH_ID = v_parenttableid;
        update TRANSACTION_SCHEDULE_SUMMARY
           set APPROVAL_STATUS_ID = 2,
               record_STATUS_ID   = 2,
               APPROVED_DATE      = SYSDATE,
               approved_by        = p_approved_by,
               PROCESSING_STATUS  = '22'
         where BATCH_ID = v_parenttableid;
      
        IF (v_postingoptionbulk = '1') THEN
          --  IF (v_trantype = '25') THEN
          /*update TRANSACTION_SCHEDULE_DETAIL
            set APPROVAL_STATUS_ID = 2,
                APPROVED_DATE      = sysdate,
                approved_by        = p_approved_by,
                --PROCESSING_STATUS  = '-2'
                PROCESSING_STATUS = '03',
                NE_RESPONSE_CODE  = 'N/A'
          where BATCH_ID = p_parenttableid
            AND PROCESSING_STATUS NOT IN ('99');*/
          -- ELSE
          --#sprint2
          IF (v_payment_channel_id IN ('2', '3')) THEN
            --NAPS,NEFT
            update TRANSACTION_SCHEDULE_DETAIL
               set APPROVAL_STATUS_ID = 2,
                   APPROVED_DATE      = sysdate,
                   approved_by        = p_approved_by,
                   -- NE_RESPONSE_CODE   = 'N/A',
                   PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                         when 'N' then
                                          '01'
                                         when 'Y' then
                                          '03'
                                       end
             where BATCH_ID = v_parenttableid
               and NE_RESPONSE_CODE = '99' --correct
               AND PROCESSING_STATUS NOT IN ('99');
          
            update TRANSACTION_SCHEDULE_DETAIL
               set APPROVAL_STATUS_ID = 2,
                   APPROVED_DATE      = sysdate,
                   approved_by        = p_approved_by,
                   -- NE_RESPONSE_CODE   = 'N/A',
                   PROCESSING_STATUS = case ISINTERBANK_TRANSFER
                                         when 'N' then
                                          '03'
                                         when 'Y' then
                                          '03'
                                       end
             where BATCH_ID = v_parenttableid
               and NE_RESPONSE_CODE = '00'
               AND PROCESSING_STATUS NOT IN ('99');
          ELSIF (v_payment_channel_id IN ('1')) THEN
            --#sprint2 --NIP
            update TRANSACTION_SCHEDULE_DETAIL
               set APPROVAL_STATUS_ID = 2,
                   APPROVED_DATE      = sysdate,
                   approved_by        = p_approved_by,
                   PROCESSING_STATUS  = case ISINTERBANK_TRANSFER
                                          when 'N' then
                                           '01'
                                          when 'Y' then
                                           '02'
                                        end
             where BATCH_ID = v_parenttableid
               and NE_RESPONSE_CODE = '99'
               AND PROCESSING_STATUS NOT IN ('99');
            update TRANSACTION_SCHEDULE_DETAIL
               set APPROVAL_STATUS_ID = 2,
                   APPROVED_DATE      = sysdate,
                   approved_by        = p_approved_by,
                   PROCESSING_STATUS  = case ISINTERBANK_TRANSFER
                                          when 'N' then
                                           '03'
                                          when 'Y' then
                                           '03'
                                        end
             where BATCH_ID = v_parenttableid
               and NE_RESPONSE_CODE = '00'
               AND PROCESSING_STATUS NOT IN ('99');
            --and ISINTERBANK_TRANSFER = 'N';
            --END IF;
          END IF;
        ELSIF (v_postingoptionbulk = '2') THEN
        
          update TRANSACTION_SCHEDULE_DETAIL
             set APPROVAL_STATUS_ID = 2,
                 approved_by        = p_approved_by,
                 APPROVED_DATE      = sysdate
          
           where BATCH_ID = v_parenttableid
             AND PROCESSING_STATUS NOT IN ('99');
        
        END IF;
      
      ELSE
        IF (p_requesttype = '13') THEN
          update TRANSACTION_SCHEDULE_SUMMARY
             set RECORD_STATUS_ID   = 4,
                 LAST_MODIFIED_DATE = SYSDATE,
                 LAST_MODIFIED_BY   = p_approved_by
          
           where BATCH_ID = v_parenttableid;
        ELSIF (p_requesttype = '14') THEN
          update TRANSACTION_SCHEDULE_SUMMARY
             set RECORD_STATUS_ID   = 3,
                 LAST_MODIFIED_DATE = SYSDATE,
                 LAST_MODIFIED_BY   = p_approved_by
          
           where BATCH_ID = v_parenttableid;
        ELSIF (p_requesttype = '15') THEN
          update TRANSACTION_SCHEDULE_SUMMARY
             set RECORD_STATUS_ID   = 2,
                 LAST_MODIFIED_DATE = SYSDATE,
                 LAST_MODIFIED_BY   = p_approved_by
          
           where BATCH_ID = v_parenttableid;
        END IF;
      END IF;
      --update  TRANSACTION_BATCH_DETAIL set 
      --APPROVAL_STATUS_ID=2,APPROVED_DATE=sysdate,PROCESSING_STATUS='02' where BATCH_ID=p_parenttableid and ISINTERBANK_TRANSFER='Y' ;
    
    ELSIF (v_trantype = '4') THEN
      SELECT PARENT_TABLE_ID
        INTO v_maintableid
        FROM CORPORATE_PROFILE_REQ
       WHERE CORP_REQ_ID = p_parenttableid;
    
      --p_scheduleid
      insert into CORPORATE_PROFILE_TRAIL
        select * from CORPORATE_PROFILE where CORP_ID = v_maintableid;
      -- p_response_code := '10~~LAST OPERATION COMPLETED';
      update CORPORATE_PROFILE_REQ a
         set APPROVAL_STATUS_ID = 2
       WHERE CORP_REQ_ID = p_parenttableid;
      IF (p_requesttype = '11') -- NEW RECORD APPROVAL
       THEN
        update CORPORATE_PROFILE
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               APPROVED_DATE      = SYSDATE,
               approved_by        = p_approved_by,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CORP_ID = v_maintableid;
      
      ELSIF (p_requesttype = '12') THEN
        --EDIT APPROVAL
      
        FOR item IN (SELECT *
                       FROM CORPORATE_PROFILE_REQ
                      WHERE CORP_REQ_ID = p_parenttableid) LOOP
          BEGIN
            --v_corpid :=p_CORP_ID;   
            UPDATE CORPORATE_PROFILE
               SET MOBILE_PHONE_NO       = item.MOBILE_PHONE_NO,
                   REQUEST_TABLE_ID      = item.CORP_REQ_ID,
                   EMAIL                 = item.EMAIL,
                   LAST_MODIFIED_DATE    = SYSDATE,
                   OFFICE_PHONE_NO       = item.OFFICE_PHONE_NO,
                   POSTING_OPTION_ID     = item.POSTING_OPTION_ID,
                   HOLDING_ACCOUNT_ID    = item.HOLDING_ACCOUNT_ID,
                   AUTO_APPROVAL_ENABLED = item.AUTO_APPROVAL_ENABLED,
                   has_token             = item.has_token,
                   corporate_type_id     = item.corporate_type_id,
                   -- NAME               = item.NAME ,
                   RM_EMAIL = item.RM_EMAIL,
                   -- CORPORATE_ID       = p_CORPORATE_ID ,
                   ADDRESS               = item.ADDRESS,
                   is_a_solepropriator   = item.is_a_solepropriator,
                   enable_Verifier_Token = item.enable_Verifier_Token,
                   enable_Inputter_Token = item.enable_Inputter_Token,
                   authorizer_Token_Flag = item.authorizer_Token_Flag,
                   narration_option_id   = item.narration_option_id,
                   REQUEST_TYPE_ID       = p_requesttype,
                   approved_by           = p_approved_by,
                   approved_date         = sysdate,
                   RECORD_STATUS_ID      = 2,
                   APPROVAL_STATUS_ID    = 2
            -- APPROVAL_COMMENT   = p_APPROVAL_COMMENT ,
            --APPROVED_BY        = p_APPROVED_BY
             WHERE CORP_ID = v_maintableid;
          END;
        END LOOP;
      
      ELSIF (p_requesttype = '13') --DELETE APPROVAL
       THEN
        update CORPORATE_PROFILE
           set RECORD_STATUS_ID = 4,
               approved_by      = p_approved_by,
               approved_date    = sysdate,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CORP_ID = v_maintableid;
      ELSIF (p_requesttype = '14') --DEACTIVATION APPROVAL
       THEN
        update CORPORATE_PROFILE
           set RECORD_STATUS_ID = 3,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CORP_ID = v_maintableid;
      ELSIF (p_requesttype = '15') --REACTIVATION REQUEST
       THEN
        update CORPORATE_PROFILE
           set RECORD_STATUS_ID = 2,
               approved_by      = p_approved_by,
               approved_date    = sysdate,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CORP_ID = v_maintableid;
      END IF;
    
    ELSIF (v_trantype = '5') THEN
    
      SELECT *
        into r_user_profile_req
        FROM USER_PROFILE_REQ
       WHERE USER_ID_REQ = p_parenttableid;
    
      --p_scheduleid
      insert into USER_PROFILE_TRAIL
        select *
          from USER_PROFILE
         where USER_ID = r_user_profile_req.Parent_Table_Id;
    
      update USER_PROFILE_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE USER_ID_REQ = p_parenttableid;
    
      update USER_PROFILE a
         set LAST_MODIFIED_BY = p_approved_by, LAST_MODIFIED_DATE = SYSDATE
       where USER_ID = r_user_profile_req.Parent_Table_Id;
      -- insert into TESTVAL(VALU) values(p_approved_by||'/'||SYSDATE||'/'||p_requesttype||'/'||r_user_profile_req.Parent_Table_Id);
      --COMMIT;
      IF (p_requesttype = '11') -- NEW
       THEN
      
        declare
          plain_pwd  varchar(500);
          hashed_pwd varchar(1000);
        begin
          plain_pwd := generatePassword;
        
          hashed_pwd := generateSha512(plain_pwd,
                                       lower(r_user_profile_req.username));
        
          -- insert into idvalid
          --values
          --  (r_user_profile_req.username, plain_pwd);
        
          update USER_PROFILE a
             set RECORD_STATUS_ID   = 2,
                 APPROVAL_STATUS_ID = 2,
                 approval_by        = p_approved_by,
                 approval_date      = sysdate,
                 user_password      = hashed_pwd,
                 REQUEST_TYPE_ID    = p_requesttype,
                 REQUEST_TABLE_ID   = p_parenttableid,
                 LAST_MODIFIED_BY   = p_approved_by,
                 LAST_MODIFIED_DATE = SYSDATE
           where USER_ID = r_user_profile_req.Parent_Table_Id;
          --sendPwd2User(r_user_profile_req.first_name, r_user_profile_req.mobile_phone_no,plain_pwd,getCorporateDefaultAccount(r_user_profile_req.corp_id));
          if (r_user_profile_req.corp_id <> 1) then
            sendPwd2User(r_user_profile_req.first_name,
                         r_user_profile_req.mobile_phone_no,
                         plain_pwd,
                         getCorporateDefaultAccount(r_user_profile_req.corp_id),
                         r_user_profile_req.user_id,
                         'N');
          end if;
        
        end;
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update USER_PROFILE
           set FIRST_NAME             = r_user_profile_req.First_Name,
               LAST_NAME              = r_user_profile_req.Last_Name,
               MIDDLE_NAME            = r_user_profile_req.Middle_Name,
               EMAIL                  = r_user_profile_req.Email,
               DEPT_ID                = r_user_profile_req.dept_id,
               APPROVAL_LIMIT         = r_user_profile_req.approval_limit,
               HAS_GLOBAL_ACCT_ACCESS = r_user_profile_req.has_global_acct_access,
               IS_SIGNATORY           = r_user_profile_req.is_signatory,
               TOKEN_TYPE_ID          = r_user_profile_req.token_type_id,
               ADDRESS                = r_user_profile_req.address,
               OFFICE_PHONE_NO        = r_user_profile_req.office_phone_no,
               MOBILE_PHONE_NO        = r_user_profile_req.mobile_phone_no,
               JOB_TITLE              = r_user_profile_req.job_title,
               
               -- added by oawe to enable operator to modify corporate username
               username = r_user_profile_req.username,
               
               --AUTO_APPROVAL_ENABLED = r_user_profile_req.AUTO_APPROVAL_ENABLED,
               enable_token = r_user_profile_req.enable_token,
               --token_delivered       = r_user_profile_req.token_delivered,
               --security_token_flag=r_user_profile_req.security_token_flag,
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               LAST_MODIFIED_BY   = p_approved_by,
               --user_password=r_user_profile_req.user_password,
               --change_password=r_user_profile_req.change_password,
               REQUEST_TYPE_ID   = p_requesttype,
               REQUEST_TABLE_ID  = p_parenttableid,
               VIEW_ACCT_BALANCE = r_user_profile_req.VIEW_ACCT_BALANCE,
               approval_by       = p_approved_by,
               approval_date     = sysdate
         where USER_ID = r_user_profile_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update USER_PROFILE
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               LAST_MODIFIED_BY   = p_approved_by,
               username           = CASE p_requesttype
                                      when '13' then
                                       username || '_deleted'
                                      else
                                       username
                                    end,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid,
               approval_by        = p_approved_by,
               approval_date      = sysdate
         where USER_ID = r_user_profile_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '6') THEN
    
      SELECT *
        into r_user_role_req
        FROM USER_ROLE_REQ
       WHERE request_id = p_parenttableid;
    
      --p_scheduleid
      insert into USER_Role_TRAIL
        select *
          from USER_role
         where user_role_id = r_user_role_req.Parent_Table_Id;
    
      update USER_ROLE_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE request_id = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update USER_ROLE
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where user_role_id = r_user_role_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update USER_ROLE
           set role_id            = r_user_role_req.Role_Id,
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where user_role_id = r_user_role_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update USER_ROLE
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where user_role_id = r_user_role_req.Parent_Table_Id;
      
      END IF;
    
      ---- corporate account
    ELSIF (v_trantype = '7') THEN
    
      SELECT *
        into r_corporate_account_req
        FROM CORPORATE_ACCOUNT_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into CORPORATE_ACCOUNT_TRAIL
        select *
          from CORPORATE_ACCOUNT
         where CORP_ACCT_ID = r_corporate_account_req.Parent_Table_Id;
    
      update CORPORATE_ACCOUNT_REQ
         set APPROVAL_STATUS_ID = 2,
             approved_by        = p_approved_by,
             approved_date      = sysdate
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update CORPORATE_ACCOUNT
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CORP_ACCT_ID = r_corporate_account_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update CORPORATE_ACCOUNT
           set ACCOUNT_NUMBER     = r_corporate_account_req.ACCOUNT_NUMBER,
               ACCOUNT_NAME       = r_corporate_account_req.ACCOUNT_NAME,
               ACCOUNT_TYPE       = r_corporate_account_req.ACCOUNT_TYPE,
               RM_NAME            = r_corporate_account_req.RM_NAME,
               RM_CODE            = r_corporate_account_req.RM_CODE,
               RM_EMAIL           = r_corporate_account_req.RM_EMAIL,
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CORP_ACCT_ID = r_corporate_account_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update CORPORATE_ACCOUNT
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               account_number     = CASE p_requesttype
                                      when '13' then
                                       account_number || '_' || corp_acct_id
                                      else
                                       account_number
                                    end,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CORP_ACCT_ID = r_corporate_account_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '8') THEN
    
      SELECT *
        into r_roles_req
        FROM ROLES_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into ROLES_TRAIL
        select * from ROLES where ROLE_ID = r_roles_req.Parent_Table_Id;
    
      update ROLES_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update ROLES
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where ROLE_ID = r_roles_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update ROLES
           set NAME         = r_roles_req.NAME,
               ROLE_TYPE_ID = r_roles_req.ROLE_TYPE_ID,
               --IS_DEFAULT_SYSTEM_ROLE=r_roles_req.is_default_system_role
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where ROLE_ID = r_roles_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update ROLES
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where ROLE_ID = r_roles_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '9') THEN
    
      SELECT *
        into r_departments_req
        FROM DEPARTMENTS_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into DEPARTMENTS_TRAIL
        select *
          from DEPARTMENTS
         where DEPT_ID = r_departments_req.Parent_Table_Id;
    
      update DEPARTMENTS_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update DEPARTMENTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where DEPT_ID = r_departments_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update DEPARTMENTS
           set NAME        = r_departments_req.NAME,
               DESCRIPTION = r_departments_req.DESCRIPTION,
               
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where DEPT_ID = r_departments_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update DEPARTMENTS
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where DEPT_ID = r_departments_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '11') THEN
    
      SELECT *
        into r_appmenuroles_req
        FROM APPMENUROLES_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into APPMENUROLES_TRAIL
        select *
          from APPMENUROLES
         where APPMENUROLEID = r_appmenuroles_req.Parent_Table_Id;
    
      update APPMENUROLES_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update APPMENUROLES
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where APPMENUROLEID = r_appmenuroles_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update APPMENUROLES
           set APPMENUID = r_appmenuroles_req.APPMENUID,
               ROLEID    = r_appmenuroles_req.ROLEID,
               
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LASTMODIFIED_DATE  = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where APPMENUROLEID = r_appmenuroles_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update APPMENUROLES
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LASTMODIFIED_DATE = SYSDATE,
               approved_by       = p_approved_by,
               approved_date     = sysdate,
               REQUEST_TYPE_ID   = p_requesttype,
               REQUEST_TABLE_ID  = p_parenttableid
         where APPMENUROLEID = r_appmenuroles_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '12') THEN
    
      SELECT *
        into r_user_account_access_req
        FROM USER_ACCOUNT_ACCESS_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into USER_ACCOUNT_ACCESS_TRAIL
        select *
          from USER_ACCOUNT_ACCESS
         where ACCOUNT_ACCESS_ID =
               r_user_account_access_req.Parent_Table_Id;
    
      update USER_ACCOUNT_ACCESS_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update USER_ACCOUNT_ACCESS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where ACCOUNT_ACCESS_ID =
               r_user_account_access_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update USER_ACCOUNT_ACCESS
           set CORP_ACCT_ID = r_user_account_access_req.CORP_ACCT_ID,
               --ROLEID    = r_user_account_access_req.ROLEID,
               ACCOUNT_RIGHTS     = r_user_account_access_req.ACCOUNT_RIGHTS,
               TRANSFER_LIMIT     = r_user_account_access_req.TRANSFER_LIMIT,
               VIEW_BALANCE       = r_user_account_access_req.VIEW_BALANCE,
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where ACCOUNT_ACCESS_ID =
               r_user_account_access_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update USER_ACCOUNT_ACCESS
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where ACCOUNT_ACCESS_ID =
               r_user_account_access_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '13') THEN
    
      SELECT *
        into r_approval_groups_req
        FROM APPROVAL_GROUPS_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into APPROVAL_GROUPS_TRAIL
        select *
          from APPROVAL_GROUPS
         where GROUP_ID = r_approval_groups_req.Parent_Table_Id;
    
      update APPROVAL_GROUPS_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update APPROVAL_GROUPS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where GROUP_ID = r_approval_groups_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update APPROVAL_GROUPS
           set NAME        = r_approval_groups_req.NAME,
               DESCRIPTION = r_approval_groups_req.DESCRIPTION,
               
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where GROUP_ID = r_approval_groups_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update APPROVAL_GROUPS
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where GROUP_ID = r_approval_groups_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '14') THEN
    
      SELECT *
        into r_approval_groups_users_req
        FROM APPROVAL_GROUPS_USERS_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into APPROVAL_GROUPS_USERS_TRAIL
        select *
          from APPROVAL_GROUPS_USERS
         where APPROVAL_GROUPS_USERS_ID =
               r_approval_groups_users_req.Parent_Table_Id;
    
      update APPROVAL_GROUPS_USERS_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update APPROVAL_GROUPS_USERS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               --approval_by=p_approved_by,
               approved_date    = sysdate,
               REQUEST_TYPE_ID  = p_requesttype,
               REQUEST_TABLE_ID = p_parenttableid
         where APPROVAL_GROUPS_USERS_ID =
               r_approval_groups_users_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update APPROVAL_GROUPS_USERS
           set USER_ID            = r_approval_groups_users_req.USER_ID,
               GROUPS_USERS_TYPE  = r_approval_groups_users_req.GROUPS_USERS_TYPE,
               DEPT_ID            = r_approval_groups_users_req.DEPT_ID,
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               --approved_by=p_approved_by,
               approved_date    = sysdate,
               REQUEST_TYPE_ID  = p_requesttype,
               REQUEST_TABLE_ID = p_parenttableid
         where APPROVAL_GROUPS_USERS_ID =
               r_approval_groups_users_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update APPROVAL_GROUPS_USERS
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               --approved_by=p_approved_by,
               approved_date    = sysdate,
               REQUEST_TYPE_ID  = p_requesttype,
               REQUEST_TABLE_ID = p_parenttableid
         where APPROVAL_GROUPS_USERS_ID =
               r_approval_groups_users_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '15') THEN
      --manage approval route
    
      SELECT *
        into r_approval_route_req
        FROM APPROVAL_ROUTE_REQ
       WHERE APPROVAL_ROUTE_ID_req = p_parenttableid;
    
      --p_scheduleid
      insert into APPROVAL_ROUTE_TRAIL
        select *
          from APPROVAL_ROUTE
         where APPROVAL_ROUTE_ID = r_approval_route_req.Parent_Table_Id;
    
      update APPROVAL_ROUTE_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE APPROVAL_ROUTE_ID_REQ = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update APPROVAL_ROUTE
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where APPROVAL_ROUTE_ID = r_approval_route_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update APPROVAL_ROUTE
           set ROUTE_TYPE_ID          = r_approval_route_req.ROUTE_TYPE_ID,
               TRAN_TYPE_ID           = r_approval_route_req.TRAN_TYPE_ID,
               CORP_ACCT_ID           = r_approval_route_req.CORP_ACCT_ID,
               ISGLOBAL_ACCTRULE      = r_approval_route_req.ISGLOBAL_ACCTRULE,
               NO_OF_SIGNATORIES      = r_approval_route_req.NO_OF_SIGNATORIES,
               no_of_approval_levels  = r_approval_route_req.no_of_approval_levels,
               IS_APPROVAL_SEQUENTIAL = r_approval_route_req.IS_APPROVAL_SEQUENTIAL,
               ISFINANCIAL            = r_approval_route_req.ISFINANCIAL,
               MODULE_ID              = r_approval_route_req.MODULE_ID,
               ISMODULERULE           = r_approval_route_req.ISMODULERULE,
               ISGLOBALRULE           = r_approval_route_req.ISGLOBALRULE,
               APPROVAL_OPTIONS_ID    = r_approval_route_req.APPROVAL_OPTIONS_ID,
               DEPARTMENT_ID          = r_approval_route_req.DEPARTMENT_ID,
               ROUTE_NAME             = r_approval_route_req.ROUTE_NAME,
               ROUTE_DESC             = r_approval_route_req.ROUTE_DESC,
               RECORD_STATUS_ID       = 2,
               APPROVAL_STATUS_ID     = 2,
               LAST_MODIFIED_DATE     = SYSDATE,
               approved_by            = p_approved_by,
               approved_date          = sysdate,
               REQUEST_TYPE_ID        = p_requesttype,
               REQUEST_TABLE_ID       = p_parenttableid,
               is_amount_rule         = r_approval_route_req.is_amount_rule,
               start_amount           = r_approval_route_req.start_amount,
               end_amount             = r_approval_route_req.end_amount
         where APPROVAL_ROUTE_ID = r_approval_route_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update APPROVAL_ROUTE
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where APPROVAL_ROUTE_ID = r_approval_route_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '16') THEN
      --MANAGE APPROVAL SIGNATORIES
      --manage approval route
    
      SELECT *
        into r_approval_signatories_req
        FROM APPROVAL_ROUTE_SIGNATORIES_REQ
       WHERE ROUTE_SIGNATORY_REQ_ID = p_parenttableid;
    
      --p_scheduleid
      insert into APPROVAL_ROUTE_SIGNAT_TRAIL
        select *
          from APPROVAL_ROUTE_SIGNATORIES
         where ROUTE_SIGNATORY_ID =
               r_approval_signatories_req.Parent_Table_Id;
    
      update APPROVAL_ROUTE_SIGNATORIES_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE ROUTE_SIGNATORY_REQ_ID = p_parenttableid;
    
      /* delete from approval_groups_users a
         where a.approval_group_id in(  
         select x.group_id from approval_groups x
         where target_approval_route_sign_id=r_approval_signatories_req.route_signatory_id;
      )
         
         delete from approval_groups
         where target_approval_route_sign_id=r_approval_signatories_req.route_signatory_id;
      
      insert into approval_groups_users
      select * from approval_groups_users_req a
         where a.approval_group_id in(  
         select x.group_id from approval_groups x
         where target_approval_route_sign_id=r_approval_signatories_req.route_signatory_id;
      )
         
         delete from approval_groups
         where target_approval_route_sign_id=r_approval_signatories_req.route_signatory_id;
      */
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update APPROVAL_ROUTE_SIGNATORIES
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where ROUTE_SIGNATORY_ID =
               r_approval_signatories_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update APPROVAL_ROUTE_SIGNATORIES
           SET LAST_MODIFIED_BY             = r_approval_signatories_req.CREATED_BY,
               NO_OF_SIGNATORIES_FOR_LEVEL  = r_approval_signatories_req.NO_OF_SIGNATORIES_FOR_LEVEL,
               ROUTEID                      = r_approval_signatories_req.ROUTEID,
               APPROVAL_LEVEL               = r_approval_signatories_req.APPROVAL_LEVEL,
               GROUP_USERS_APPROVAL_ORDERED = r_approval_signatories_req.GROUP_USERS_APPROVAL_ORDERED,
               APPROVER_ROUTE_TYPEID        = r_approval_signatories_req.APPROVER_ROUTE_TYPEID,
               CAN_ANY_GROUP_USER_APPROVE   = r_approval_signatories_req.CAN_ANY_GROUP_USER_APPROVE,
               EXPECTED_GROUP_APPROVER_ID   = r_approval_signatories_req.EXPECTED_GROUP_APPROVER_ID,
               EXPECTED_USER_APPROVER_ID    = r_approval_signatories_req.EXPECTED_USER_APPROVER_ID,
               SIGNATORY_TYPE_ID            = r_approval_signatories_req.SIGNATORY_TYPE_ID,
               APPLY_APPROVAL_LIMIT         = r_approval_signatories_req.APPLY_APPROVAL_LIMIT,
               RECORD_STATUS_ID             = 2,
               APPROVAL_STATUS_ID           = 2,
               LAST_MODIFIED_DATE           = SYSDATE,
               approved_by                  = p_approved_by,
               approved_date                = sysdate,
               REQUEST_TYPE_ID              = p_requesttype,
               REQUEST_TABLE_ID             = p_parenttableid
         where ROUTE_SIGNATORY_ID =
               r_approval_signatories_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update APPROVAL_ROUTE_SIGNATORIES
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where ROUTE_SIGNATORY_ID =
               r_approval_signatories_req.Parent_Table_Id;
      
      ELSIF (v_trantype = '17') THEN
        --PAYMENTS
      
        update TRANSACTION_BATCH_SUMMARY
           set APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate
         WHERE BATCH_ID = p_parenttableid;
      
        --update TRANSACTION_BATCH_DETAIL set RECORD_STATUS_ID
      
        select CORP_ID
          into v_corpid
          from TRANSACTION_BATCH_SUMMARY
         where BATCH_ID = p_parenttableid;
      
        select POSTING_OPTION_ID
          into v_postingoption
          from CORPORATE_PROFILE
         where corp_id = v_corpid;
      
        IF (v_postingoption = '2') THEN
          -- SINGLE DEBIT
          update TRANSACTION_BATCH_DETAIL
             set APPROVAL_STATUS_ID = 2,
                 approved_by        = p_approved_by,
                 approved_date      = sysdate,
                 
                 PROCESSING_STATUS = '-1'
           where BATCH_ID = p_parenttableid;
        ELSIF (v_postingoption = '1') THEN
          --MULTIPLE DEBIT
          update TRANSACTION_BATCH_DETAIL
             set APPROVAL_STATUS_ID = 2,
                 approved_by        = p_approved_by,
                 approved_date      = sysdate,
                 PROCESSING_STATUS  = '01'
          -- POST_REF_NO= 'B/'||BATCH_DETAIL_ID
           where BATCH_ID = p_parenttableid
             AND ISINTERBANK_TRANSFER = 'N';
          update TRANSACTION_BATCH_DETAIL
             set APPROVAL_STATUS_ID = 2,
                 approved_by        = p_approved_by,
                 approved_date      = sysdate,
                 PROCESSING_STATUS  = '02'
          -- POST_REF_NO= '000018'||TO_CHAR(SYSDATE, 'YYMMDDHHMMSS')||LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL, 12, '0')
           where BATCH_ID = p_parenttableid
             AND ISINTERBANK_TRANSFER = 'Y';
        END IF;
      END IF;
    
    ELSIF (v_trantype = '18') THEN
    
      SELECT *
        into r_CORPORATE_DISCOUNTS_req
        FROM CORPORATE_DISCOUNTS_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into CORPORATE_DISCOUNTS_TRAIL
        select *
          from CORPORATE_DISCOUNTS
         where CHARGE_DISCOUNT_ID =
               r_CORPORATE_DISCOUNTS_req.Parent_Table_Id;
    
      update CORPORATE_DISCOUNTS_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update CORPORATE_DISCOUNTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CHARGE_DISCOUNT_ID =
               r_CORPORATE_DISCOUNTS_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update CORPORATE_DISCOUNTS
           set PAYMENT_TYPE_ID     = r_CORPORATE_DISCOUNTS_req.PAYMENT_TYPE_ID,
               PERCENTAGE_DISCOUNT = r_CORPORATE_DISCOUNTS_req.PERCENTAGE_DISCOUNT,
               
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CHARGE_DISCOUNT_ID =
               r_CORPORATE_DISCOUNTS_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update CORPORATE_DISCOUNTS
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CHARGE_DISCOUNT_ID =
               r_CORPORATE_DISCOUNTS_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '19') THEN
    
      SELECT *
        into r_HOLDING_ACCOUNTS_req
        FROM HOLDING_ACCOUNTS_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into HOLDING_ACCOUNTS_TRAIL
        select *
          from HOLDING_ACCOUNTS
         where HOLDING_ACCOUNT_ID = r_HOLDING_ACCOUNTS_req.Parent_Table_Id;
    
      update HOLDING_ACCOUNTS_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update HOLDING_ACCOUNTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where HOLDING_ACCOUNT_ID = r_HOLDING_ACCOUNTS_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update HOLDING_ACCOUNTS
           set ACCOUNT_NO    = r_HOLDING_ACCOUNTS_req.ACCOUNT_NO,
               ACCOUNT_TYPE  = r_HOLDING_ACCOUNTS_req.ACCOUNT_TYPE,
               NAME          = r_HOLDING_ACCOUNTS_req.NAME,
               BRANCH_CODE   = r_HOLDING_ACCOUNTS_req.BRANCH_CODE,
               CURRENCY_CODE = r_HOLDING_ACCOUNTS_req.CURRENCY_CODE,
               
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where HOLDING_ACCOUNT_ID = r_HOLDING_ACCOUNTS_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update HOLDING_ACCOUNTS
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where HOLDING_ACCOUNT_ID = r_HOLDING_ACCOUNTS_req.Parent_Table_Id;
      
      END IF;
    
    ELSIF (v_trantype = '20') THEN
    
      SELECT *
        into r_corporate_terminals_req
        FROM corporate_terminals_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into corporate_terminals_TRAIL
        select *
          from corporate_terminals a
         where a.corp_terminal_id =
               r_corporate_terminals_req.Parent_Table_Id;
    
      update CORPORATE_TERMINALS_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update corporate_terminals
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               
               approved_by      = p_approved_by,
               approved_date    = sysdate,
               REQUEST_TYPE_ID  = p_requesttype,
               REQUEST_TABLE_ID = p_parenttableid
         where corp_terminal_id = r_corporate_terminals_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update corporate_terminals
           set merchant_id = r_corporate_terminals_req.merchant_id,
               terminal_id = r_corporate_terminals_req.terminal_id,
               outlet_name = r_corporate_terminals_req.outlet_name,
               
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where corp_terminal_id = r_corporate_terminals_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update corporate_terminals
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where corp_terminal_id = r_corporate_terminals_req.Parent_Table_Id;
      
      end if;
    
    ELSIF (v_trantype = '23') THEN
    
      /*SELECT *
       into r_corporate_beneficiaries_req
       FROM corporate_beneficiaries_req a
      WHERE a.batch_id = p_parenttableid and rownum<2;*/
    
      --p_scheduleid
    
      insert into corporate_beneficiaries_trail
        select *
          from corporate_beneficiaries a
         where a.beneficiary_id in (
                                    
                                    SELECT Parent_Table_Id
                                    
                                      FROM corporate_beneficiaries_req a
                                     WHERE a.batch_id = p_parenttableid
                                    
                                    );
    
      update corporate_beneficiaries_req a
         set APPROVAL_STATUS_ID = 2
       WHERE a.batch_id = p_parenttableid;
    
      FOR item IN (SELECT *
                     FROM corporate_beneficiaries_req
                    WHERE batch_id = p_parenttableid) LOOP
        IF (p_requesttype = '11') -- NEW
         THEN
          update corporate_beneficiaries
             set RECORD_STATUS_ID   = 2,
                 APPROVAL_STATUS_ID = 2,
                 approved_by        = p_approved_by,
                 approved_date      = sysdate,
                 REQUEST_TYPE_ID    = p_requesttype,
                 REQUEST_TABLE_ID   = p_parenttableid
           where beneficiary_id = item.parent_table_id;
        
        elsIF (p_requesttype = '12') -- EDIT
         THEN
        
          update corporate_beneficiaries
             set preferred_name       = item.preferred_name,
                 beneficiary_code     = item.beneficiary_code,
                 beneficiary_category = item.beneficiary_category,
                 beneficiary_email    = item.beneficiary_email,
                 RECORD_STATUS_ID     = 2,
                 APPROVAL_STATUS_ID   = 2,
                 LAST_MODIFIED_DATE   = SYSDATE,
                 approved_by          = p_approved_by,
                 approved_date        = sysdate,
                 REQUEST_TYPE_ID      = p_requesttype,
                 REQUEST_TABLE_ID     = p_parenttableid
           where beneficiary_id = item.Parent_Table_Id;
        
        ELSIF (p_requesttype in ('13', '14', '15')) THEN
          -- p_response_code := '10~~LAST OPERATION COMPLETED';
        
          update corporate_beneficiaries
             set RECORD_STATUS_ID = CASE p_requesttype
                                      WHEN '13' THEN
                                       3
                                      WHEN '14' THEN
                                       2
                                      WHEN '15' THEN
                                       4
                                    END,
                 -- APPROVAL_STATUS_ID = 2,
                 LAST_MODIFIED_DATE = SYSDATE,
                 approved_by        = p_approved_by,
                 approved_date      = sysdate,
                 REQUEST_TYPE_ID    = p_requesttype,
                 REQUEST_TABLE_ID   = p_parenttableid
           where beneficiary_id = item.Parent_Table_Id;
        
        end if;
      end loop;
    
    ELSIF (v_trantype = '24') THEN
    
      --p_scheduleid
      insert into APPROVAL_ROUTE_TYPE_PR_TRAIL
        select *
          from APPROVAL_ROUTE_TYPE_PRIORITY a
         where a.ROUTE_TYPE_PRIORITY_ID in
               (
                
                SELECT Parent_Table_Id
                
                  FROM APPROVAL_ROUTE_TYPE_PR_REQ a
                 WHERE a.batch_id = p_parenttableid
                
                );
    
      update APPROVAL_ROUTE_TYPE_PR_REQ a
         set APPROVAL_STATUS_ID = 2
       WHERE a.batch_id = p_parenttableid;
    
      FOR item IN (SELECT *
                     FROM APPROVAL_ROUTE_TYPE_PR_REQ
                    WHERE batch_id = p_parenttableid) LOOP
      
        IF (p_requesttype = '11') -- NEW
         THEN
          update APPROVAL_ROUTE_TYPE_PRIORITY
             set RECORD_STATUS_ID   = 2,
                 APPROVAL_STATUS_ID = 2,
                 approved_by        = p_approved_by,
                 approved_date      = sysdate,
                 REQUEST_TYPE_ID    = p_requesttype,
                 REQUEST_TABLE_ID   = item.request_id -- p_parenttableid
           where ROUTE_TYPE_PRIORITY_ID = item.Parent_Table_Id;
        
        elsIF (p_requesttype = '12') -- EDIT
         THEN
        
          update APPROVAL_ROUTE_TYPE_PRIORITY
             set -- APPROVAL_ROUTE_TYPE_ID       = item.APPROVAL_ROUTE_TYPE_ID,
                 PRIORITY_NO = item.PRIORITY_NO,
                 
                 RECORD_STATUS_ID   = 2,
                 APPROVAL_STATUS_ID = 2,
                 LAST_MODIFIED_DATE = SYSDATE,
                 approved_by        = p_approved_by,
                 approved_date      = sysdate,
                 REQUEST_TYPE_ID    = p_requesttype,
                 REQUEST_TABLE_ID   = item.request_id -- p_parenttableid
           where ROUTE_TYPE_PRIORITY_ID = item.Parent_Table_Id;
        
        ELSIF (p_requesttype in ('13', '14', '15')) THEN
          -- p_response_code := '10~~LAST OPERATION COMPLETED';
        
          update APPROVAL_ROUTE_TYPE_PRIORITY
             set RECORD_STATUS_ID = CASE p_requesttype
                                      WHEN '13' THEN
                                       3
                                      WHEN '14' THEN
                                       2
                                      WHEN '15' THEN
                                       4
                                    END,
                 -- APPROVAL_STATUS_ID = 2,
                 LAST_MODIFIED_DATE = SYSDATE,
                 approved_by        = p_approved_by,
                 approved_date      = sysdate,
                 REQUEST_TYPE_ID    = p_requesttype,
                 REQUEST_TABLE_ID   = item.request_id -- p_parenttableid
           where ROUTE_TYPE_PRIORITY_ID = item.Parent_Table_Id;
        
        end if;
      
      end loop;
    
    ELSIF (v_trantype = '26') THEN
    
      SELECT *
        into r_corporate_limits_req
        FROM corporate_limits_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      insert into corporate_limits_TRAIL
        select *
          from corporate_limits a
         where a.corp_limit_id = r_corporate_limits_req.Parent_Table_Id;
    
      update CORPORATE_limits_REQ
         set APPROVAL_STATUS_ID = 2
       WHERE REQUEST_ID = p_parenttableid;
    
      IF (p_requesttype = '11') -- NEW
       THEN
        update corporate_limits
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where corp_limit_id = r_corporate_limits_req.Parent_Table_Id;
      
      elsIF (p_requesttype = '12') -- EDIT
       THEN
      
        update corporate_limits
           set transaction_limit_amount = r_corporate_limits_req.transaction_limit_amount,
               daily_limit_amount       = r_corporate_limits_req.daily_limit_amount,
               transaction_limit_count  = r_corporate_limits_req.transaction_limit_count,
               daily_limit_count        = r_corporate_limits_req.daily_limit_count,
               target_corporate_type_id = r_corporate_limits_req.target_corporate_type_id,
               
               RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where corp_limit_id = r_corporate_limits_req.Parent_Table_Id;
      
      ELSIF (p_requesttype in ('13', '14', '15')) THEN
        -- p_response_code := '10~~LAST OPERATION COMPLETED';
      
        update corporate_limits
           set RECORD_STATUS_ID = CASE p_requesttype
                                    WHEN '13' THEN
                                     3
                                    WHEN '14' THEN
                                     2
                                    WHEN '15' THEN
                                     4
                                  END,
               -- APPROVAL_STATUS_ID = 2,
               LAST_MODIFIED_DATE = SYSDATE,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where corp_limit_id = r_corporate_limits_req.Parent_Table_Id;
      
      end if;
    
    ELSIF (v_trantype = '27') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update cheque_book_requests
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where request_id = p_parenttableid;
      
      end if;
      
       ELSIF (v_trantype = '45') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update CARD_REQUESTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where card_request_id = p_parenttableid;
      
      end if;
	  
	  ELSIF (v_trantype = '46') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update STOP_CHEQUE_REQUESTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where request_id = p_parenttableid;
      
      end if;
	  
	  ELSIF (v_trantype = '47') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update EXPENSE_CARD_REQUESTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where CARD_REQUEST_ID = p_parenttableid;
      
      end if;
	  
	   ELSIF (v_trantype = '48') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update HR_QUICK_RESPONSE
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where REQUEST_ID = p_parenttableid;
      
      end if;
    
    ELSIF (v_trantype = '27') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update cheque_book_requests
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where request_id = p_parenttableid;
      
      end if;
    
    ELSIF (v_trantype = '28') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update MANAGERS_CHEQUE_REQUESTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where request_id = p_parenttableid;
      
      end if;
    
    ELSIF (v_trantype = '30') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update CHEQUE_CONFIRMATION_REQUESTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where request_id = p_parenttableid;
      
      end if;
    
    ELSIF (v_trantype = '33') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update change_card_Status_requests
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where service_request_id = p_parenttableid;
      
      end if;
    
    ELSIF (v_trantype = '34') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update set_Card_limit_requests
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where service_request_id = p_parenttableid;
      
      end if;
    
    ELSIF (v_trantype = '39') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
      
        declare
          v_MANAGERS_CHEQUE_REQ_temp MANAGERS_CHEQUE_REQUESTS_temp%rowtype;
        begin
          select *
            into v_MANAGERS_CHEQUE_REQ_temp
            from MANAGERS_CHEQUE_REQUESTS_temp
           where request_id = p_parenttableid;
        
          update MANAGERS_CHEQUE_REQUESTS
             set RECORD_STATUS_ID   = 2,
                 APPROVAL_STATUS_ID = 2,
                 approval_by        = p_approved_by,
                 approval_date      = sysdate,
                 REQUEST_TYPE_ID    = p_requesttype,
                 REQUEST_TABLE_ID   = p_parenttableid
           WHERE batch_id = v_MANAGERS_CHEQUE_REQ_temp.batch_id;
        end;
      end if;
    
    ELSIF (v_trantype = '40') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
      
        insert into newibank.rib_sr_fx_trf_request_dtls
          (FX_TRF_REQUEST_ID,
           ACCOUNT_NUMBER,
           ACCOUNT_CURRENCY,
           TRANSFER_AMOUNT,
           CHARGE_OPTION,
           BENEFICIARY_NAME,
           BENEFICIARY_ADDRESS,
           BENEFICIARY_BANK_NAME,
           BENEFICIARY_BANK_ADDRESS,
           IBAN_CODE,
           SWIFT_CODE,
           PURPOSE_OF_PAYMENT,
           SORT_CODE,
           INT_BANK_ACCOUNT_NUMBER,
           INT_BANK_IBAN_CODE,
           INT_BANK_SWIFT_CODE,
           INT_BANK_SORT_CODE,
           SUMMARY_REQUEST_ID,
           DEL_FLG,
           REMITTERADDRESS,
           REMITTEREMAIL,
           PURPOSEOFPAYMENTOTHERS,
           CHANNEL)
          select FX_TRF_REQUEST_ID,
                 ACCOUNT_NUMBER,
                 ACCOUNT_CURRENCY,
                 TRANSFER_AMOUNT,
                 CHARGE_OPTION,
                 BENEFICIARY_NAME,
                 BENEFICIARY_ADDRESS,
                 BENEFICIARY_BANK_NAME,
                 BENEFICIARY_BANK_ADDRESS,
                 IBAN_CODE,
                 SWIFT_CODE,
                 PURPOSE_OF_PAYMENT,
                 SORT_CODE,
                 INT_BANK_ACCOUNT_NUMBER,
                 INT_BANK_IBAN_CODE,
                 INT_BANK_SWIFT_CODE,
                 INT_BANK_SORT_CODE,
                 SUMMARY_REQUEST_ID,
                 DEL_FLG,
                 REMITTERADDRESS,
                 REMITTEREMAIL,
                 PURPOSEOFPAYMENTOTHERS,
                 'CIBANK'
            from intl_FX_TRANSFER_REQUESTS
           where fx_trf_request_id = p_parenttableid;
      
        update intl_FX_TRANSFER_REQUESTS
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where fx_trf_request_id = p_parenttableid;
      
      end if;
    
    ELSIF (v_trantype = '41') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update direct_dr_mandate_requests
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where mandate_id = p_parenttableid;
      
      end if;
    
    ELSIF (v_trantype = '42') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
      
        update direct_dr_mandate_requests
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype /*,
                                                       REQUEST_TABLE_ID   = p_parenttableid*/
         where batch_id = p_parenttableid
              --to exempt records already declined
           and nvl(approval_status_id, 0) <> 3;
        update upload_batch_master
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approved_by        = p_approved_by,
               approved_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype /*,
                                                       REQUEST_TABLE_ID   = p_parenttableid*/
         where batch_id = p_parenttableid;
      
      end if;
    
    --#ee begin
    ELSIF (v_trantype = '43') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update cibank.payday_loans x
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where x.payday_loan_id = p_parenttableid;
      
      end if;
      ELSIF (v_trantype = '44') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update cibank.fixed_deposits x
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,PROCESSING_STATUS='22',
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where x.id = p_parenttableid;
      
      end if;
      
      ELSIF (v_trantype = '45') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update cibank.CARD_REQUESTS x
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where x.card_request_id = p_parenttableid;
      
      end if;
	  
	  ELSIF (v_trantype = '46') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update cibank.STOP_CHEQUE_REQUESTS x
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where x.request_id = p_parenttableid;
      
      end if;
	  
	  ELSIF (v_trantype = '47') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update cibank.EXPENSE_CARD_REQUESTS x
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where x.CARD_REQUEST_ID = p_parenttableid;
      
      end if;
	  
	  ELSIF (v_trantype = '48') THEN
      IF (p_requesttype = '11') -- NEW
       THEN
        update cibank.HR_QUICK_RESPONSE x
           set RECORD_STATUS_ID   = 2,
               APPROVAL_STATUS_ID = 2,
               approval_by        = p_approved_by,
               approval_date      = sysdate,
               REQUEST_TYPE_ID    = p_requesttype,
               REQUEST_TABLE_ID   = p_parenttableid
         where x.REQUEST_ID = p_parenttableid;
      
      end if;
    --#ee end
    
    ELSE
      p_response_code := '10~~LAST OPERATION COMPLETED';
    END IF;
  
    -- DBMS_output.PUT_LINE('fee is '||p_Fee);
  
    --p_response_code := '00';
    --commit;
    --RETURN p_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      -- Consider logging the error and then re-raise
      v_err_message := SQLERRM;
      cib_ibank_sr_pkg.logerror(DBMS_UTILITY.format_error_backtrace ||
                                v_err_message,
                                'TRANTYPE:' || v_trantype);
      /* INSERT INTO rib_sr_error_log
        (error_date, error_msg, error_point)
      VALUES
        (SYSDATE,
         DBMS_UTILITY.format_error_backtrace || v_err_message,
         'TRANTYPE:' || v_trantype);
      
      COMMIT;*/
      p_response_code := '10~~LAST OPERATION COMPLETED';
  END;

  PROCEDURE getApprovalScheduleNarration(p_requesttype   IN VARCHAR2,
                                         p_parenttableid IN VARCHAR2,
                                         p_scheduleid    IN NUMBER,
                                         p_menuurl       IN VARCHAR2,
                                         p_narration     OUT VARCHAR2,
                                         p_dr_acct       OUT VARCHAR2,
                                         p_amount        OUT NUMBER,
                                         p_response_code OUT VARCHAR2) AS
    v_trantype VARCHAR2(100);
  
    v_corpid            VARCHAR2(100);
    v_menutype          VARCHAR2(100);
    v_isfinancialmenu   VARCHAR2(100);
    v_moduleid          VARCHAR2(100);
    v_paymentype        VARCHAR2(200);
    v_narr              VARCHAR2(200);
    v_parenttableid     VARCHAR2(200); --ph2sprint1
    v_err_message       VARCHAR2(2000);
    v_request_type_desc varchar2(100);
    v_batch_detail_id   varchar2(200);
    v_taxType           varchar2(100);
    -- PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
  
    begin
      select a.description
        into v_request_type_desc
        from ref_request_type a
       where a.request_type_id = p_requesttype;
    exception
      when others then
        v_request_type_desc := '';
    end;
  
    SELECT ISTRANSACTION_MENU, TRANSACTION_TYPE, MENU_TYPE_ID, MODULE_ID
      INTO v_isfinancialmenu, v_trantype, v_menutype, v_moduleid
      FROM MENU
     WHERE MENUID = p_menuurl;
  
    IF ((v_trantype = '1') OR (v_trantype = '2') OR (v_trantype = '3') OR
       (v_trantype = '25') OR (v_trantype = '17') OR (v_trantype = '35') OR
       (v_trantype = '36')) THEN
      --TRANSFERS
      v_narr := 'TRANSFER REQUEST FROM ACCOUNT ';
    
      IF (v_trantype = '25') THEN
        v_narr := 'BILL PAYMENTS FROM ACCOUNT ';
      END IF;
      IF (v_trantype IN ('35')) THEN
        --firs
        select BATCH_DETAIL_ID
          into v_batch_detail_id
          from TRANSACTION_BATCH_DETAIL
         where batch_id = p_parenttableid
           and rownum < 2;
        select TAXTYPE_DESCRIPTION
          into v_taxType
          from FIRS_REMITTANCE_DETAILS
         where BATCH_DETAIL_ID = v_batch_detail_id;
        v_narr := 'FIRS TAX - ' || v_taxType;
      END IF;
      IF (v_trantype IN ('36')) THEN
        --collections
        select BATCH_DETAIL_ID
          into v_batch_detail_id
          from TRANSACTION_BATCH_DETAIL
         where batch_id = p_parenttableid
           and rownum < 2;
        select name
          into v_taxType
          from payments.rr_collections
         where collection_id in
               (select collection_id
                  from collection_details
                 where BATCH_DETAIL_ID = v_batch_detail_id);
        v_narr := 'STATE TAX - ' || v_taxType;
      END IF;
      SELECT v_narr || DR_ACCOUNT || ' - ' || NO_OF_RECORD || ' RECORD(S)',
             TOTAL_TRAN_AMOUNT,
             DR_ACCOUNT
        INTO p_narration, p_amount, p_dr_acct
        FROM TRANSACTION_BATCH_SUMMARY
       WHERE BATCH_ID = p_parenttableid;
    
      update TRANSACTION_BATCH_SUMMARY
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where BATCH_ID = p_parenttableid;
      --ph2sprint1
    ELSIF ((v_trantype = '31')) THEN
      --TRANSFERS
      /* if(p_requesttype='1') then
       v_narr := 'NEW STANDING INSTRUCTION REQUEST FROM ACCOUNT ';
      
       SELECT v_narr || DR_ACCOUNT || ' - ' || NO_OF_RECORD || ' RECORD(S)',
              TOTAL_TRAN_AMOUNT,
              DR_ACCOUNT
         INTO p_narration, p_amount, p_dr_acct
         FROM TRANSACTION_SCHEDULE_SUMMARY
        WHERE BATCH_ID = p_parenttableid;
      
       update TRANSACTION_SCHEDULE_SUMMARY
          set SCHEDULE_SUMMARY_ID = p_scheduleid
        where BATCH_ID = p_parenttableid;
      else*/
      --REF_REQUEST_TYPE
      v_narr := 'STANDING INSTRUCTION REQUEST FROM ACCOUNT ';
      select PARENT_TABLE_ID
        into v_parenttableid
        from TRANSACTION_SCHED_SUMMARY_REQ
       where REQUEST_TABLE_ID = p_parenttableid;
      SELECT v_request_type_desc || '(' || v_narr || DR_ACCOUNT || ' - ' ||
             NO_OF_RECORD || ' RECORD(S))',
             TOTAL_TRAN_AMOUNT,
             DR_ACCOUNT
        INTO p_narration, p_amount, p_dr_acct
        FROM TRANSACTION_SCHEDULE_SUMMARY
       WHERE BATCH_ID = v_parenttableid;
    
      update TRANSACTION_SCHED_SUMMARY_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_TABLE_ID = p_parenttableid;
    
      -- end if;
    ELSIF (v_trantype = '4') THEN
      SELECT CONCAT('CORPORATE PROFILE: ' || v_request_type_desc ||
                    ' FOR - ',
                    a.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM CORPORATE_PROFILE_REQ a
       WHERE CORP_REQ_ID = p_parenttableid;
    
      --p_scheduleid
      update CORPORATE_PROFILE_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where CORP_REQ_ID = p_parenttableid;
    
    ELSIF (v_trantype = '5') THEN
      SELECT CONCAT('USER PROFILE: ' || v_request_type_desc || ' FOR - ',
                    a.last_name || ' ' || a.first_name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM USER_PROFILE_REQ a
       WHERE USER_ID_REQ = p_parenttableid;
    
      --p_scheduleid
      update USER_PROFILE_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where USER_ID_REQ = p_parenttableid;
    
    ELSIF (v_trantype = '6') THEN
      SELECT CONCAT('USER ROLE: ' || v_request_type_desc || ' FOR - ',
                    c.username || '~' || b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM USER_ROLE_REQ a, roles b, user_profile c
       WHERE a.role_id = b.role_id
         and a.user_id = c.user_id
         and REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update USER_ROLE_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '7') THEN
      SELECT CONCAT('CORPORATE ACCOUNT: ' || v_request_type_desc ||
                    ' FOR - ',
                    a.account_number || '~~' || ACCOUNT_NAME),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM CORPORATE_ACCOUNT_REQ a
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update CORPORATE_ACCOUNT_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '8') THEN
      SELECT CONCAT('ROLE: ' || v_request_type_desc || ' FOR - ', NAME),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM ROLES_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update ROLES_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '9') THEN
      SELECT CONCAT('DEPARTMENT: ' || v_request_type_desc || ' FOR - ',
                    NAME),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM DEPARTMENTS_REQ
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update DEPARTMENTS_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '11') THEN
      SELECT CONCAT('MENU ROLE: ' || v_request_type_desc || ' FOR - ',
                    b.menuname || '~' || c.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM APPMENUROLES_REQ a, MENU b, ROLES c
       WHERE a.appmenuid = b.menuid
         and a.roleid = c.role_id
         and REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update APPMENUROLES_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '12') THEN
      SELECT CONCAT('USER ACCOUNT ACCESS: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.username || '~' || C.ACCOUNT_NUMBER || '~' ||
                    c.account_name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM USER_ACCOUNT_ACCESS_REQ a, USER_PROFILE b, corporate_account c
       WHERE a.user_id = b.user_id
         and a.corp_acct_id = c.corp_acct_id
         and REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update USER_ACCOUNT_ACCESS_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '13') THEN
      SELECT CONCAT('APPROVAL GROUP: ' || v_request_type_desc || ' FOR - ',
                    a.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM APPROVAL_GROUPS_REQ a
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update APPROVAL_GROUPS_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype IN ('14', '22')) THEN
      SELECT CONCAT('APPROVAL USER GROUP: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.username || '~' || c.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM APPROVAL_GROUPS_USERS_REQ a,
             USER_PROFILE              b,
             approval_groups           c,
             departments               d
       WHERE a.user_id = b.user_id(+)
         and a.dept_id = d.dept_id(+)
         and a.approval_group_id = c.group_id
         and REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update APPROVAL_GROUPS_USERS_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
      -- END IF;
    
    ELSIF (v_trantype = '15') THEN
      -- manage approval route
      SELECT 'APPROVAL RULE: ' || v_request_type_desc || ' FOR - ' ||
             A.ROUTE_NAME,
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM APPROVAL_ROUTE_REQ a
       WHERE a.approval_route_id_req = p_parenttableid;
    
      --p_scheduleid
      update APPROVAL_ROUTE_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where APPROVAL_ROUTE_ID_REQ = p_parenttableid;
    
    ELSIF (v_trantype = '16') THEN
      --manage approval signatories
      -- manage approval route
      SELECT 'APPROVAL SIGNATORY: ' || v_request_type_desc || ' LEVEL: ' ||
             a.approval_level || ' FOR - ' || b.route_name,
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM APPROVAL_ROUTE_SIGNATORIES_REQ a, APPROVAL_ROUTE b
       WHERE a.routeid = b.approval_route_id
         and a.route_signatory_req_id = p_parenttableid;
    
      --p_scheduleid
      update APPROVAL_ROUTE_SIGNATORIES_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where ROUTE_SIGNATORY_REQ_ID = p_parenttableid;
    
    ELSIF (v_trantype = '17') THEN
      --PAYMENTS
    
      select NAME
        into v_paymentype
        from REF_PAYMENT_TYPES
       where PAYMENT_TYPE_ID in
             (select PAYMENT_TYPE_ID
                from TRANSACTION_BATCH_SUMMARY
               where BATCH_ID = p_parenttableid);
      SELECT v_paymentype || ' APPROVAL(DR A/C:' || DR_ACCOUNT ||
             ' AMOUNT:' ||
             (select TO_CHAR(TOTAL_TRAN_AMOUNT, '999,999,999,999.99')
                from dual) || ' RECORD COUNT:' ||
             (select TO_CHAR(NO_OF_RECORD, '999,999,999,999') from dual) || ')',
             TOTAL_TRAN_AMOUNT,
             DR_ACCOUNT
        INTO p_narration, p_amount, p_dr_acct
        FROM TRANSACTION_BATCH_SUMMARY
       WHERE BATCH_ID = p_parenttableid;
    
      --p_scheduleid
      update TRANSACTION_BATCH_SUMMARY
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where BATCH_ID = p_parenttableid;
    
    ELSIF (v_trantype = '18') THEN
      SELECT CONCAT('CORPORATE DISCOUNT: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM CORPORATE_DISCOUNTS_REQ a, CORPORATE_PROFILE b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update CORPORATE_DISCOUNTS_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '19') THEN
      SELECT CONCAT('HOLDING ACCOUNT: ' || v_request_type_desc || ' FOR - ',
                    a.name || ' ' || a.account_no),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM HOLDING_ACCOUNTS_REQ a
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update HOLDING_ACCOUNTS_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '20') THEN
      SELECT CONCAT('CORPORATE TERMINAL: ' || v_request_type_desc ||
                    ' FOR - ',
                    a.terminal_id || ' ' || a.outlet_name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM corporate_terminals_REQ a
       WHERE REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update corporate_terminals_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '23') THEN
      SELECT CONCAT('BENEFICIARY: ' || v_request_type_desc || ' FOR - ',
                    a.preferred_name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM corporate_beneficiaries_REQ a
       WHERE a.Batch_Id = p_parenttableid
         and rownum < 2;
    
      --p_scheduleid
      update corporate_beneficiaries_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where Batch_Id = p_parenttableid;
    
    ELSIF (v_trantype = '24') THEN
      SELECT CONCAT('APPROVAL PRIORITIES: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name || ' ' || b.description),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM APPROVAL_ROUTE_TYPE_PR_REQ a, ref_approval_route_type b
       WHERE a.approval_route_type_id = b.approval_route_type_id
         and a.batch_id = p_parenttableid
         and rownum = 1;
    
      --p_scheduleid
      update APPROVAL_ROUTE_TYPE_PR_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where batch_id = p_parenttableid;
    
    ELSIF (v_trantype = '26') THEN
      SELECT CONCAT('CORPORATE LIMIT: ' || v_request_type_desc || ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM corporate_limits_REQ a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      update corporate_limits_REQ
         set SCHEDULE_SUMMARY_ID = p_scheduleid
       where REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '27') THEN
      SELECT CONCAT('CHEQUE BOOK REQUEST: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM cheque_book_requests a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = p_parenttableid;
    
      --p_scheduleid
      
      
       ELSIF (v_trantype = '45') THEN
      SELECT CONCAT('CARD REQUEST: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM CARD_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and CARD_REQUEST_ID = p_parenttableid;
		 
		 ELSIF (v_trantype = '46') THEN
      SELECT CONCAT('STOP CHEQUE REQUEST: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM STOP_CHEQUE_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = p_parenttableid;
		 
		 
		 ELSIF (v_trantype = '47') THEN
      SELECT CONCAT('EXPENSE REQUEST: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM EXPENSE_CARD_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and CARD_REQUEST_ID = p_parenttableid;
		 
		 
		  ELSIF (v_trantype = '48') THEN
      SELECT CONCAT('HR QUICK RESPONSE REQ: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM HR_QUICK_RESPONSE a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '28') THEN
      SELECT CONCAT('MANAGER''S CHEQUE REQUEST: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM MANAGERS_CHEQUE_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '30') THEN
      SELECT CONCAT('CHEQUE CONFIRMATION REQUEST: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             a.amount,
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM CHEQUE_CONFIRMATION_rEQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '33') THEN
      SELECT CONCAT('CHANGE CARD STATUS REQUEST: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM CHANGE_cARD_sTATUS_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and SERVICE_REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '34') THEN
      SELECT CONCAT('CHANGE CARD LIMIT REQUEST: ' || v_request_type_desc ||
                    ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM SET_CARD_LIMIT_rEQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and SERVICE_REQUEST_ID = p_parenttableid;
    
    ELSIF (v_trantype = '39') THEN
      SELECT CONCAT('MANAGER''S CHEQUE REQUEST UPLOAD: ' ||
                    v_request_type_desc || ' FOR - ',
                    b.name),
             '0.0',
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM MANAGERS_CHEQUE_REQUESTS_TEMP a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and request_id = p_parenttableid;
    
      --awe sprint3
    ELSIF (v_trantype = '40') THEN
      SELECT CONCAT('FX TRANSFER TO : ' || BENEFICIARY_NAME ||
                    'REQUEST FOR - ',
                    b.name),
             A.TRANSFER_amount,
             a.account_number
        INTO p_narration, p_amount, p_dr_acct
        FROM intl_FX_TRANSFER_REQUESTS a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and fx_trf_request_id = p_parenttableid;
    
    ELSIF (v_trantype = '41') THEN
      SELECT CONCAT('MANDATE REQUEST : ' || payer_name || 'REQUEST FOR - ',
                    A.NARRATION),
             A.amount,
             a.account_number
        INTO p_narration, p_amount, p_dr_acct
        FROM direct_dr_mandate_requests a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and mandate_id = p_parenttableid;
    
    ELSIF (v_trantype = '42') THEN
      SELECT CONCAT('UPLOAD MANDATE REQUEST : ', A.DESCRIPTION),
             A.total_amount,
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM upload_batch_master a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and batch_id = p_parenttableid;
      --#ee start
      ELSIF (v_trantype = '43') THEN
      SELECT CONCAT('PAYDAY LOAN REQUEST : ', ''/*//TODO*/),
             A.AMOUNT,
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM cibank.payday_loans a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and a.payday_loan_id = p_parenttableid;
         ELSIF (v_trantype = '44') THEN
      SELECT CONCAT('FIXED DEPOSIT REQUEST : ', ''/*//TODO*/),
             A.AMOUNT,
             'N/A'
        INTO p_narration, p_amount, p_dr_acct
        FROM cibank.fixed_deposits a, corporate_profile b
       WHERE a.corp_id = b.corp_id
         and a.id = p_parenttableid;
          
      --#ee end
    END IF;
  
    --  END IF;
  
    -- DBMS_output.PUT_LINE('fee is '||p_Fee);
  
    p_response_code := '00';
    --commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      -- Consider logging the error and then re-raise
      v_err_message := SQLERRM;
      cib_ibank_sr_pkg.logerror(DBMS_UTILITY.format_error_backtrace ||
                                v_err_message,
                                'TRANTYPE:' || v_trantype);
    
    -- cib_ibank_sr_pkg.logerror(v_err_message,'TRANTYPE:' || v_trantype); 
  END;

  FUNCTION logApproveralRequest(acctno            IN VARCHAR2,
                                userid            IN VARCHAR2,
                                v_menuurl         IN VARCHAR2,
                                requesttype       IN VARCHAR2,
                                v_parenttableid   IN VARCHAR2,
                                v_tran_amount     IN NUMBER,
                                v_merchant_corpid IN VARCHAR2,
                                p_context_url     varchar2,
                                p_ip_mac_address  varchar2,
                                p_session_id      varchar2) RETURN VARCHAR2 as
  begin
    return logApproveralRequest(
                                
                                acctno,
                                userid,
                                v_menuurl,
                                requesttype,
                                v_parenttableid,
                                v_tran_amount,
                                v_merchant_corpid,
                                null,
                                null,
                                p_context_url,
                                p_ip_mac_address,
                                p_session_id);
  
  end;

  FUNCTION logApproveralRequest(acctno            IN VARCHAR2,
                                userid            IN VARCHAR2,
                                v_menuurl         IN VARCHAR2,
                                requesttype       IN VARCHAR2,
                                v_parenttableid   IN VARCHAR2,
                                v_tran_amount     IN NUMBER,
                                v_merchant_corpid IN VARCHAR2,
                                p_auth_token_flag char,
                                p_auth_token_sno  varchar2,
                                p_context_url     varchar2,
                                p_ip_mac_address  varchar2,
                                p_session_id      varchar2) RETURN VARCHAR2 IS
    v_err_message                 VARCHAR2(3000);
    v_response                    VARCHAR2(300);
    v_trantype                    VARCHAR2(100);
    v_narration                   VARCHAR2(200);
    v_amount                      NUMBER(18, 2);
    v_corpid                      VARCHAR2(100);
    v_menutype                    VARCHAR2(100);
    v_isfinancialmenu             VARCHAR2(100);
    v_moduleid                    VARCHAR2(100);
    v_ruleexistfortransactiontype INTEGER;
    v_issolepropriatorsignatory   INTEGER;
    v_ruleexistfortranmodule      INTEGER;
    v_ruleexistfordebitacct       INTEGER;
    --v_parenttableid         INTEGER;
    --v_requesttableid               INTEGER;
    v_ruleexistfordept           INTEGER;
    v_globalacctruleexistforcorp INTEGER;
    v_globalruleexistforcorp     INTEGER;
    v_noofapprovers              INTEGER;
    v_noofsignatories            INTEGER;
    v_routeid                    INTEGER;
    v_approvercount              INTEGER;
    v_schedule_summary_id        INTEGER;
  
    v_APPROVAL_ROUTE_ID          INTEGER;
    v_COPR_ID                    INTEGER;
    v_ROUTE_TYPE_ID              INTEGER;
    v_TRAN_TYPE_ID               INTEGER;
    v_CORP_ACCT_ID               INTEGER;
    v_ISGLOBAL_ACCTRULE          VARCHAR2(10);
    v_NO_OF_APPROVAL             INTEGER;
    v_IS_APPROVAL_SEQUENTIAL     VARCHAR2(10);
    v_ISFINANCIAL                VARCHAR2(10);
    v_MODULE_ID                  INTEGER;
    v_ISMODULERULE               VARCHAR2(10);
    v_ISGLOBALRULE               VARCHAR2(10);
    v_APPROVAL_OPTIONS_ID        INTEGER;
    v_dracct                     VARCHAR2(20);
    v_deptid                     INTEGER;
    v_approverroutetype          INTEGER;
    v_update_resp_code           VARCHAR2(20);
    v_expectedapproveruserid     INTEGER;
    v_scheduleid                 VARCHAR2(20);
    v_newrequesttypeid           VARCHAR2(20);
    v_isSolePropriator           VARCHAR2(20);
    v_expectedgroupapproverid    INTEGER;
    v_noofrequiredgroupapprovers INTEGER;
    v_cananygroupuserapprove     INTEGER;
    v_groupuserapproverordered   INTEGER;
    v_approvaloption             INTEGER;
    v_ruleid                     INTEGER;
    v_ruletypepriorityexist      INTEGER;
    v_insertcount                INTEGER;
    v_ruleidentified             INTEGER;
    v_noofapprovallevels         INTEGER;
    v_amountruleexistforcorp     INTEGER;
    v_validationcount            INTEGER;
    v_verifierexist              INTEGER;
    v_is_visible                 varchar2(100);
    v_log_email_resp             varchar2(100);
    --o_refcursor   sys_refcursor;
  BEGIN
    v_approvercount      := 0;
    v_verifierexist      := 0;
    v_is_visible         := 'N';
    v_noofapprovallevels := 0;
    v_ruleidentified     := 0;
    v_insertcount        := 0;
    v_response           := '00~~OPERATION SUCCESSFUL AND AWAITING APPROVALS';
    --Get user corpid
    SELECT a.CORP_ID, a.DEPT_ID, b.IS_A_SOLEPROPRIATOR
      INTO v_corpid, v_deptid, v_isSolePropriator
      FROM USER_PROFILE a
      join CORPORATE_PROFILE b
        on b.CORP_ID = a.CORP_ID
     WHERE USER_ID = userid;
  
    --is a rule set for the transaction type for this corp
    -- select
    --select
    --identify rule to use
  
    SELECT ISTRANSACTION_MENU, TRANSACTION_TYPE, MENU_TYPE_ID, MODULE_ID
      INTO v_isfinancialmenu, v_trantype, v_menutype, v_moduleid
      FROM MENU
     WHERE MENUID = v_menuurl;
  
    -- insert into idvalid values('88',v_corpid||'/'||v_menuurl||'/'||userid);
    --COMMIT; 
    --  select COUNT(1) INTO v_ruleexistfortran from APPROVAL_ROUTE where CORP_ID=v_corpid AND TRAN_TYPE_ID=
    --CHECK IF RULE PRIORITY EXIST FOR CORPORATE
    SELECT COUNT(1)
      INTO v_ruletypepriorityexist
      FROM APPROVAL_ROUTE_TYPE_PRIORITY
     WHERE CORP_ID = v_corpid
       AND APPROVAL_STATUS_ID = 2
       AND RECORD_STATUS_ID = 2;
  
    IF (v_ruletypepriorityexist > 0) THEN
      -- OPEN o_refcursor FOR
      FOR item IN (SELECT APPROVAL_ROUTE_TYPE_ID, PRIORITY_NO
                     FROM APPROVAL_ROUTE_TYPE_PRIORITY
                    WHERE CORP_ID = v_corpid
                      AND APPROVAL_STATUS_ID = 2
                      AND RECORD_STATUS_ID = 2
                    ORDER BY PRIORITY_NO ASC) LOOP
        BEGIN
          IF (item.APPROVAL_ROUTE_TYPE_ID = 1) THEN
            --ACCOUNT BASED
            SELECT COUNT(1)
              INTO v_ruleexistfordebitacct
              FROM APPROVAL_ROUTE
             WHERE APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and ROUTE_TYPE_ID = 1
                  
               AND CORP_ID = v_corpid
               AND CORP_ACCT_ID =
                   (SELECT CORP_ACCT_ID
                      FROM CORPORATE_ACCOUNT
                     WHERE ACCOUNT_NUMBER = acctno)
               and rownum < 2;
          
            IF (v_ruleexistfordebitacct > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND ROUTE_TYPE_ID = 1
                 AND CORP_ACCT_ID =
                     (SELECT CORP_ACCT_ID
                        FROM CORPORATE_ACCOUNT
                       WHERE APPROVAL_STATUS_ID = 2
                         AND RECORD_STATUS_ID = 2)
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 2) THEN
            --TRANSACTION TYPE BASED
            SELECT COUNT(1)
              INTO v_ruleexistfortransactiontype
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND ROUTE_TYPE_ID = 2
               AND TRAN_TYPE_ID = v_trantype
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_ruleexistfortransactiontype > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND ROUTE_TYPE_ID = 2
                 AND TRAN_TYPE_ID = v_trantype
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 3) THEN
            --MODULE
            SELECT COUNT(1)
              INTO v_ruleexistfortranmodule
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND ROUTE_TYPE_ID = 3
               AND MODULE_ID = v_moduleid
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_ruleexistfortranmodule > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND ROUTE_TYPE_ID = 3
                 AND MODULE_ID = v_moduleid
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 4) THEN
            --DEPARTMENTAL
            SELECT COUNT(1)
              INTO v_ruleexistfordept
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND ROUTE_TYPE_ID = 4
               AND DEPARTMENT_ID = v_deptid
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_ruleexistfordept > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND ROUTE_TYPE_ID = 4
                 AND DEPARTMENT_ID = v_deptid
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 5) THEN
            --GLOBAL RULE
            SELECT COUNT(1)
              INTO v_globalruleexistforcorp
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND ROUTE_TYPE_ID = 5
                  --AND ISGLOBALRULE = 'Y'
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_globalruleexistforcorp > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND ROUTE_TYPE_ID = 5
                    --AND ISGLOBALRULE = 'Y'
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 6) THEN
            --GLOBAL RULE
            SELECT COUNT(1)
              INTO v_amountruleexistforcorp
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND ROUTE_TYPE_ID = 6
                  --AND IS_AMOUNT_RULE = 'Y'
               and v_tran_amount > 0
               and v_tran_amount >= START_AMOUNT
               and v_tran_amount <= END_AMOUNT
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_amountruleexistforcorp > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND ROUTE_TYPE_ID = 6
                    -- AND IS_AMOUNT_RULE = 'Y'
                 and v_tran_amount > 0
                 and v_tran_amount >= START_AMOUNT
                 and v_tran_amount <= END_AMOUNT
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              EXIT;
            END IF;
          END IF;
          -- exit;
        END;
      END LOOP;
    ELSE
      -- OPEN o_refcursor FOR
      FOR item IN (SELECT APPROVAL_ROUTE_TYPE_ID,
                          DEFAULT_PRIORITY_NO AS APPROVAL_ROUTE_TYPE_PRIORITY
                     FROM REF_APPROVAL_ROUTE_TYPE
                    ORDER BY DEFAULT_PRIORITY_NO ASC) LOOP
        BEGIN
          IF (item.APPROVAL_ROUTE_TYPE_ID = 1) THEN
            --ACCOUNT BASED
            SELECT COUNT(1)
              INTO v_ruleexistfordebitacct
              FROM APPROVAL_ROUTE
             WHERE APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               AND CORP_ID = v_corpid
               AND ROUTE_TYPE_ID = 1
               AND ROWNUM < 2
               AND CORP_ACCT_ID =
                   (SELECT CORP_ACCT_ID
                      FROM CORPORATE_ACCOUNT
                     WHERE ACCOUNT_NUMBER = acctno
                       AND CORP_ID = v_corpid
                       AND APPROVAL_STATUS_ID = 2
                       AND RECORD_STATUS_ID = 2)
               and rownum < 2;
          
            IF (v_ruleexistfordebitacct > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND ROUTE_TYPE_ID = 1
                 AND CORP_ACCT_ID =
                     (SELECT CORP_ACCT_ID
                        FROM CORPORATE_ACCOUNT
                       WHERE ACCOUNT_NUMBER = acctno
                         AND CORP_ID = v_corpid
                         AND APPROVAL_STATUS_ID = 2
                         AND RECORD_STATUS_ID = 2)
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              /* SELECT NO_OF_APPROVAL, APPROVAL_ROUTE_ID
               INTO v_noofapprovers, v_routeid
               FROM APPROVAL_ROUTE
              WHERE CORP_ID = v_corpid
                AND CORP_ACCT_ID =
                    (SELECT CORP_ACCT_ID
                       FROM CORPORATE_ACCOUNT
                      WHERE APPROVAL_STATUS_ID = 2
                        AND RECORD_STATUS_ID = 2)
                AND APPROVAL_STATUS_ID = 2
                AND RECORD_STATUS_ID = 2;*/
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 2) THEN
            --TRANSACTION TYPE BASED
            SELECT COUNT(1)
              INTO v_ruleexistfortransactiontype
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND TRAN_TYPE_ID = v_trantype
               AND ROUTE_TYPE_ID = 2
               AND ROWNUM < 2
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_ruleexistfortransactiontype > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND TRAN_TYPE_ID = v_trantype
                 AND ROUTE_TYPE_ID = 2
                 AND ROWNUM < 2
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              /* SELECT NO_OF_APPROVAL, APPROVAL_ROUTE_ID
               INTO v_noofapprovers, v_routeid
               FROM APPROVAL_ROUTE
              WHERE CORP_ID = v_corpid
                AND TRAN_TYPE_ID = v_trantype
                AND APPROVAL_STATUS_ID = 2
                AND RECORD_STATUS_ID = 2;*/
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 3) THEN
            --MODULE
            SELECT COUNT(1)
              INTO v_ruleexistfortranmodule
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND MODULE_ID = v_moduleid
               AND APPROVAL_STATUS_ID = 2
               AND ROUTE_TYPE_ID = 3
               AND ROWNUM < 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_ruleexistfortranmodule > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND MODULE_ID = v_moduleid
                 AND ROUTE_TYPE_ID = 3
                 AND ROWNUM < 2
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              /*SELECT NO_OF_APPROVAL, APPROVAL_ROUTE_ID
               INTO v_noofapprovers, v_routeid
               FROM APPROVAL_ROUTE
              WHERE CORP_ID = v_corpid
                AND MODULE_ID = v_moduleid
                AND APPROVAL_STATUS_ID = 2
                AND RECORD_STATUS_ID = 2;*/
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 4) THEN
            --DEPARTMENTAL
            SELECT COUNT(1)
              INTO v_ruleexistfordept
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND DEPARTMENT_ID = v_deptid
               AND ROUTE_TYPE_ID = 4
               AND ROWNUM < 2
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_ruleexistfordept > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND DEPARTMENT_ID = v_deptid
                 AND ROUTE_TYPE_ID = 4
                 AND ROWNUM < 2
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              /* SELECT NO_OF_APPROVAL, APPROVAL_ROUTE_ID
               INTO v_noofapprovers, v_routeid
               FROM APPROVAL_ROUTE
              WHERE CORP_ID = v_corpid
                AND DEPARTMENT_ID = v_deptid
                AND APPROVAL_STATUS_ID = 2
                AND RECORD_STATUS_ID = 2;*/
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 5) THEN
            --GLOBAL RULE
            SELECT COUNT(1)
              INTO v_globalruleexistforcorp
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
                  --AND ISGLOBALRULE = 'Y'
               AND ROUTE_TYPE_ID = 5
               AND ROWNUM < 2
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_globalruleexistforcorp > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                    --AND ISGLOBALRULE = 'Y'
                 AND ROUTE_TYPE_ID = 5
                 AND ROWNUM < 2
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              /*SELECT NO_OF_APPROVAL, APPROVAL_ROUTE_ID
               INTO v_noofapprovers, v_routeid
               FROM APPROVAL_ROUTE
              WHERE CORP_ID = v_corpid
                AND ISGLOBALRULE = 'Y'
                AND APPROVAL_STATUS_ID = 2
                AND RECORD_STATUS_ID = 2;*/
              EXIT;
            END IF;
          ELSIF (item.APPROVAL_ROUTE_TYPE_ID = 6) THEN
            --GLOBAL RULE
            SELECT COUNT(1)
              INTO v_amountruleexistforcorp
              FROM APPROVAL_ROUTE
             WHERE CORP_ID = v_corpid
               AND ROUTE_TYPE_ID = 6
                  -- AND IS_AMOUNT_RULE = 'Y'
               and v_tran_amount > 0
               and v_tran_amount >= START_AMOUNT
               and v_tran_amount <= END_AMOUNT
               AND APPROVAL_STATUS_ID = 2
               AND RECORD_STATUS_ID = 2
               and rownum < 2;
          
            IF (v_amountruleexistforcorp > 0) THEN
              SELECT APPROVAL_ROUTE_ID,
                     CORP_ID,
                     ROUTE_TYPE_ID,
                     TRAN_TYPE_ID,
                     CORP_ACCT_ID,
                     ISGLOBAL_ACCTRULE,
                     NO_OF_SIGNATORIES,
                     IS_APPROVAL_SEQUENTIAL,
                     ISFINANCIAL,
                     MODULE_ID,
                     ISMODULERULE,
                     ISGLOBALRULE,
                     APPROVAL_OPTIONS_ID,
                     NO_OF_APPROVAL_LEVELS
              
                INTO v_APPROVAL_ROUTE_ID,
                     v_COPR_ID,
                     v_ROUTE_TYPE_ID,
                     v_TRAN_TYPE_ID,
                     v_CORP_ACCT_ID,
                     v_ISGLOBAL_ACCTRULE,
                     v_NO_OF_APPROVAL,
                     v_IS_APPROVAL_SEQUENTIAL,
                     v_ISFINANCIAL,
                     v_MODULE_ID,
                     v_ISMODULERULE,
                     v_ISGLOBALRULE,
                     v_APPROVAL_OPTIONS_ID,
                     
                     v_noofapprovallevels
                FROM APPROVAL_ROUTE
               WHERE CORP_ID = v_corpid
                 AND ROUTE_TYPE_ID = 6
                    --AND IS_AMOUNT_RULE = 'Y'
                 and v_tran_amount > 0
                 and v_tran_amount >= START_AMOUNT
                 and v_tran_amount <= END_AMOUNT
                 AND APPROVAL_STATUS_ID = 2
                 AND RECORD_STATUS_ID = 2
                 and rownum < 2;
            
              v_ruleidentified := 1;
              v_noofapprovers  := v_NO_OF_APPROVAL;
              v_routeid        := v_APPROVAL_ROUTE_ID;
              EXIT;
            
            END IF;
          END IF;
          -- exit;
        END;
      END LOOP;
    END IF;
  
    --EXIT IF NO RULE IS FOUND
    IF (v_ruleidentified = 0) THEN
      v_response := '99~~RULE NOT FOUND'; --NO RULE FOUND
      RETURN v_response;
    ELSE
      -- IF (v_isfinancialmenu = 'Y') THEN
      --financial
      /*SELECT NO_OF_APPROVAL, APPROVAL_ROUTE_ID
       INTO v_noofapprovers, v_routeid
       FROM APPROVAL_ROUTE
      WHERE CORP_ID = v_corpid
        AND TRAN_TYPE_ID = v_trantype
        AND APPROVAL_STATUS_ID = 2
        AND RECORD_STATUS_ID = 2;*/
    
      IF ((v_noofapprovers = 0) or (v_noofapprovallevels = 0)) THEN
        v_response := '99~~INCOMPLETE SETUP'; --INCOMPLETE SETUP
        RETURN v_response;
      ELSE
        SELECT SUM(NO_OF_SIGNATORIES_FOR_LEVEL)
          INTO v_noofsignatories
          FROM APPROVAL_ROUTE_SIGNATORIES
         WHERE ROUTEID = v_APPROVAL_ROUTE_ID
           and APPROVAL_LEVEL > 0
           and APPROVAL_LEVEL <= v_noofapprovallevels;
      
        IF (v_noofapprovers != v_noofsignatories) THEN
          v_response := '99~~INCOMPLETE SETUP(EXPECTED NO OF SIGNATORIES IS ' ||
                        v_noofapprovers ||
                        'BUT NO OF SIGNATORIES CONFIGURED IS ' ||
                        v_noofsignatories || ')'; --INCOMPLETE SETUP
          RETURN v_response;
        END IF;
        v_validationcount := 0;
        Select count(1)
          into v_validationcount
          from APPROVAL_ROUTE_SIGNATORIES
         where ROUTEID = v_APPROVAL_ROUTE_ID
           and APPROVAL_LEVEL > 0
           and APPROVAL_LEVEL <= v_noofapprovallevels
           and NO_OF_SIGNATORIES_FOR_LEVEL = 0
           and rownum < 2;
        IF (v_validationcount > 0) THEN
          v_validationcount := 0;
          Select APPROVAL_LEVEL
            into v_validationcount
            from APPROVAL_ROUTE_SIGNATORIES
           where ROUTEID = v_APPROVAL_ROUTE_ID
             and APPROVAL_LEVEL > 0
             and APPROVAL_LEVEL <= v_noofapprovallevels
             and NO_OF_SIGNATORIES_FOR_LEVEL = 0
             and rownum < 2;
        
          v_response := '99~~INCOMPLETE SETUP(THE NO OF SIGNATORIES TO SIGN FOR APPROVAL LEVEL ' ||
                        v_validationcount || ' IS NOT CONFIGURED' || ')'; --INCOMPLETE SETUP
          RETURN v_response;
        END IF;
        v_validationcount := 0;
        Select count(1)
          into v_validationcount
          from APPROVAL_ROUTE_SIGNATORIES
         where ROUTEID = v_APPROVAL_ROUTE_ID
           and NO_OF_SIGNATORIES_FOR_LEVEL > 0
           and APPROVAL_LEVEL <= v_noofapprovallevels
           and (EXPECTED_GROUP_APPROVER_ID IS NULL OR
               EXPECTED_GROUP_APPROVER_ID = 0)
           and rownum < 2;
        IF (v_validationcount > 0) THEN
          v_validationcount := 0;
          Select APPROVAL_LEVEL
            into v_validationcount
            FROM APPROVAL_ROUTE_SIGNATORIES
           where ROUTEID = v_APPROVAL_ROUTE_ID
             and NO_OF_SIGNATORIES_FOR_LEVEL > 0
             and APPROVAL_LEVEL <= v_noofapprovallevels
             and (EXPECTED_GROUP_APPROVER_ID IS NULL OR
                 EXPECTED_GROUP_APPROVER_ID = 0)
             and rownum < 2;
          IF (v_validationcount = 0) THEN
            v_response := '99~~INCOMPLETE SETUP(VERIFIER GROUP HAS NO MEMBERS CONFIGURED' || ')'; --INCOMPLETE SET
          ELSE
            v_response := '99~~INCOMPLETE SETUP(APPROVAL LEVEL ' ||
                          v_validationcount ||
                          ' HAS NO SIGNATORIES CONFIGURED' || ')'; --INCOMPLETE SETUP
          
          END IF;
        
          RETURN v_response;
        END IF;
      
        IF (v_noofapprovers = v_noofsignatories) THEN
          --SELECT * FROM APPROVAL_ROUTE_SIGNATORIES WHERE  ROUTEID=v_routeid;
        
          -- v_narration                      VARCHAR2 (200);
          --v_amount                      NUMBER (18,2); 
        
          /* IF ((v_trantype = '1') OR (v_trantype = '2') OR
             (v_trantype = '3')) THEN
            --TRANSFERS
            SELECT 'TRANSFER REQUEST FROM ACCOUNT ' || DR_ACCOUNT || ' (' ||
                   NO_OF_RECORD || ' RECORDS',
                   TOTAL_AMOUNT,DR_ACCOUNT
              INTO v_narration, v_amount,v_dracct
              FROM TRANSACTION_BATCH_SUMMARY
             WHERE BATCH_ID = v_parenttableid;
          ELSIF (v_trantype = '4') THEN
            SELECT CONCAT('CORPORATE CREATION REQUEST FOR ', NAME), '0.0','N/A'
              INTO v_narration, v_amount,v_dracct
              FROM CORPORATE_PROFILE
             WHERE CORP_ID = v_parenttableid;
          
          END IF;*/
        
          select REQ_APPROVAL_SCHDL_SUMMARY_SEQ.nextval
            into v_schedule_summary_id
            from dual;
          cib_ibank_sr_pkg.getApprovalScheduleNarration(requesttype,
                                                        v_parenttableid,
                                                        v_schedule_summary_id,
                                                        v_menuurl,
                                                        v_narration,
                                                        v_dracct,
                                                        v_amount,
                                                        v_update_resp_code);
        
          IF (requesttype = '1') THEN
            v_newrequesttypeid := '11';
          ELSIF (requesttype = '2') THEN
            v_newrequesttypeid := '12';
          ELSIF (requesttype = '3') THEN
            v_newrequesttypeid := '13';
          ELSIF (requesttype = '4') THEN
            v_newrequesttypeid := '14';
          ELSIF (requesttype = '5') THEN
            v_newrequesttypeid := '15';
          END IF;
          INSERT INTO REQ_APPROVAL_SCHEDULE_SUMMARY
            (SUMMARY_ID,
             CORP_ID,
             TRANSACTION_TYPE_ID,
             PARENT_TABLE_ID,
             CREATED_BY,
             EXPECTED_SIGNATORY_COUNT,
             TRANSACTION_DESCRIPTION,
             AMOUNT,
             DR_ACCOUNT,
             APPROVAL_ROUTE_ID,
             ROUTE_TYPE_ID,
             REQUEST_TYPE_ID)
          VALUES
            (v_schedule_summary_id,
             v_corpid,
             v_trantype,
             v_parenttableid,
             userid,
             v_noofapprovers,
             v_narration,
             v_amount,
             v_dracct,
             v_APPROVAL_ROUTE_ID,
             v_ROUTE_TYPE_ID,
             --requesttype);
             v_newrequesttypeid);
        
          -- EXECUTE IMMEDIATE 
          --BEGIN
          -- END;   
          /* EXECUTE IMMEDIATE getApprovalScheduleNarration
          USING IN     requesttype,
                IN     v_parenttableid,
                IN     v_schedule_summary_id,
                IN     v_menuurl,
                OUT    v_narration,
                OUT    v_dracct,
                OUT    v_amount,
                OUT    v_update_resp_code;*/
        
          IF (v_update_resp_code != '00') THEN
            v_response := '99~~PARENT UPDATE OPERATION FAILED'; --PARENT TABLE UPDATE FAILED
            RETURN v_response;
          END IF;
          -- Select count(1) into v_validationcount  from APPROVAL_ROUTE_SIGNATORIES where ROUTEID = v_APPROVAL_ROUTE_ID and  NO_OF_SIGNATORIES_FOR_LEVEL>0 and APPROVAL_LEVEL<=v_noofapprovallevels and (EXPECTED_GROUP_APPROVER_ID IS NULL OR EXPECTED_GROUP_APPROVER_ID=0) and rownum<2;
        
          FOR item IN (SELECT *
                         FROM APPROVAL_ROUTE_SIGNATORIES
                        WHERE ROUTEID = v_APPROVAL_ROUTE_ID
                          and NO_OF_SIGNATORIES_FOR_LEVEL > 0
                          and APPROVAL_LEVEL <= v_noofapprovallevels
                        ORDER BY APPROVAL_LEVEL ASC) LOOP
            BEGIN
              Select APPROVAL_SCHEDULE_SEQ.nextval
                into v_scheduleid
                from dual;
              --IF(v_IS_APPROVAL_SEQUENTIAL='Y')THEN
              -- v_response := '01';
              -- INSERT INTO APPROVAL_SCHEDULES(APPROVAL_SCHEDULE_ID,CORP_ID,BATCHID,ROUTE_SIGNATORY_ID,APPROVAL_STATUS_ID,CREATED_BY,CREATED_DATE,APPROVER_ROUTE_TYPEID,) VALUES(item.ROUTE_SIGNATORY_ID);                   
              IF (v_APPROVAL_OPTIONS_ID = 1) THEN
                --SEQUENTIAL
                IF ((item.APPROVAL_LEVEL = 0 AND
                   item.NO_OF_SIGNATORIES_FOR_LEVEL > 0)) THEN
                  INSERT INTO APPROVAL_SCHEDULES
                    (CREATED_BY,
                     APPROVAL_SCHEDULE_ID,
                     TRANSACTION_TYPE_ID,
                     TRANSACTION_DESCRIPTION,
                     CREATED_DATE,
                     RECORD_STATUS_ID,
                     CORP_ID,
                     APPROVAL_STATUS_ID,
                     PARENT_TABLE_ID,
                     VISIBLE,
                     AMOUNT,
                     APPROVER_ROUTE_TYPEID,
                     EXPECTED_SIGNATORY_COUNT,
                     ROUTE_SIGNATORY_ID,
                     APPROVAL_LEVEL,
                     EXPECTED_USER_APPROVER_ID,
                     EXPECTED_GROUP_APPROVER_ID,
                     DR_ACCOUNT,
                     REQ_SCHEDULE_SUMMARY_ID,
                     REQUEST_TYPE_ID,
                     MENU_ID,
                     APPROVAL_ROUTE_ID,
                     MERCHANT_CORP_ID)
                  VALUES
                    (userid,
                     --APPROVAL_SCHEDULE_SEQ.nextval,
                     v_scheduleid,
                     v_trantype,
                     v_narration,
                     SYSDATE,
                     1,
                     v_corpid,
                     1,
                     v_parenttableid,
                     'Y',
                     v_amount,
                     v_ROUTE_TYPE_ID,
                     item.NO_OF_SIGNATORIES_FOR_LEVEL,
                     item.ROUTE_SIGNATORY_ID,
                     item.APPROVAL_LEVEL,
                     item.EXPECTED_USER_APPROVER_ID,
                     item.EXPECTED_GROUP_APPROVER_ID,
                     v_dracct,
                     v_schedule_summary_id,
                     -- requesttype,
                     v_newrequesttypeid,
                     v_menuurl,
                     v_APPROVAL_ROUTE_ID,
                     v_merchant_corpid
                     
                     );
                  v_verifierexist := v_verifierexist + 1;
                  v_insertcount   := v_insertcount + 1;
                  --log email
                  v_log_email_resp := cib_ibank_sr_pkg.logemail(v_menuurl,
                                                                v_scheduleid);
                ELSIF ((item.APPROVAL_LEVEL = 1)) THEN
                  IF (v_verifierexist = 0) THEN
                    v_is_visible := 'Y';
                  
                  END IF;
                  INSERT INTO APPROVAL_SCHEDULES
                    (CREATED_BY,
                     APPROVAL_SCHEDULE_ID,
                     TRANSACTION_TYPE_ID,
                     TRANSACTION_DESCRIPTION,
                     CREATED_DATE,
                     RECORD_STATUS_ID,
                     CORP_ID,
                     APPROVAL_STATUS_ID,
                     PARENT_TABLE_ID,
                     VISIBLE,
                     AMOUNT,
                     APPROVER_ROUTE_TYPEID,
                     EXPECTED_SIGNATORY_COUNT,
                     ROUTE_SIGNATORY_ID,
                     APPROVAL_LEVEL,
                     EXPECTED_USER_APPROVER_ID,
                     EXPECTED_GROUP_APPROVER_ID,
                     DR_ACCOUNT,
                     REQ_SCHEDULE_SUMMARY_ID,
                     REQUEST_TYPE_ID,
                     MENU_ID,
                     APPROVAL_ROUTE_ID,
                     MERCHANT_CORP_ID)
                  VALUES
                    (userid,
                     --APPROVAL_SCHEDULE_SEQ.nextval,
                     v_scheduleid,
                     v_trantype,
                     v_narration,
                     SYSDATE,
                     1,
                     v_corpid,
                     1,
                     v_parenttableid,
                     v_is_visible,
                     v_amount,
                     v_ROUTE_TYPE_ID,
                     item.NO_OF_SIGNATORIES_FOR_LEVEL,
                     item.ROUTE_SIGNATORY_ID,
                     item.APPROVAL_LEVEL,
                     item.EXPECTED_USER_APPROVER_ID,
                     item.EXPECTED_GROUP_APPROVER_ID,
                     v_dracct,
                     v_schedule_summary_id,
                     -- requesttype,
                     v_newrequesttypeid,
                     v_menuurl,
                     v_APPROVAL_ROUTE_ID,
                     v_merchant_corpid
                     
                     );
                  v_insertcount := v_insertcount + 1;
                  --log email
                  v_log_email_resp := cib_ibank_sr_pkg.logemail(v_menuurl,
                                                                v_scheduleid);
                
                ELSE
                  INSERT INTO APPROVAL_SCHEDULES
                    (CREATED_BY,
                     APPROVAL_SCHEDULE_ID,
                     TRANSACTION_TYPE_ID,
                     TRANSACTION_DESCRIPTION,
                     CREATED_DATE,
                     RECORD_STATUS_ID,
                     CORP_ID,
                     APPROVAL_STATUS_ID,
                     PARENT_TABLE_ID,
                     VISIBLE,
                     AMOUNT,
                     APPROVER_ROUTE_TYPEID,
                     EXPECTED_SIGNATORY_COUNT,
                     ROUTE_SIGNATORY_ID,
                     APPROVAL_LEVEL,
                     EXPECTED_USER_APPROVER_ID,
                     EXPECTED_GROUP_APPROVER_ID,
                     DR_ACCOUNT,
                     REQ_SCHEDULE_SUMMARY_ID,
                     REQUEST_TYPE_ID,
                     MENU_ID,
                     APPROVAL_ROUTE_ID,
                     MERCHANT_CORP_ID)
                  VALUES
                    (userid,
                     --APPROVAL_SCHEDULE_SEQ.nextval,
                     v_scheduleid,
                     --v_TRAN_TYPE_ID,
                     v_trantype,
                     v_narration,
                     SYSDATE,
                     1,
                     v_corpid,
                     1,
                     v_parenttableid,
                     'N',
                     v_amount,
                     v_ROUTE_TYPE_ID,
                     item.NO_OF_SIGNATORIES_FOR_LEVEL,
                     item.ROUTE_SIGNATORY_ID,
                     item.APPROVAL_LEVEL,
                     item.EXPECTED_USER_APPROVER_ID,
                     item.EXPECTED_GROUP_APPROVER_ID,
                     v_dracct,
                     v_schedule_summary_id,
                     -- requesttype,
                     v_newrequesttypeid,
                     v_menuurl,
                     v_APPROVAL_ROUTE_ID,
                     v_merchant_corpid);
                  v_insertcount := v_insertcount + 1;
                END IF;
              ELSIF (v_APPROVAL_OPTIONS_ID = 2) THEN
                --NON-SEQUENTIAL
                INSERT INTO APPROVAL_SCHEDULES
                  (CREATED_BY,
                   APPROVAL_SCHEDULE_ID,
                   TRANSACTION_TYPE_ID,
                   TRANSACTION_DESCRIPTION,
                   CREATED_DATE,
                   RECORD_STATUS_ID,
                   CORP_ID,
                   APPROVAL_STATUS_ID,
                   PARENT_TABLE_ID,
                   VISIBLE,
                   AMOUNT,
                   APPROVER_ROUTE_TYPEID,
                   EXPECTED_SIGNATORY_COUNT,
                   ROUTE_SIGNATORY_ID,
                   APPROVAL_LEVEL,
                   EXPECTED_USER_APPROVER_ID,
                   EXPECTED_GROUP_APPROVER_ID,
                   DR_ACCOUNT,
                   REQ_SCHEDULE_SUMMARY_ID,
                   REQUEST_TYPE_ID,
                   MENU_ID,
                   APPROVAL_ROUTE_ID,
                   MERCHANT_CORP_ID)
                VALUES
                  (userid,
                   -- APPROVAL_SCHEDULE_SEQ.nextval,
                   v_scheduleid,
                   --v_TRAN_TYPE_ID,
                   v_trantype,
                   v_narration,
                   SYSDATE,
                   1,
                   v_corpid,
                   1,
                   v_parenttableid,
                   'Y',
                   v_amount,
                   v_ROUTE_TYPE_ID,
                   item.NO_OF_SIGNATORIES_FOR_LEVEL,
                   item.ROUTE_SIGNATORY_ID,
                   item.APPROVAL_LEVEL,
                   item.EXPECTED_USER_APPROVER_ID,
                   item.EXPECTED_GROUP_APPROVER_ID,
                   v_dracct,
                   v_schedule_summary_id,
                   -- requesttype,
                   v_newrequesttypeid,
                   v_menuurl,
                   v_APPROVAL_ROUTE_ID,
                   v_merchant_corpid
                   
                   );
                --log email
                v_insertcount    := v_insertcount + 1;
                v_log_email_resp := cib_ibank_sr_pkg.logemail(v_menuurl,
                                                              v_scheduleid);
              END IF;
            
              IF (v_isSolePropriator = 'Y') THEN
                SELECT COUNT(1)
                  into v_issolepropriatorsignatory
                  FROM APPROVAL_GROUPS_USERS
                 where APPROVAL_GROUP_ID = item.EXPECTED_GROUP_APPROVER_ID
                   and USER_ID = userid;
              
                IF (v_issolepropriatorsignatory > 0) THEN
                
                  v_response := cib_ibank_sr_pkg.approverecord(v_scheduleid,
                                                               userid,
                                                               '1',
                                                               'AUTO APPROVAL FOR:' ||
                                                               v_narration,
                                                               v_menuurl,
                                                               v_newrequesttypeid,
                                                               p_auth_token_flag,
                                                               p_auth_token_sno, --fixme
                                                               p_context_url,
                                                               p_ip_mac_address,
                                                               p_session_id,
                                                               null);
                
                  --                                                RETURN v_response;
                
                END IF;
              END IF;
            
              -- exit;
            END;
          END LOOP;
        ELSE
          v_response := '99~~NUMBER OF APPROVERS DOES NOT MATCH NUMBER OF SIGNATORY FOR RULE'; --NO. OF APPROVERS DOES NOT MATCH NO OF SIGNATORIES
          RETURN v_response;
        END IF;
      END IF;
      /*ELSE
        --non financial
        --PUT DETAILS
        IF (v_ruleexistfortransactiontype > 0) THEN
          --PUT DETAILS
          SELECT CORP_ID
            INTO v_corpid
            FROM USER_PROFILE
           WHERE USER_ID = userid;
        ELSIF (v_ruleexistfortranmodule > 0) THEN
          --PUT DETAILS
          SELECT CORP_ID
            INTO v_corpid
            FROM USER_PROFILE
           WHERE USER_ID = userid;
        ELSIF (v_globalruleexistforcorp > 0) THEN
          --PUT DETAILS
          SELECT CORP_ID
            INTO v_corpid
            FROM USER_PROFILE
           WHERE USER_ID = userid;
        END IF;
      END IF;*/
    END IF;
  
    -- v_response := '00|OPERATION SUCCESSFUL AND AWAITING APPROVALS';
    -- RETURN v_response;
    -- COMMIT;
  
    /* IF (((v_response = '00~~OPERATION SUCCESSFUL AND AWAITING APPROVALS') or
       (v_response = '00~~FINAL APPROVAL WAS SUCCESSFUL')) and
       v_insertcount > 0) THEN
      v_response := v_response;
      -- COMMIT;
      --v_response := '00~~OPERATION SUCCESSFUL AND AWAITING APPROVALS';
    else
      v_response := '99~~OPERATION FAILED. PLEASE TRY AGAIN LATER';
    END IF; */
  
    IF (((v_response = '00~~OPERATION SUCCESSFUL AND AWAITING APPROVALS') or
       (v_response = '00~~FINAL APPROVAL WAS SUCCESSFUL')) and
       v_insertcount > 0) THEN
      v_response := v_response;
      -- COMMIT;
      --v_response := '00~~OPERATION SUCCESSFUL AND AWAITING APPROVALS';
    elsIF (((v_response = '00~~OPERATION SUCCESSFUL AND AWAITING APPROVALS') or
          (v_response = '00~~FINAL APPROVAL WAS SUCCESSFUL')) and
          v_insertcount = 0) THEN
      v_response := '99~~OPERATION FAILED. PLEASE TRY AGAIN LATER';
    else
      v_response := v_response;
      --v_response := '99~~OPERATION FAILED. PLEASE TRY AGAIN LATER';
    END IF;
  
    -- COMMIT; 
    --  v_response :='00|OPERATION SUCCESSFUL AND AWAITING APPROVALS';
    RETURN v_response;
    --RETURN v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      cib_ibank_sr_pkg.logerror(DBMS_UTILITY.format_error_backtrace ||
                                v_err_message,
                                'CIBANK.APPROVAL_SCHEDULE');
      /* INSERT INTO rib_sr_error_log
        (error_date, error_msg, error_point)
      VALUES
        (SYSDATE,
         DBMS_UTILITY.format_error_backtrace || v_err_message,
         'CIBANK.APPROVAL_SCHEDULES');
      
      COMMIT;*/
      v_response := '96~~OPERATION FAILED';
      RETURN v_response;
  END;
  FUNCTION getacctdetailsbyacctnumber(paccountno IN VARCHAR2)
    RETURN SYS_REFCURSOR IS
    o_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN o_refcursor FOR
      SELECT *
        FROM sttm_cust_account
       WHERE cust_ac_no = paccountno
         and auth_stat = 'A'
         and record_stat = 'O';
  
    RETURN o_refcursor;
  END getacctdetailsbyacctnumber;

  FUNCTION getacctdetailsbycustid(pcustid IN VARCHAR2) RETURN SYS_REFCURSOR IS
    o_refcursor SYS_REFCURSOR;
    v_acctno    VARCHAR2(20);
  BEGIN
    /*SELECT *
     FROM sttm_cust_account
    WHERE cust_no = pcustid
      and auth_stat = 'A'
      and record_stat = 'O';*/
    SELECT cust_ac_no
      into v_acctno
      FROM sttm_cust_account
     WHERE cust_no = pcustid
       and auth_stat = 'A'
       and record_stat = 'O'
       and rownum < 2;
    OPEN o_refcursor FOR
    
      SELECT *
        FROM sttm_cust_account
       WHERE auth_stat = 'A'
         and record_stat = 'O'
            
         and cust_Ac_no in
             (select CUST_AC_NO
                from (select s.*,
                             w.address location,
                             w.customer_no,
                             '0000000' emp_number,
                             'Union Bank' full_name,
                             'customerservice@unionbankng.com' email,
                             '+234-1-2716816' mobile,
                             '' notinuse,
                             'HEAD OFFICE' branch_name,
                             w.cust_email,
                             w.cust_phone_no
                        from (select branch_code,
                                     ac_desc,
                                     cust_no,
                                     cust_Ac_no,
                                     account_class,
                                     ccy,
                                     CASE account_type
                                       WHEN 'U' THEN
                                        'Current'
                                       WHEN 'S' THEN
                                        'Savings'
                                       ELSE
                                        'Bank'
                                     END account_type
                                from sttm_cust_account y
                               where cust_no in
                                     (select customer
                                        from cstb_relationship_linkage y
                                       where ref_no in
                                             (select cust_no
                                                from sttm_cust_account
                                               where cust_ac_no = v_acctno)
                                         and category = 'C'
                                         and relationship != 'AUS')
                              union
                              select branch_code,
                                     ac_desc,
                                     cust_no,
                                     cust_Ac_no,
                                     account_class,
                                     ccy,
                                     CASE account_type
                                       WHEN 'U' THEN
                                        'Current'
                                       WHEN 'S' THEN
                                        'Savings'
                                       ELSE
                                        'Bank'
                                     END account_type
                                from sttm_cust_account y
                               where cust_no in
                                     (select customer
                                        from cstb_relationship_linkage y
                                       where ref_no in
                                             (select ref_no
                                                from cstb_relationship_linkage y
                                               where customer in
                                                     (select cust_no
                                                        from sttm_cust_account
                                                       where cust_ac_no =
                                                             v_acctno)
                                                 and category = 'C'
                                                 and relationship = 'SUB')
                                         and relationship != 'AUS')) s,
                             (select c.address_line1 || ' ' || c.address_line2 || ' ' ||
                                     c.address_line3 || ' ' || c.address_line4 address,
                                     --b.customer,b.emp_number, b.full_name,b.email,b.mobile,b.location notinuse,b.branch_name,
                                     c.customer_no,
                                     '0000000' emp_number,
                                     'Union Bank' full_name,
                                     'customerservice@unionbankng.com' email,
                                     '+234-1-2716816' mobile,
                                     '' notinuse,
                                     'HEAD OFFICE' branch_name,
                                     m.e_mail cust_email,
                                     COALESCE(TRIM(m.mobile_number),
                                              TRIM(m.telephone),
                                              TRIM(m.home_tel_no)) cust_phone_no
                                FROM sttm_customer c, sttm_cust_personal m
                               where c.customer_no = m.customer_no) w
                       where s.cust_no = w.customer_no(+))
              
              );
  
    RETURN o_refcursor;
  END getacctdetailsbycustid;

  FUNCTION createUser(o_reference       out varchar2,
                      i_USER_ID         IN INTEGER,
                      i_USERNAME        IN VARCHAR2,
                      i_FIRST_NAME      IN VARCHAR2,
                      i_LAST_NAME       IN VARCHAR2,
                      i_MIDDLE_NAME     IN VARCHAR2,
                      i_ADDRESS         IN VARCHAR2,
                      i_OFFICE_PHONE_NO IN VARCHAR2,
                      i_MOBILE_PHONE_NO IN VARCHAR2,
                      i_JOB_TITLE       IN VARCHAR2,
                      i_USER_TYPE_ID    IN VARCHAR2,
                      i_EMAIL           IN VARCHAR2,
                      i_CHANGE_PASSWORD IN VARCHAR2,
                      
                      i_CREATED_BY IN INTEGER,
                      
                      i_LAST_MODIFIED_BY IN NUMBER,
                      
                      i_APPROVAL_BY            IN INTEGER,
                      i_CORP_ID                IN NUMBER,
                      i_DEPT_ID                IN NUMBER,
                      i_APPROVAL_LIMIT         IN NUMBER,
                      i_HAS_GLOBAL_ACCT_ACCESS IN VARCHAR2,
                      i_IS_SIGNATORY           IN VARCHAR2,
                      i_REQUEST_TYPE_ID        IN VARCHAR2,
                      i_MENU_ID                IN integer,
                      i_AUTO_APPROVAL_ENABLED  varchar2,
                      i_HAS_TOKEN              char,
                      i_TOKEN_DELIVERED        CHAR,
                      p_context_url            varchar2,
                      p_ip_mac_address         varchar2,
                      p_session_id             varchar2,
                      p_view_balance           varchar2) RETURN VARCHAR2 IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_userid         NUMBER := 0;
    v_reqid          NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    -- v_has_token      char(1);
    v_exist_count integer := 0;
  BEGIN
    --ensures that corporate token status is always condisidered for users.
    --select a.has_token
    -- into v_has_token
    -- from corporate_profile a
    -- where a.corp_id = i_CORP_ID;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      --validate against creation of multipe users for sole proprietorship
      select count(1)
        into v_exist_count
        from user_profile a
       where a.corp_id = i_CORP_ID
         and isCorporateSoleProprietorship(i_CORP_ID) = 'Y';
    
      if (v_exist_count > 0) then
        return '99~~Sole Proprietor can only have one user.';
      else
      
        SELECT USER_PROFILE_SEQ.NEXTVAL INTO v_userid FROM DUAL;
        SELECT USER_PROFILE_REQ_SEQ.nextval INTO v_reqid FROM DUAL;
      
        --CORPORATE_PROFILE_REQ_SEQ
        INSERT INTO USER_PROFILE
          (USER_ID,
           USERNAME,
           FIRST_NAME,
           LAST_NAME,
           MIDDLE_NAME,
           ADDRESS,
           OFFICE_PHONE_NO,
           MOBILE_PHONE_NO,
           JOB_TITLE,
           USER_TYPE_ID,
           EMAIL,
           CHANGE_PASSWORD,
           LAST_LOGON_DATE,
           CREATED_BY,
           CREATED_DATE,
           --LAST_MODIFIED_BY,
           --LAST_MODIFIED_DATE,
           RECORD_STATUS_ID,
           APPROVAL_STATUS_ID,
           --APPROVAL_DATE,
           --APPROVAL_BY,
           CORP_ID,
           DEPT_ID,
           APPROVAL_LIMIT,
           HAS_GLOBAL_ACCT_ACCESS,
           IS_SIGNATORY,
           REQUEST_TYPE_ID,
           -- AUTO_APPROVAL_ENABLED,
           enable_token,
           -- TOKEN_DELIVERED, 
           user_password
           -- SECURITY_TOKEN_FLAG,SECURITY_TOKEN
          ,
           VIEW_ACCT_BALANCE) --correct
        VALUES
          (v_userid,
           lower(i_USERNAME),
           i_FIRST_NAME,
           i_LAST_NAME,
           i_MIDDLE_NAME,
           i_ADDRESS,
           i_OFFICE_PHONE_NO,
           i_MOBILE_PHONE_NO,
           i_JOB_TITLE,
           i_USER_TYPE_ID,
           i_EMAIL,
           'Y',
           sysdate,
           i_CREATED_BY,
           sysdate, --i_CREATED_DATE,
           --i_LAST_MODIFIED_BY,
           --i_LAST_MODIFIED_DATE,
           v_recordstatus, -- i_RECORD_STATUS_ID,
           v_approvalstatus, -- i_APPROVAL_STATUS_ID,
           --i_APPROVAL_DATE,
           --i_APPROVAL_BY,
           i_CORP_ID,
           case i_DEPT_ID when 0 then null else i_DEPT_ID end,
           decode(i_APPROVAL_LIMIT, null, 0, i_APPROVAL_LIMIT),
           decode(i_HAS_GLOBAL_ACCT_ACCESS,
                  null,
                  'N',
                  i_HAS_GLOBAL_ACCT_ACCESS),
           decode(i_IS_SIGNATORY, null, 'N', i_IS_SIGNATORY),
           i_REQUEST_TYPE_ID,
           -- 'N',--i_AUTO_APPROVAL_ENABLED,
           -- v_has_token, --i_HAS_TOKEN,
           i_HAS_TOKEN,
           -- i_TOKEN_DELIVERED,
           'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
           --'Y',
           -- 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
          ,
           p_view_balance);
      
        INSERT INTO USER_PROFILE_REQ
          (USER_ID_REQ,
           USER_ID,
           USERNAME,
           FIRST_NAME,
           LAST_NAME,
           MIDDLE_NAME,
           ADDRESS,
           OFFICE_PHONE_NO,
           MOBILE_PHONE_NO,
           JOB_TITLE,
           USER_TYPE_ID,
           EMAIL,
           CHANGE_PASSWORD,
           LAST_LOGON_DATE,
           CREATED_BY,
           CREATED_DATE,
           --LAST_MODIFIED_BY,
           --LAST_MODIFIED_DATE,
           RECORD_STATUS_ID,
           APPROVAL_STATUS_ID,
           --APPROVAL_DATE,
           --APPROVAL_BY,
           CORP_ID,
           DEPT_ID,
           APPROVAL_LIMIT,
           HAS_GLOBAL_ACCT_ACCESS,
           IS_SIGNATORY,
           REQUEST_TYPE_ID,
           enable_token,
           PARENT_TABLE_ID,
           VIEW_ACCT_BALANCE)
        VALUES
          (v_reqid,
           v_userid,
           lower(i_USERNAME),
           i_FIRST_NAME,
           i_LAST_NAME,
           i_MIDDLE_NAME,
           i_ADDRESS,
           i_OFFICE_PHONE_NO,
           i_MOBILE_PHONE_NO,
           i_JOB_TITLE,
           i_USER_TYPE_ID,
           i_EMAIL,
           i_CHANGE_PASSWORD,
           sysdate,
           i_CREATED_BY,
           sysdate, --i_CREATED_DATE,
           --i_LAST_MODIFIED_BY,
           --i_LAST_MODIFIED_DATE,
           v_recordstatus, -- i_RECORD_STATUS_ID,
           v_approvalstatus, -- i_APPROVAL_STATUS_ID,
           --i_APPROVAL_DATE,
           --i_APPROVAL_BY,
           i_CORP_ID,
           case i_DEPT_ID when 0 then null else i_DEPT_ID end,
           case i_CORP_ID when 1 then 0 else
           decode(i_APPROVAL_LIMIT, null, 0, i_APPROVAL_LIMIT) end,
           decode(i_HAS_GLOBAL_ACCT_ACCESS,
                  null,
                  'N',
                  i_HAS_GLOBAL_ACCT_ACCESS),
           decode(i_IS_SIGNATORY, null, 'N', i_IS_SIGNATORY),
           i_REQUEST_TYPE_ID,
           i_has_token,
           v_userid,
           p_view_balance);
      end if;
    ELSE
      -- INSERT INTO CORPORATE_PROFILE_TRAIL
      --  SELECT * FROM CORPORATE_PROFILE WHERE CORP_ID = p_CORP_ID;
      SELECT USER_PROFILE_REQ_SEQ.nextval INTO v_reqid FROM DUAL;
      INSERT INTO USER_PROFILE_REQ
        (USER_ID_REQ,
         USER_ID,
         USERNAME,
         FIRST_NAME,
         LAST_NAME,
         MIDDLE_NAME,
         ADDRESS,
         OFFICE_PHONE_NO,
         MOBILE_PHONE_NO,
         JOB_TITLE,
         USER_TYPE_ID,
         EMAIL,
         CHANGE_PASSWORD,
         LAST_LOGON_DATE,
         CREATED_BY,
         CREATED_DATE,
         --LAST_MODIFIED_BY,
         --LAST_MODIFIED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         --APPROVAL_DATE,
         --APPROVAL_BY,
         CORP_ID,
         DEPT_ID,
         APPROVAL_LIMIT,
         HAS_GLOBAL_ACCT_ACCESS,
         IS_SIGNATORY,
         REQUEST_TYPE_ID,
         PARENT_TABLE_ID,
         enable_token,
         VIEW_ACCT_BALANCE)
      VALUES
        (v_reqid,
         i_USER_ID,
         lower(i_USERNAME),
         i_FIRST_NAME,
         i_LAST_NAME,
         i_MIDDLE_NAME,
         i_ADDRESS,
         i_OFFICE_PHONE_NO,
         i_MOBILE_PHONE_NO,
         i_JOB_TITLE,
         i_USER_TYPE_ID,
         i_EMAIL,
         i_CHANGE_PASSWORD,
         sysdate,
         i_CREATED_BY,
         sysdate, --i_CREATED_DATE,
         --i_LAST_MODIFIED_BY,
         --i_LAST_MODIFIED_DATE,
         v_recordstatus, -- i_RECORD_STATUS_ID,
         v_approvalstatus, -- i_APPROVAL_STATUS_ID,
         --i_APPROVAL_DATE,
         --i_APPROVAL_BY,
         i_CORP_ID,
         case i_DEPT_ID when 0 then null else i_DEPT_ID end,
         decode(i_APPROVAL_LIMIT, null, 0, i_APPROVAL_LIMIT),
         decode(i_HAS_GLOBAL_ACCT_ACCESS,
                null,
                'N',
                i_HAS_GLOBAL_ACCT_ACCESS),
         decode(i_IS_SIGNATORY, null, 'N', i_IS_SIGNATORY),
         i_REQUEST_TYPE_ID,
         i_USER_ID,
         i_has_token,
         p_view_balance);
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_reqid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      --commit;
      if (v_userid = 0) then
        o_reference := i_USER_ID;
      else
        o_reference := v_userid;
      end if;
    else
      rollback;
    end if;
  
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'USER-PROFILE', --event category
                   'recordid~' || o_reference || '~~requestid~' || v_reqid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_reqid);
  
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.USER_PROFILE');
    
      COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END;

  FUNCTION createcorporate(o_reference             out varchar2,
                           p_MOBILE_PHONE_NO       IN VARCHAR2,
                           p_CREATED_BY            IN VARCHAR2,
                           p_CUSTOMER_ID           IN VARCHAR2,
                           p_CORP_ID               in VARCHAR2,
                           p_EMAIL                 IN VARCHAR2,
                           p_OFFICE_PHONE_NO       IN VARCHAR2,
                           p_NAME                  IN VARCHAR2,
                           p_RM_EMAIL              IN VARCHAR2,
                           p_CORPORATE_ID          IN VARCHAR2,
                           p_ADDRESS               IN VARCHAR2,
                           p_APPROVAL_COMMENT      IN VARCHAR2,
                           p_REQUEST_TYPE_ID       IN VARCHAR2,
                           p_MENU_ID               IN VARCHAR2,
                           p_POSTING_OPTION_ID     in varchar2,
                           p_HOLDING_ACCOUNT_ID    varchar2,
                           p_AUTO_APPROVAL_ENABLED varchar2,
                           p_HAS_TOKEN             char,
                           p_IS_SOLEPROPRIETOR     char,
                           p_corporate_type_id     integer,
                           p_enable_Verifier_Token char,
                           p_enable_Inputter_Token char,
                           p_authorizer_Token_Flag char,
                           p_narration_option_id   integer,
                           p_context_url           varchar2,
                           p_ip_mac_address        varchar2,
                           p_session_id            varchar2) RETURN VARCHAR2 IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(p_REQUEST_TYPE_ID);
    v_corpid         NUMBER;
    v_reqid          NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(p_REQUEST_TYPE_ID);
  BEGIN
    --SET TRANSACTION READ WRITE;
    SELECT CORPORATE_PROFILE_REQ_SEQ.nextval INTO v_reqid FROM DUAL;
  
    IF (p_REQUEST_TYPE_ID = '1') -- NEW
     THEN
      SELECT CORPORATE_PROFILE_SEQ.NEXTVAL INTO v_corpid FROM DUAL;
      -- SELECT CORPORATE_PROFILE_REQ_SEQ.nextval INTO v_reqid FROM DUAL;
    
      --CORPORATE_PROFILE_REQ_SEQ
    
      INSERT INTO CORPORATE_PROFILE_REQ
        (MOBILE_PHONE_NO,
         CREATED_BY,
         LAST_MODIFIED_BY,
         CREATED_DATE,
         CORP_REQ_ID,
         LAST_MODIFIED_DATE,
         APPROVAL_STATUS_ID,
         EMAIL,
         OFFICE_PHONE_NO,
         NAME,
         RM_EMAIL,
         CORPORATE_ID,
         ADDRESS,
         CUSTOMER_ID,
         REQUEST_TYPE_ID,
         PARENT_TABLE_ID,
         CORP_ID,
         POSTING_OPTION_ID,
         HOLDING_ACCOUNT_ID,
         AUTO_APPROVAL_ENABLED,
         HAS_TOKEN,
         IS_A_SOLEPROPRIATOR,
         corporate_type_id,
         enable_Verifier_Token,
         enable_Inputter_Token,
         authorizer_Token_Flag,
         narration_option_id)
      VALUES
        (p_MOBILE_PHONE_NO,
         p_CREATED_BY,
         p_CREATED_BY,
         SYSDATE,
         v_reqid,
         SYSDATE,
         v_approvalstatus,
         p_EMAIL,
         p_OFFICE_PHONE_NO,
         p_NAME,
         p_RM_EMAIL,
         p_CORPORATE_ID,
         p_ADDRESS,
         p_CUSTOMER_ID,
         p_REQUEST_TYPE_ID,
         v_corpid,
         v_corpid,
         p_POSTING_OPTION_ID,
         p_HOLDING_ACCOUNT_ID,
         p_AUTO_APPROVAL_ENABLED,
         p_HAS_TOKEN,
         p_IS_SOLEPROPRIETOR,
         p_corporate_type_id,
         p_enable_Verifier_Token,
         p_enable_Inputter_Token,
         p_authorizer_Token_Flag,
         p_narration_option_id);
      INSERT INTO CORPORATE_PROFILE
        (MOBILE_PHONE_NO,
         CREATED_BY,
         LAST_MODIFIED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         CORP_ID,
         LAST_MODIFIED_DATE,
         APPROVAL_STATUS_ID,
         EMAIL,
         OFFICE_PHONE_NO,
         NAME,
         RM_EMAIL,
         CORPORATE_ID,
         ADDRESS,
         CUSTOMER_ID,
         REQUEST_TYPE_ID,
         POSTING_OPTION_ID,
         HOLDING_ACCOUNT_ID,
         AUTO_APPROVAL_ENABLED,
         HAS_TOKEN,
         IS_A_SOLEPROPRIATOR,
         corporate_type_id,
         enable_Verifier_Token,
         enable_Inputter_Token,
         authorizer_Token_Flag,
         narration_option_id)
      VALUES
        (p_MOBILE_PHONE_NO,
         p_CREATED_BY,
         p_CREATED_BY,
         SYSDATE,
         v_recordstatus,
         v_corpid,
         SYSDATE,
         v_approvalstatus,
         p_EMAIL,
         p_OFFICE_PHONE_NO,
         p_NAME,
         p_RM_EMAIL,
         p_CORPORATE_ID,
         p_ADDRESS,
         p_CUSTOMER_ID,
         p_REQUEST_TYPE_ID,
         p_POSTING_OPTION_ID,
         p_HOLDING_ACCOUNT_ID,
         p_AUTO_APPROVAL_ENABLED,
         p_HAS_TOKEN,
         p_IS_SOLEPROPRIETOR,
         case p_corporate_type_id when 0 then 3 else p_corporate_type_id end,
         p_enable_Verifier_Token,
         p_enable_Inputter_Token,
         p_authorizer_Token_Flag,
         p_narration_option_id);
    ELSIF (p_REQUEST_TYPE_ID = '2') THEN
      -- EDIT
    
      v_corpid := p_CORP_ID;
    
      INSERT INTO CORPORATE_PROFILE_REQ
        (MOBILE_PHONE_NO,
         CREATED_BY,
         LAST_MODIFIED_BY,
         CREATED_DATE,
         CORP_REQ_ID,
         LAST_MODIFIED_DATE,
         APPROVAL_STATUS_ID,
         EMAIL,
         OFFICE_PHONE_NO,
         NAME,
         RM_EMAIL,
         CORPORATE_ID,
         ADDRESS,
         CUSTOMER_ID,
         REQUEST_TYPE_ID,
         PARENT_TABLE_ID,
         CORP_ID,
         POSTING_OPTION_ID,
         HOLDING_ACCOUNT_ID,
         AUTO_APPROVAL_ENABLED,
         HAS_TOKEN,
         IS_A_SOLEPROPRIATOR,
         corporate_type_id,
         enable_Verifier_Token,
         enable_Inputter_Token,
         authorizer_Token_Flag,
         narration_option_id)
      VALUES
        (p_MOBILE_PHONE_NO,
         p_CREATED_BY,
         p_CREATED_BY,
         SYSDATE,
         v_reqid,
         SYSDATE,
         v_approvalstatus,
         p_EMAIL,
         p_OFFICE_PHONE_NO,
         p_NAME,
         p_RM_EMAIL,
         p_CORPORATE_ID,
         p_ADDRESS,
         p_CUSTOMER_ID,
         p_REQUEST_TYPE_ID,
         v_corpid,
         v_corpid,
         p_POSTING_OPTION_ID,
         p_HOLDING_ACCOUNT_ID,
         p_AUTO_APPROVAL_ENABLED,
         p_HAS_TOKEN,
         p_IS_SOLEPROPRIETOR,
         case p_corporate_type_id when 0 then 3 else p_corporate_type_id end,
         p_enable_Verifier_Token,
         p_enable_Inputter_Token,
         p_authorizer_Token_Flag,
         p_narration_option_id);
    ELSE
      --DELETE,DEACTIVATE,ACTIVATE
      v_corpid := p_CORP_ID;
      -- FOR item IN (SELECT * FROM CORPORATE_PROFILE WHERE CORP_ID=v_corpid) LOOP
      --  BEGIN
      --v_corpid :=p_CORP_ID;
    
      INSERT INTO CORPORATE_PROFILE_REQ
        (MOBILE_PHONE_NO,
         CREATED_BY,
         LAST_MODIFIED_BY,
         CREATED_DATE,
         CORP_REQ_ID,
         LAST_MODIFIED_DATE,
         APPROVAL_STATUS_ID,
         EMAIL,
         OFFICE_PHONE_NO,
         NAME,
         RM_EMAIL,
         CORPORATE_ID,
         ADDRESS,
         CUSTOMER_ID,
         REQUEST_TYPE_ID,
         PARENT_TABLE_ID,
         CORP_ID,
         POSTING_OPTION_ID,
         HOLDING_ACCOUNT_ID,
         AUTO_APPROVAL_ENABLED,
         HAS_TOKEN,
         IS_A_SOLEPROPRIATOR,
         corporate_type_id,
         enable_Verifier_Token,
         enable_Inputter_Token,
         authorizer_Token_Flag,
         narration_option_id)
      --VALUES
      -- (
        SELECT MOBILE_PHONE_NO,
               p_CREATED_BY,
               p_CREATED_BY,
               SYSDATE,
               v_reqid,
               SYSDATE,
               v_approvalstatus,
               EMAIL,
               OFFICE_PHONE_NO,
               NAME,
               RM_EMAIL,
               CORPORATE_ID,
               ADDRESS,
               CUSTOMER_ID,
               p_REQUEST_TYPE_ID,
               v_corpid,
               v_corpid,
               POSTING_OPTION_ID,
               HOLDING_ACCOUNT_ID,
               AUTO_APPROVAL_ENABLED,
               HAS_TOKEN,
               IS_A_SOLEPROPRIATOR,
               case p_corporate_type_id
                 when 0 then
                  3
                 else
                  corporate_type_id
               end,
               enable_Verifier_Token,
               enable_Inputter_Token,
               authorizer_Token_Flag,
               narration_option_id
          FROM CORPORATE_PROFILE
         WHERE CORP_ID = v_corpid;
    
      -- END;
      -- END LOOP;
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        p_CREATED_BY,
                                                        p_MENU_ID,
                                                        p_REQUEST_TYPE_ID,
                                                        v_reqid,
                                                        0,
                                                        v_corpid,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
    
      o_reference := v_corpid;
      -- commit;
      --rollback;
    
    else
      rollback;
    end if;
  
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'CORPORATE-PROFILE',
                   'recordid~' || o_reference || '~~requestid~' || v_reqid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_MENU_ID,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   v_reqid);
  
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
    
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.CORPORATE_PROFILE');
    
      --COMMIT;
    
      RETURN getFriendlyExceptionMessage(v_err_message, p_MENU_ID);
  END;



 FUNCTION addcorporateaccountOtherBank(o_reference       out varchar2,
                               p_CORP_ACCT_ID    integer,
                               p_CREATED_BY      IN integer,
                               p_ACCOUNT_TYPE    IN VARCHAR2,
                               p_CORP_ID         IN integer,
                               p_RM_NAME         IN VARCHAR2,
                               p_RM_CODE         IN VARCHAR2,
                               p_ACCOUNT_NAME    IN VARCHAR2,
                               p_RM_EMAIL        IN VARCHAR2,
                               p_ACCOUNT_NUMBER  IN VARCHAR2,
                               p_REQUEST_TYPE_ID IN integer,
                               p_MENU_ID         integer,
                               p_context_url     varchar2,
                               p_ip_mac_address  varchar2,
                               p_session_id      varchar2,
							   p_Bank_Code      varchar2
							   ) RETURN VARCHAR2 IS
    v_err_message        VARCHAR2(3000);
    v_response           VARCHAR2(100);
    v_recordstatus       VARCHAR2(2) := getRecordStatusId(p_REQUEST_TYPE_ID);
    v_recordid           NUMBER;
    v_requestid          NUMBER;
    v_validation_flag    varchar2(100);
    v_approvalstatus     VARCHAR2(2) := getApprovalStatusId(p_REQUEST_TYPE_ID);
    rw_CORPORATE_ACCOUNT CORPORATE_ACCOUNT%rowtype;
  BEGIN
    SELECT CORPORATE_ACCOUNT_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
  
    begin
      select *
        into rw_CORPORATE_ACCOUNT
        from CORPORATE_ACCOUNT a
       where a.CORP_ACCT_ID = p_CORP_ACCT_ID;
    
    exception
      when no_data_found then
        v_err_message := '';
    end;
  
  
    IF (p_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_ACCOUNT_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CORPORATE_ACCOUNT
        (CREATED_BY,
         ACCOUNT_TYPE,
         LAST_MODIFIED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         CORP_ID,
         LAST_MODIFIED_DATE,
         APPROVAL_STATUS_ID,
         RM_NAME,
         RM_CODE,
         ACCOUNT_NAME,
         RM_EMAIL,
         CORP_ACCT_ID,
         ACCOUNT_NUMBER,
         REQUEST_TYPE_ID,BANK_CODE)
      VALUES
        (p_CREATED_BY,
         p_ACCOUNT_TYPE,
         p_CREATED_BY,
         SYSDATE,
         v_recordstatus,
         p_CORP_ID,
         SYSDATE,
         v_approvalstatus,
         p_RM_NAME,
         p_RM_CODE,
         p_ACCOUNT_NAME,
         p_RM_EMAIL,
         v_recordid,
         p_ACCOUNT_NUMBER,
         p_REQUEST_TYPE_ID,p_Bank_Code);
    
    else
    
      v_recordid := p_CORP_ACCT_ID;
    
    END IF;
  
    INSERT INTO CORPORATE_ACCOUNT_REQ
      (CREATED_BY,
       ACCOUNT_TYPE,
       LAST_MODIFIED_BY,
       CREATED_DATE,
       RECORD_STATUS_ID,
       CORP_ID,
       LAST_MODIFIED_DATE,
       APPROVAL_STATUS_ID,
       RM_NAME,
       RM_CODE,
       ACCOUNT_NAME,
       RM_EMAIL,
       CORP_ACCT_ID,
       ACCOUNT_NUMBER,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID,BANK_CODE)
    VALUES
      (p_CREATED_BY,
       nvl(p_ACCOUNT_TYPE, rw_CORPORATE_ACCOUNT.ACCOUNT_TYPE),
       p_CREATED_BY,
       SYSDATE,
       v_recordstatus,
       p_CORP_ID,
       SYSDATE,
       v_approvalstatus,
       nvl(p_RM_NAME, rw_CORPORATE_ACCOUNT.RM_NAME),
       nvl(p_RM_CODE, rw_CORPORATE_ACCOUNT.RM_CODE),
       nvl(p_ACCOUNT_NAME, rw_CORPORATE_ACCOUNT.ACCOUNT_NAME),
       nvl(p_RM_EMAIL, rw_CORPORATE_ACCOUNT.RM_EMAIL),
       CORPORATE_ACCOUNT_SEQ.NEXTVAL,
       nvl(p_ACCOUNT_NUMBER, rw_CORPORATE_ACCOUNT.ACCOUNT_NUMBER),
       p_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid,p_Bank_Code);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        p_CREATED_BY,
                                                        p_MENU_ID,
                                                        p_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        p_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      -- commit;
      o_reference := v_recordid;
    else
      rollback;
    end if;
  
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'CORPORATE-ACCOUNT', --event category
                   'recordid~' || o_reference || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_MENU_ID,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
  
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.addcorporateaccount');
    
      -- COMMIT;
      RETURN getFriendlyExceptionMessage(v_err_message, p_MENU_ID);
  END addcorporateaccountOtherBank;
  FUNCTION addcorporateaccount(o_reference       out varchar2,
                               p_CORP_ACCT_ID    integer,
                               p_CREATED_BY      IN integer,
                               p_ACCOUNT_TYPE    IN VARCHAR2,
                               p_CORP_ID         IN integer,
                               p_RM_NAME         IN VARCHAR2,
                               p_RM_CODE         IN VARCHAR2,
                               p_ACCOUNT_NAME    IN VARCHAR2,
                               p_RM_EMAIL        IN VARCHAR2,
                               p_ACCOUNT_NUMBER  IN VARCHAR2,
                               p_REQUEST_TYPE_ID IN integer,
                               p_MENU_ID         integer,
                               p_context_url     varchar2,
                               p_ip_mac_address  varchar2,
                               p_session_id      varchar2) RETURN VARCHAR2 IS
    v_err_message        VARCHAR2(3000);
    v_response           VARCHAR2(100);
    v_recordstatus       VARCHAR2(2) := getRecordStatusId(p_REQUEST_TYPE_ID);
    v_recordid           NUMBER;
    v_requestid          NUMBER;
    v_validation_flag    varchar2(100);
    v_approvalstatus     VARCHAR2(2) := getApprovalStatusId(p_REQUEST_TYPE_ID);
    rw_CORPORATE_ACCOUNT CORPORATE_ACCOUNT%rowtype;
  BEGIN
    SELECT CORPORATE_ACCOUNT_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
  
    begin
      select *
        into rw_CORPORATE_ACCOUNT
        from CORPORATE_ACCOUNT a
       where a.CORP_ACCT_ID = p_CORP_ACCT_ID;
    
    exception
      when no_data_found then
        v_err_message := '';
    end;
    if (p_REQUEST_TYPE_ID in (1, 2, 3, 4)) then
    
      v_validation_flag := validateAccount(NVL(p_ACCOUNT_NUMBER,
                                               rw_CORPORATE_ACCOUNT.ACCOUNT_NUMBER));
    
      if (v_validation_flag != '00') then
        return '99~~INVALID ACCOUNT NUMBER - ' || NVL(p_ACCOUNT_NUMBER,
                                                      rw_CORPORATE_ACCOUNT.ACCOUNT_NUMBER);
      end if;
    
    end if;
  
    IF (p_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_ACCOUNT_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CORPORATE_ACCOUNT
        (CREATED_BY,
         ACCOUNT_TYPE,
         LAST_MODIFIED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         CORP_ID,
         LAST_MODIFIED_DATE,
         APPROVAL_STATUS_ID,
         RM_NAME,
         RM_CODE,
         ACCOUNT_NAME,
         RM_EMAIL,
         CORP_ACCT_ID,
         ACCOUNT_NUMBER,
         REQUEST_TYPE_ID)
      VALUES
        (p_CREATED_BY,
         p_ACCOUNT_TYPE,
         p_CREATED_BY,
         SYSDATE,
         v_recordstatus,
         p_CORP_ID,
         SYSDATE,
         v_approvalstatus,
         p_RM_NAME,
         p_RM_CODE,
         p_ACCOUNT_NAME,
         p_RM_EMAIL,
         v_recordid,
         p_ACCOUNT_NUMBER,
         p_REQUEST_TYPE_ID);
    
    else
    
      v_recordid := p_CORP_ACCT_ID;
    
    END IF;
  
    INSERT INTO CORPORATE_ACCOUNT_REQ
      (CREATED_BY,
       ACCOUNT_TYPE,
       LAST_MODIFIED_BY,
       CREATED_DATE,
       RECORD_STATUS_ID,
       CORP_ID,
       LAST_MODIFIED_DATE,
       APPROVAL_STATUS_ID,
       RM_NAME,
       RM_CODE,
       ACCOUNT_NAME,
       RM_EMAIL,
       CORP_ACCT_ID,
       ACCOUNT_NUMBER,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (p_CREATED_BY,
       nvl(p_ACCOUNT_TYPE, rw_CORPORATE_ACCOUNT.ACCOUNT_TYPE),
       p_CREATED_BY,
       SYSDATE,
       v_recordstatus,
       p_CORP_ID,
       SYSDATE,
       v_approvalstatus,
       nvl(p_RM_NAME, rw_CORPORATE_ACCOUNT.RM_NAME),
       nvl(p_RM_CODE, rw_CORPORATE_ACCOUNT.RM_CODE),
       nvl(p_ACCOUNT_NAME, rw_CORPORATE_ACCOUNT.ACCOUNT_NAME),
       nvl(p_RM_EMAIL, rw_CORPORATE_ACCOUNT.RM_EMAIL),
       CORPORATE_ACCOUNT_SEQ.NEXTVAL,
       nvl(p_ACCOUNT_NUMBER, rw_CORPORATE_ACCOUNT.ACCOUNT_NUMBER),
       p_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        p_CREATED_BY,
                                                        p_MENU_ID,
                                                        p_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        p_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      -- commit;
      o_reference := v_recordid;
    else
      rollback;
    end if;
  
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'CORPORATE-ACCOUNT', --event category
                   'recordid~' || o_reference || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_MENU_ID,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
  
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.addcorporateaccount');
    
      -- COMMIT;
      RETURN getFriendlyExceptionMessage(v_err_message, p_MENU_ID);
  END addcorporateaccount;

  FUNCTION createCorporateRole(i_ROLE_ID    INTEGER,
                               i_NAME       VARCHAR2,
                               i_CORP_ID    INTEGER,
                               i_ROLE_TYPE  INTEGER,
                               i_CREATED_BY NUMBER,
                               
                               i_APPROVED_BY NUMBER,
                               
                               i_LAST_MODIFIED_BY NUMBER,
                               
                               i_REQUEST_TYPE_ID INTEGER,
                               i_MENU_ID         integer,
                               p_context_url     varchar2,
                               p_ip_mac_address  varchar2,
                               p_session_id      varchar2) RETURN VARCHAR2 IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    SELECT ROLES_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_ROLE_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO ROLES
        (ROLE_ID,
         NAME,
         CORP_ID,
         ROLE_TYPE_ID,
         CREATED_BY,
         CREATED_DATE,
         -- APPROVED_BY,
         -- APPROVED_DATE,
         -- LAST_MODIFIED_BY,
         -- LAST_MODIFIED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,
         i_NAME,
         i_CORP_ID,
         i_ROLE_TYPE,
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         -- i_APPROVED_BY */,
         -- i_APPROVED_DATE */,
         -- i_LAST_MODIFIED_BY */,
         -- i_LAST_MODIFIED_DATE */,
         v_recordstatus, --i_RECORD_STATUS_ID */,
         v_approvalstatus, --i_APPROVAL_STATUS_ID */
         i_REQUEST_TYPE_ID);
    
    ELSE
      v_recordid := i_ROLE_ID;
    
    END IF;
  
    INSERT INTO ROLES_REQ
      (ROLE_ID,
       NAME,
       CORP_ID,
       ROLE_TYPE_ID,
       CREATED_BY,
       CREATED_DATE,
       -- APPROVED_BY,
       -- APPROVED_DATE,
       -- LAST_MODIFIED_BY,
       -- LAST_MODIFIED_DATE,
       RECORD_STATUS_ID,
       APPROVAL_STATUS_ID,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_recordid,
       i_NAME,
       i_CORP_ID,
       i_ROLE_TYPE,
       i_CREATED_BY,
       SYSDATE, --i_CREATED_DATE,
       -- i_APPROVED_BY */,
       -- i_APPROVED_DATE */,
       -- i_LAST_MODIFIED_BY */,
       -- i_LAST_MODIFIED_DATE */,
       v_recordstatus, --i_RECORD_STATUS_ID */,
       v_approvalstatus, --i_APPROVAL_STATUS_ID */
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CORPORATE-ROLE', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createCorporateRole');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;

  FUNCTION getActiveCorporateProfiles RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select *
        from corporate_profile a
       where a.record_status_id in (1, 2)
         and corp_id not in (1)
      --   and rownum < 20
       order by created_date desc;
  
    RETURN c_refcursor;
  END getActiveCorporateProfiles;

  function addUserToRole(o_reference    out varchar2,
                         i_USER_ROLE_ID INTEGER,
                         i_ROLE_ID      INTEGER,
                         i_USER_ID      INTEGER,
                         
                         i_CREATED_BY       INTEGER,
                         i_LAST_MODOFIED_BY INTEGER,
                         
                         i_APPROVAL_BY     NUMBER,
                         i_REQUEST_TYPE_ID INTEGER,
                         i_MENU_ID         INTEGER,
                         p_context_url     varchar2,
                         p_ip_mac_address  varchar2,
                         p_session_id      varchar2) RETURN VARCHAR2
  
   IS
    v_err_message         VARCHAR2(3000);
    v_response            VARCHAR2(100);
    v_recordstatus        VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid            NUMBER;
    v_requestid           NUMBER;
    v_merchant_corp_id    NUMBER;
    v_approvalstatus      VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_role_signatory_flag char(1) := 'N';
    v_user_signatory_flag char(1) := 'N';
  BEGIN
  
    select corp_id
      into v_merchant_corp_id
      from user_profile
     where user_id = i_USER_ID;
    select b.is_signatory
      into v_role_signatory_flag
      from roles a, ref_role_types b
     where a.role_type_id = b.role_type_id
       and a.role_id = i_ROLE_ID;
  
    select a.is_signatory
      into v_user_signatory_flag
      from user_profile a
     where a.user_id = i_USER_ID;
  
    if (v_role_signatory_flag = 'Y' and
       v_role_signatory_flag <> v_user_signatory_flag) then
      return '99~~Signatory Role cannot be added to a user without signatory privilege';
    end if;
  
    SELECT USER_ROLE_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_USER_ROLE_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO USER_ROLE
        (USER_ROLE_ID,
         ROLE_ID,
         USER_ID,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVAL_DATE,
         APPROVAL_BY,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- i_USER_ROLE_ID,
         i_ROLE_ID,
         i_USER_ID,
         sysdate, --i_CREATED_DATE,
         i_CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         i_APPROVAL_BY,
         i_REQUEST_TYPE_ID);
    
    else
    
      v_recordid := i_USER_ROLE_ID;
    
    END IF;
  
    INSERT INTO USER_ROLE_REQ
      (USER_ROLE_ID,
       ROLE_ID,
       USER_ID,
       CREATED_DATE,
       CREATED_BY,
       -- LAST_MODOFIED_BY, 
       -- LAST_MODIFIED_DATE, 
       RECORD_STATUS_ID,
       APPROVAL_STATUS_ID,
       APPROVAL_DATE,
       APPROVAL_BY,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_recordid, -- i_USER_ROLE_ID,
       i_ROLE_ID,
       i_USER_ID,
       sysdate, --i_CREATED_DATE,
       i_CREATED_BY,
       --i_LAST_MODOFIED_BY,
       -- i_LAST_MODIFIED_DATE,
       v_recordstatus,
       v_approvalstatus,
       sysdate,
       i_APPROVAL_BY,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        v_merchant_corp_id,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      --commit;
      o_reference := v_recordid;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'USER-ROLE', --event category
                   'recordid~' || o_reference || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.addUserToRole');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END addUserToRole;

  function addAppMenuRole(i_APPMENUROLEID INTEGER,
                          i_APPMENUID     INTEGER,
                          i_ROLEID        INTEGER,
                          i_CREATED_BY    NUMBER,
                          
                          i_APPROVED_BY NUMBER,
                          
                          i_LASTMODIFIED_BY NUMBER,
                          
                          i_REQUEST_TYPE_ID integer,
                          i_MENU_ID         integer,
                          p_context_url     varchar2,
                          p_ip_mac_address  varchar2,
                          p_session_id      varchar2) RETURN VARCHAR2
  
   IS
    v_err_message      VARCHAR2(3000);
    v_response         VARCHAR2(100);
    v_recordstatus     VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid         NUMBER;
    v_requestid        NUMBER;
    v_merchant_corp_id NUMBER;
    v_approvalstatus   VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    select corp_id
      into v_merchant_corp_id
      from roles
     where role_id = i_ROLEID;
    SELECT APPMENUROLES_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_APPMENUROLES_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
    
      INSERT INTO APPMENUROLES
        (APPMENUROLEID,
         APPMENUID,
         ROLEID,
         CREATED_BY,
         CREATED_DATE,
         --APPROVED_BY,
         --APPROVED_DATE,
         LASTMODIFIED_BY,
         LASTMODIFIED_DATE,
         APPROVAL_STATUS_ID,
         RECORD_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- /* APPMENUROLEID */,
         i_APPMENUID,
         i_ROLEID,
         i_CREATED_BY,
         sysdate, --/* CREATED_DATE */,
         --/* APPROVED_BY */,
         --/* APPROVED_DATE */,
         i_LASTMODIFIED_BY,
         sysdate,
         v_approvalstatus,
         v_recordstatus,
         i_REQUEST_TYPE_ID);
    
    else
      v_recordid := i_APPMENUROLEID;
    END IF;
  
    INSERT INTO APPMENUROLES_REQ
      (APPMENUROLEID,
       APPMENUID,
       ROLEID,
       CREATED_BY,
       CREATED_DATE,
       --APPROVED_BY,
       --APPROVED_DATE,
       LASTMODIFIED_BY,
       LASTMODIFIED_DATE,
       APPROVAL_STATUS_ID,
       RECORD_STATUS_ID,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_recordid, -- /* APPMENUROLEID */,
       i_APPMENUID,
       i_ROLEID,
       i_CREATED_BY,
       sysdate, --/* CREATED_DATE */,
       --/* APPROVED_BY */,
       --/* APPROVED_DATE */,
       i_LASTMODIFIED_BY,
       sysdate,
       v_approvalstatus,
       v_recordstatus,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        v_merchant_corp_id,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'MENU-ROLE', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.addAppMenuRole');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END addAppMenuRole;

  function saveDepartment(i_DEPT_ID     NUMBER,
                          i_CORP_ID     NUMBER,
                          i_NAME        VARCHAR2,
                          i_DESCRIPTION VARCHAR2,
                          i_CREATED_BY  NUMBER,
                          
                          i_LAST_MODIFIED_BY NUMBER,
                          
                          i_APPROVAL_COMMENTS VARCHAR2,
                          i_APPROVED_BY       NUMBER,
                          
                          i_REQUEST_TYPE_ID integer,
                          i_MENU_ID         INTEGER,
                          p_context_url     varchar2,
                          p_ip_mac_address  varchar2,
                          p_session_id      varchar2) RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    SELECT DEPARTMENTS_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_DEPARTMENT_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
    
      INSERT INTO DEPARTMENTS
        (DEPT_ID,
         CORP_ID,
         NAME,
         DESCRIPTION,
         CREATED_BY,
         CREATED_DATE,
         LAST_MODIFIED_BY,
         LAST_MODIFIED_DATE,
         --APPROVAL_COMMENTS,
         ---APPROVED_BY,
         ---APPROVED_DATE,
         APPROVAL_STATUS_ID,
         RECORD_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- i_DEPT_ID */,
         i_CORP_ID,
         i_NAME,
         i_DESCRIPTION,
         i_CREATED_BY,
         sysdate, --i_CREATED_DATE,
         i_LAST_MODIFIED_BY,
         sysdate,
         --i_APPROVAL_COMMENTS,
         --i_APPROVED_BY,
         --i_APPROVED_DATE,
         v_approvalstatus,
         v_recordstatus,
         i_REQUEST_TYPE_ID);
    else
      v_recordid := i_DEPT_ID;
    END IF;
  
    INSERT INTO DEPARTMENTS_REQ
      (DEPT_ID,
       CORP_ID,
       NAME,
       DESCRIPTION,
       CREATED_BY,
       CREATED_DATE,
       LAST_MODIFIED_BY,
       LAST_MODIFIED_DATE,
       --APPROVAL_COMMENTS,
       ---APPROVED_BY,
       ---APPROVED_DATE,
       APPROVAL_STATUS_ID,
       RECORD_STATUS_ID,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_recordid, -- i_DEPT_ID */,
       i_CORP_ID,
       i_NAME,
       i_DESCRIPTION,
       i_CREATED_BY,
       sysdate, --i_CREATED_DATE,
       i_LAST_MODIFIED_BY,
       sysdate,
       --i_APPROVAL_COMMENTS,
       --i_APPROVED_BY,
       --i_APPROVED_DATE,
       v_approvalstatus,
       v_recordstatus,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'DEPARTMENT', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveDepartment');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END saveDepartment;

  FUNCTION getDepartmentsByCorpId(i_CorpId Number) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    if i_CorpId = 1 then
      OPEN c_refcursor FOR
        select *
          from departments a
         where corp_id = i_CorpId
           and a.name <> 'System'
           and a.record_status_id in (1, 2);
    else
    
      OPEN c_refcursor FOR
        select * from departments where corp_id = i_CorpId;
    end if;
    RETURN c_refcursor;
  END getDepartmentsByCorpId;

  FUNCTION getUserTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select * from ref_user_type;
    RETURN c_refcursor;
  END getUserTypes;

  FUNCTION approverecord(p_scheduleid      IN VARCHAR2,
                         p_userid          IN VARCHAR2,
                         p_approvaloption  IN VARCHAR2,
                         p_comments        IN VARCHAR2,
                         p_menuid          IN VARCHAR2,
                         p_REQUEST_TYPE_ID IN VARCHAR2,
                         p_auth_token_flag char,
                         p_auth_token_sno  varchar2,
                         p_context_url     varchar2,
                         p_ip_mac_address  varchar2,
                         p_session_id      varchar2) RETURN VARCHAR2 IS
    v_err_message                 VARCHAR2(3000);
    v_response                    VARCHAR2(200);
    v_approvalstatus              INTEGER;
    v_levelexpectedsignatorycount INTEGER;
    v_levelactualsignatorycount   INTEGER;
    v_routeexpectedsignatorycount INTEGER;
    v_routeactualsignatorycount   INTEGER;
    v_requesttableid              INTEGER;
    v_trantypeid                  INTEGER;
    v_approvaloption              VARCHAR2(10);
  
    v_corpid                 INTEGER;
    v_merchant_corpid        INTEGER;
    v_summarytableid         INTEGER;
    v_approvallevel          INTEGER;
    v_nextapprovallevel      INTEGER;
    v_nextapprovallevelexist INTEGER;
    v_routesignatoryid       INTEGER;
  
    v_APPROVAL_ROUTE_ID       INTEGER;
    v_ROUTE_TYPE_ID           INTEGER;
    v_REQUEST_TYPE_ID         INTEGER;
    v_APPROVAL_OPTIONS_ID     INTEGER;
    v_parenttableid           VARCHAR2(200);
    v_counter                 INTEGER;
    v_validatetoken           INTEGER;
    v_scheduleid              VARCHAR2(20);
    v_istokenused             VARCHAR2(20);
    v_REQ_SCHEDULE_SUMMARY_ID VARCHAR2(20);
    v_log_email_resp          varchar2(100);
    v_auth_token_count        number;
  BEGIN
    v_response    := '00~~OPERATION SUCCESSFULLY COMPLETED';
    v_istokenused := 'N';
    select corp_id
      into v_corpid
      from USER_PROFILE
     where USER_ID = p_userid;
  
    select a.APPROVAL_STATUS_ID,
           a.EXPECTED_SIGNATORY_COUNT,
           a.ACTUAL_SIGNATORY_COUNT,
           a.PARENT_TABLE_ID,
           a.TRANSACTION_TYPE_ID,
           a.CORP_ID,
           a.REQUEST_TABLE_ID,
           a.ROUTE_SIGNATORY_ID,
           b.EXPECTED_SIGNATORY_COUNT,
           b.ACTUAL_SIGNATORY_COUNT,
           a.REQ_SCHEDULE_SUMMARY_ID,
           b.APPROVAL_ROUTE_ID,
           b.ROUTE_TYPE_ID,
           a.APPROVAL_LEVEL,
           a.REQ_SCHEDULE_SUMMARY_ID,
           a.REQUEST_TYPE_ID,
           a.MERCHANT_CORP_ID
      into v_approvalstatus,
           v_levelexpectedsignatorycount,
           v_levelactualsignatorycount,
           v_parenttableid,
           v_trantypeid,
           v_corpid,
           v_requesttableid,
           v_routesignatoryid,
           v_routeexpectedsignatorycount,
           v_routeactualsignatorycount,
           v_summarytableid,
           v_APPROVAL_ROUTE_ID,
           v_ROUTE_TYPE_ID,
           v_approvallevel,
           v_REQ_SCHEDULE_SUMMARY_ID,
           v_REQUEST_TYPE_ID,
           v_merchant_corpid
      from APPROVAL_SCHEDULES a
      JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
        on b.SUMMARY_ID = a.REQ_SCHEDULE_SUMMARY_ID
       and b.CORP_ID = v_corpid
     where APPROVAL_SCHEDULE_ID = p_scheduleid;
  
    select APPROVAL_OPTIONS_ID
      into v_APPROVAL_OPTIONS_ID
      from APPROVAL_ROUTE
     where APPROVAL_ROUTE_ID = v_APPROVAL_ROUTE_ID
       and CORP_ID = v_corpid;
    IF (v_approvalstatus = 1) THEN
      IF (v_levelexpectedsignatorycount = v_levelactualsignatorycount) THEN
      
        v_response := '99~~APPROVAL ALREADY COMPLETED FOR LEVEL'; --APPROVAL COMPLETED for level
        RETURN v_response;
      ELSE
      
        IF (p_approvaloption = '1') THEN
          v_approvaloption := '2';
        ELSIF (p_approvaloption = '2') THEN
          v_approvaloption := '3';
        ELSE
          v_response := '99~~INVALID APPROVAL OPTION'; --INVALID APPROVAL OPTION
          RETURN v_response;
        END IF;
        --v_validatetoken (laterDate - earlierDate) * 24 * 60 * 60
        if (p_auth_token_sno is not null and length(p_auth_token_sno) > 0) then
          select count(1)
            into v_validatetoken
            from TOKEN_VALIDATION_LOG
           where VALIDATION_REF = p_auth_token_sno
             and RESPONSE_CODE = '1'
             and ((sysdate - CREATED_DATE) * 24 * 60 * 60) < 120;
          if (v_validatetoken = 0) then
            v_response := '99~~Token has expired or invalid. Kindly use another token and try again.'; --INVALID APPROVAL OPTION
            RETURN v_response;
          else
            v_istokenused := 'Y';
          end if;
        end if;
        INSERT INTO REQ_APPROVAL_SCHEDULE_ACTIONS
          (APPROVAL_SCHEDULE_ID,
           TRANSACTION_TYPE_ID,
           CORP_ID,
           APPROVAL_STATUS_ID,
           REQUEST_TABLE_ID,
           ROUTE_SIGNATORY_ID,
           APPROVAL_COMMENT,
           APPROVED_DATE,
           SCHEDULE_ACTION_ID,
           APPROVED_BY,
           PARENT_TABLE_ID,
           REQ_SCHEDULE_SUMMARY_ID,
           auth_token_flag,
           auth_token_sno)
        VALUES
          (p_scheduleid,
           v_trantypeid,
           v_corpid,
           v_approvaloption,
           v_requesttableid,
           v_routesignatoryid,
           p_comments,
           sysdate,
           REQ_APPROVAL_SCHEDULE_ACTN_SEQ.nextval,
           p_userid,
           v_parenttableid,
           v_REQ_SCHEDULE_SUMMARY_ID,
           v_istokenused,
           p_auth_token_sno);
      
        IF (p_approvaloption = '1') THEN
          v_levelactualsignatorycount := v_levelactualsignatorycount + 1;
          v_routeactualsignatorycount := v_routeactualsignatorycount + 1;
        
          IF (v_levelactualsignatorycount = v_levelexpectedsignatorycount) THEN
            UPDATE APPROVAL_SCHEDULES
               SET ACTUAL_SIGNATORY_COUNT = v_levelactualsignatorycount,
                   APPROVAL_STATUS_ID     = 2
             WHERE APPROVAL_SCHEDULE_ID = p_scheduleid;
            -- v_response := '00';
          ELSE
            UPDATE APPROVAL_SCHEDULES
               SET ACTUAL_SIGNATORY_COUNT = v_levelactualsignatorycount
             WHERE APPROVAL_SCHEDULE_ID = p_scheduleid;
            --v_response := '00';
          END IF;
        ELSIF (p_approvaloption = '2') THEN
          --REJECTED .. TERMINATE
          UPDATE APPROVAL_SCHEDULES
             SET ACTUAL_SIGNATORY_COUNT = v_levelactualsignatorycount,
                 APPROVAL_STATUS_ID     = 3
           WHERE APPROVAL_SCHEDULE_ID = p_scheduleid;
          -- v_response := '00';--
        
        END IF;
      
        IF (v_routeactualsignatorycount = 1) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER1_STATUS_ID = v_approvaloption,
                 APPROVER1_COMMENT   = p_comments,
                 APPROVER1_DATE      = SYSDATE,
                 APPROVER1_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 2) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER2_STATUS_ID = v_approvaloption,
                 APPROVER2_COMMENT   = p_comments,
                 APPROVER2_DATE      = SYSDATE,
                 APPROVER2_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 3) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER3_STATUS_ID = v_approvaloption,
                 APPROVER3_COMMENT   = p_comments,
                 APPROVER3_DATE      = SYSDATE,
                 APPROVER3_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 4) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER4_STATUS_ID = v_approvaloption,
                 APPROVER4_COMMENT   = p_comments,
                 APPROVER4_DATE      = SYSDATE,
                 APPROVER4_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 5) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER5_STATUS_ID = v_approvaloption,
                 APPROVER5_COMMENT   = p_comments,
                 APPROVER5_DATE      = SYSDATE,
                 APPROVER5_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 6) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER6_STATUS_ID = v_approvaloption,
                 APPROVER6_COMMENT   = p_comments,
                 APPROVER6_DATE      = SYSDATE,
                 APPROVER6_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 7) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER7_STATUS_ID = v_approvaloption,
                 APPROVER7_COMMENT   = p_comments,
                 APPROVER7_DATE      = SYSDATE,
                 APPROVER7_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 8) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER8_STATUS_ID = v_approvaloption,
                 APPROVER8_COMMENT   = p_comments,
                 APPROVER8_DATE      = SYSDATE,
                 APPROVER8_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 9) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER9_STATUS_ID = v_approvaloption,
                 APPROVER9_COMMENT   = p_comments,
                 APPROVER9_DATE      = SYSDATE,
                 APPROVER9_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 10) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER10_STATUS_ID = v_approvaloption,
                 APPROVER10_COMMENT   = p_comments,
                 APPROVER10_DATE      = SYSDATE,
                 APPROVER10_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 11) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER11_STATUS_ID = v_approvaloption,
                 APPROVER11_COMMENT   = p_comments,
                 APPROVER11_DATE      = SYSDATE,
                 APPROVER11_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 12) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER12_STATUS_ID = v_approvaloption,
                 APPROVER12_COMMENT   = p_comments,
                 APPROVER12_DATE      = SYSDATE,
                 APPROVER12_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 13) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER13_STATUS_ID = v_approvaloption,
                 APPROVER13_COMMENT   = p_comments,
                 APPROVER13_DATE      = SYSDATE,
                 APPROVER13_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 14) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER14_STATUS_ID = v_approvaloption,
                 APPROVER14_COMMENT   = p_comments,
                 APPROVER14_DATE      = SYSDATE,
                 APPROVER14_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        ELSIF (v_routeactualsignatorycount = 15) THEN
          UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
             SET APPROVER15_STATUS_ID = v_approvaloption,
                 APPROVER15_COMMENT   = p_comments,
                 APPROVER15_DATE      = SYSDATE,
                 APPROVER15_BY        = p_userid
           WHERE CORP_ID = v_corpid
             AND SUMMARY_ID = v_summarytableid;
        END IF;
        if (v_approvallevel > 0) then
          IF (p_approvaloption = '1') THEN
            IF (v_routeactualsignatorycount = v_routeexpectedsignatorycount) THEN
              UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
                 SET APPROVER_STATUS_ID     = 2,
                     ACTUAL_SIGNATORY_COUNT = v_routeactualsignatorycount
               WHERE CORP_ID = v_corpid
                 AND SUMMARY_ID = v_summarytableid;
              cib_ibank_sr_pkg.updateParentTable(p_REQUEST_TYPE_ID,
                                                 v_parenttableid,
                                                 p_scheduleid,
                                                 p_menuid,
                                                 p_userid,
                                                 v_response);
            ELSE
              UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
                 SET ACTUAL_SIGNATORY_COUNT = v_routeactualsignatorycount
               WHERE CORP_ID = v_corpid
                 AND SUMMARY_ID = v_summarytableid;
              --v_response := '15';--FINAL
            
            END IF;
          ELSE
          
            UPDATE REQ_APPROVAL_SCHEDULE_SUMMARY
               SET APPROVER_STATUS_ID     = 3,
                   ACTUAL_SIGNATORY_COUNT = v_routeactualsignatorycount
             WHERE CORP_ID = v_corpid
               AND SUMMARY_ID = v_summarytableid;
          
          END IF;
        end if;
        /* INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           'v_APPROVAL_OPTIONS_ID=' || v_APPROVAL_OPTIONS_ID ||'v_levelactualsignatorycount='||v_levelactualsignatorycount||'v_levelexpectedsignatorycount='||v_levelexpectedsignatorycount||'v_routeexpectedsignatorycount='||v_routeexpectedsignatorycount||'v_routeactualsignatorycount='||v_routeactualsignatorycount||'v_nextapprovallevel='||v_nextapprovallevel ||'v_summarytableid='||v_summarytableid,
           'CIBANK.REQ_APPROVAL_SCHEDULE_ACTIONS'); */
        IF (v_APPROVAL_OPTIONS_ID = 1) THEN
          -- SEQUENTIAL
          IF ((v_levelactualsignatorycount = v_levelexpectedsignatorycount) AND
             -- (v_routeexpectedsignatorycount > v_routeactualsignatorycount)) THEN
             ((v_routeexpectedsignatorycount > v_routeactualsignatorycount) OR
             v_approvallevel = 0)) THEN
            v_nextapprovallevel := v_approvallevel + 1;
          
            begin
              select *
                into v_nextapprovallevelexist, v_scheduleid
                from (select 1, APPROVAL_SCHEDULE_ID
                      
                        from APPROVAL_SCHEDULES
                       where REQ_SCHEDULE_SUMMARY_ID = v_summarytableid
                         and APPROVAL_LEVEL = v_nextapprovallevel
                       order by APPROVAL_LEVEL asc) a
               where rownum < 2;
            exception
              when no_data_found then
                v_nextapprovallevelexist := 0;
            end;
          
            /*INSERT INTO rib_sr_error_log
              (error_date, error_msg, error_point)
            VALUES
              (SYSDATE,
               'v_nextapprovallevel=' || v_nextapprovallevel ||'v_nextapprovallevelexist='||v_nextapprovallevelexist||'v_summarytableid='||v_summarytableid||'v_nextapprovallevel='||v_nextapprovallevel,
               'CIBANK.REQ_APPROVAL_SCHEDULE_ACTIONS'); */
            IF (v_nextapprovallevelexist > 0) THEN
            
              UPDATE APPROVAL_SCHEDULES
                 SET VISIBLE = 'Y'
               WHERE REQ_SCHEDULE_SUMMARY_ID = v_summarytableid
                 and APPROVAL_LEVEL = v_nextapprovallevel;
            
              --log email
              v_log_email_resp := cib_ibank_sr_pkg.logemail(p_menuid,
                                                            v_scheduleid);
            END IF;
          
          END IF;
        END IF;
      
        --insert record to REQ_APPROVAL_SCHEDULE_ACTIONS
        -- update the actual signatory count on the APPROVAL_SCHEDULES
        --check if it is the last one
        --if last, check the transaction type and update the parent tables
      END IF;
    ELSE
      v_response := '99~~REQUEST NO LONGER AVAILABLE FOR APPROVAL'; --ALREADY APPROVED OR DECLINED
      RETURN v_response;
    END IF;
    --v_response := '00';
    --updateParentTable
  
    select count(1)
      into v_auth_token_count
      from REQ_APPROVAL_SCHEDULE_ACTIONS
     where CORP_ID = v_corpid
       and REQ_SCHEDULE_SUMMARY_ID = v_summarytableid
       and nvl(auth_token_flag, 'N') = 'Y';
  
    IF (v_response like '%FINAL%' AND v_corpid = 1 AND v_trantypeid = 4 and
       v_REQUEST_TYPE_ID = 11) THEN
      --and name like 'Default Group%'
      FOR item IN (SELECT *
                     from APPROVAL_GROUPS_REQ
                    where REQUEST_TYPE_ID = 1
                      and SCHEDULE_SUMMARY_ID is null
                      and APPROVAL_STATUS_ID = 1
                      and corp_id = v_merchant_corpid) LOOP
        BEGIN
          insert into APPROVAL_GROUPS_TRAIL
            select *
              from APPROVAL_GROUPS
             where GROUP_ID = item.PARENT_TABLE_ID;
        
          update APPROVAL_GROUPS_REQ
             set APPROVAL_STATUS_ID  = 2,
                 SCHEDULE_SUMMARY_ID = v_summarytableid
           WHERE REQUEST_ID = item.REQUEST_ID;
        
          update APPROVAL_GROUPS
             set RECORD_STATUS_ID   = 2,
                 APPROVAL_STATUS_ID = 2,
                 approved_by        = p_userid,
                 approved_date      = sysdate,
                 REQUEST_TYPE_ID    = '11',
                 REQUEST_TABLE_ID   = item.REQUEST_ID
           where GROUP_ID = item.PARENT_TABLE_ID;
        
        END;
      END LOOP;
    
      FOR item IN (SELECT *
                     from APPROVAL_ROUTE_REQ
                    where REQUEST_TYPE_ID = 1
                      and SCHEDULE_SUMMARY_ID is null
                      and APPROVAL_STATUS_ID = 1
                      and ROUTE_TYPE_ID = 5
                      and corp_id = v_merchant_corpid) LOOP
        BEGIN
          insert into APPROVAL_ROUTE_TRAIL
            select *
              from APPROVAL_ROUTE
             where APPROVAL_ROUTE_ID = item.PARENT_TABLE_ID;
        
          update APPROVAL_ROUTE_REQ
             set APPROVAL_STATUS_ID  = 2,
                 SCHEDULE_SUMMARY_ID = v_summarytableid
           WHERE APPROVAL_ROUTE_ID_REQ = item.APPROVAL_ROUTE_ID_REQ;
        
          update APPROVAL_ROUTE
             set RECORD_STATUS_ID   = 2,
                 APPROVAL_STATUS_ID = 2,
                 approved_by        = p_userid,
                 approved_date      = sysdate,
                 REQUEST_TYPE_ID    = '11',
                 REQUEST_TABLE_ID   = item.APPROVAL_ROUTE_ID_REQ
           where APPROVAL_ROUTE_ID = item.PARENT_TABLE_ID;
        
        END;
      END LOOP;
      --and corp_id=v_merchant_corpid
      FOR item IN (SELECT a.*
                     from APPROVAL_ROUTE_SIGNATORIES_REQ a
                     join APPROVAL_ROUTE b
                       on b.APPROVAL_ROUTE_ID = a.ROUTEID
                      and b.corp_id = v_merchant_corpid
                    where a.REQUEST_TYPE_ID = 1
                      and a.SCHEDULE_SUMMARY_ID is null
                      and a.APPROVAL_STATUS_ID = 1) LOOP
        BEGIN
          insert into APPROVAL_ROUTE_SIGNAT_TRAIL
            select *
              from APPROVAL_ROUTE_SIGNATORIES
             where ROUTE_SIGNATORY_ID = item.PARENT_TABLE_ID;
        
          update APPROVAL_ROUTE_SIGNATORIES_REQ
             set APPROVAL_STATUS_ID  = 2,
                 SCHEDULE_SUMMARY_ID = v_summarytableid
           WHERE ROUTE_SIGNATORY_REQ_ID = item.ROUTE_SIGNATORY_REQ_ID;
        
          update APPROVAL_ROUTE_SIGNATORIES
             set RECORD_STATUS_ID   = 2,
                 APPROVAL_STATUS_ID = 2,
                 approved_by        = p_userid,
                 approved_date      = sysdate,
                 REQUEST_TYPE_ID    = '11',
                 REQUEST_TABLE_ID   = item.ROUTE_SIGNATORY_REQ_ID
           where ROUTE_SIGNATORY_ID = item.PARENT_TABLE_ID;
        
        END;
      END LOOP;
    
    END IF;
  
    IF (substr(v_response, 0, 2) <> '00'
       -- ENSURE AT LEAST ONE TOKEN IS USED FOR THE TRANSACTION
       or (v_auth_token_count = 0 and v_response like '%FINAL%' AND
       v_corpid <> 1)) THEN
    
      if (v_auth_token_count = 0 and v_response like '%FINAL%') then
        v_response := '99~~APPROVAL FAILED BECAUSE NO TOKEN WAS USED.';
      end if;
    
      -- COMMIT;
      --ELSE
      ROLLBACK;
    END IF;
    createAuditLog(p_userid,
                   p_session_id,
                   'APPROVE-RECORD', --event category
                   'scheduleid~' || p_scheduleid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_menuid,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   p_scheduleid);
    RETURN v_response;
    -- COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.REQ_APPROVAL_SCHEDULE_ACTIONS');
    
      --COMMIT;
      v_response := '99~~OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, p_menuid);
  END;

  FUNCTION approverecord(p_scheduleid      IN VARCHAR2,
                         p_userid          IN VARCHAR2,
                         p_approvaloption  IN VARCHAR2,
                         p_comments        IN VARCHAR2,
                         p_menuid          IN VARCHAR2,
                         p_REQUEST_TYPE_ID IN VARCHAR2,
                         p_auth_token_flag char,
                         p_auth_token_sno  varchar2,
                         p_context_url     varchar2,
                         p_ip_mac_address  varchar2,
                         p_session_id      varchar2,
                         p_id_values       ID_VALUE_OBJECTS_TYP)
    RETURN VARCHAR2 as
    v_batch_id              varchar2(100);
    v_total_amount          number(18, 2);
    v_charge_amount         number(18, 2);
    v_response              varchar2(100);
    v_err_message           varchar2(500);
    v_id_value              ID_VALUE_OBJECT_TYP := NEW
                                                   ID_VALUE_OBJECT_TYP('',
                                                                       '',
                                                                       '');
    v_pending_records_count integer := 0;
    v_trans_type            integer := 0;
    v_approvaloption        integer := p_approvaloption;
    v_summary_id            integer := 0;
    v_approval_level        integer := 0;
  begin
    select a.parent_table_id
      into v_batch_id
      from approval_schedules a
     where a.approval_schedule_id = p_scheduleid;
  
    select a.transaction_type
      into v_trans_type
      from menu a
     where menuid = p_menuid;
  
    select x.req_schedule_summary_id, x.approval_level
      into v_summary_id, v_approval_level
      from approval_schedules x
     where x.approval_schedule_id = p_scheduleid;
  
    if (v_trans_type in (1, 2, 3, 17, 25) and p_id_values is not null and
       p_id_values.count > 0) then
      FOR i IN p_id_values.FIRST .. p_id_values.LAST LOOP
        v_id_value := p_id_values(i);
        update transaction_batch_detail a
           set a.rejected_by        = p_userid,
               a.rejected_date      = sysdate,
               a.processing_status  = 99,
               a.approval_status_id = 3
         where a.batch_detail_id = v_id_value.ID
           and approval_status_id = 1
           and a.batch_id = v_batch_id;
      end loop;
    
      select sum(a.amount), sum(a.charge_amount), count(1)
        into v_total_amount, v_charge_amount, v_pending_records_count
        from transaction_batch_detail a
       where a.processing_status <> '99'
         and a.batch_id = v_batch_id;
    
      update transaction_batch_summary y
         set y.total_tran_amount = nvl(v_total_amount, 0),
             y.total_charge_amt  = nvl(v_charge_amount, 0),
             y.cumulative_amount =
             (nvl(v_total_amount, 0) + nvl(v_charge_amount, 0)),
             y.no_of_record      = v_pending_records_count
       where y.batch_id = v_batch_id;
    
      --also update amount in the schedules
      update Approval_Schedules
         set amount        = nvl(v_total_amount, 0),
             charge_amount = nvl(v_charge_amount, 0)
       where req_schedule_summary_id = v_summary_id
         and approval_level >= v_approval_level;
    
      --  select count(1) into v_pending_records_count from  transaction_batch_detail a
      -- where  a.batch_id=v_batch_id and a.processing_status<>'99';
    
      --if all batch items have been reject, then reject the entire batch.
      if v_pending_records_count = 0 then
        v_approvaloption := 2;
      end if;
    end if;
  
    if (v_trans_type in (42) and p_id_values is not null and
       p_id_values.count > 0) then
      FOR i IN p_id_values.FIRST .. p_id_values.LAST LOOP
        v_id_value := p_id_values(i);
        update cibank.direct_dr_mandate_requests a
           set a.approved_by        = p_userid,
               a.approved_date      = sysdate,
               a.approval_status_id = 3
         where a.mandate_id = v_id_value.ID
           and approval_status_id = 1
           and a.batch_id = v_batch_id;
      end loop;
    end if;
  
    v_response := approverecord(p_scheduleid,
                                p_userid,
                                v_approvaloption,
                                p_comments,
                                p_menuid,
                                p_REQUEST_TYPE_ID,
                                p_auth_token_flag,
                                p_auth_token_sno,
                                p_context_url,
                                p_ip_mac_address,
                                p_session_id);
  
    IF (substr(v_response, 0, 2) = '00') THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
    createAuditLog(p_userid,
                   p_session_id,
                   'APPROVE-RECORD', --event category
                   'scheduleid~' || p_scheduleid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_menuid,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   p_scheduleid);
    RETURN v_response;
    -- COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.REQ_APPROVAL_SCHEDULE_ACTIONS');
    
      --COMMIT;
      v_response := '99~~OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, p_menuid);
    
  end approverecord;

  FUNCTION getPendingApprovalsbyUserid(puserid IN VARCHAR2)
    RETURN SYS_REFCURSOR IS
    o_refcursor           SYS_REFCURSOR;
    v_deptid              INTEGER;
    v_corpid              INTEGER;
    v_approval_limit      NUMBER(18, 2);
    v_hasglobalacctaccess VARCHAR2(10);
    v_guids               VARCHAR2(200);
    v_issignatory         VARCHAR2(10);
    v_err_message         VARCHAR2(3000);
    v_response            VARCHAR2(100);
  BEGIN
  
    select sys_guid() into v_guids from dual;
  
    SELECT CORP_ID,
           DEPT_ID,
           HAS_GLOBAL_ACCT_ACCESS,
           IS_SIGNATORY,
           APPROVAL_LIMIT
      INTO v_corpid,
           v_deptid,
           v_hasglobalacctaccess,
           v_issignatory,
           v_approval_limit
      FROM USER_PROFILE
     WHERE USER_ID = puserid;
    --ADD ALL REQUESTS ASSIGNED TO USER ID
    IF (v_hasglobalacctaccess = 'Y') THEN
      insert into APPROVAL_SCHEDULES_TEMP
      
        SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
          FROM APPROVAL_SCHEDULES a
          JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
            on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
           and b.APPROVER_STATUS_ID = 1
           and b.CORP_ID = v_corpid
           and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
        
          JOIN APPROVAL_ROUTE_SIGNATORIES c
            on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
           and c.APPLY_APPROVAL_LIMIT = 'Y'
        -- JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
        --JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
         where a.APPROVAL_STATUS_ID = 1
           and a.CORP_ID = v_corpid
           and a.AMOUNT <= v_approval_limit
           and a.EXPECTED_USER_APPROVER_ID = puserid
           and a.VISIBLE = 'Y'
              -- AND a.EXPECTED_USER_APPROVER_ID not in
           AND a.REQ_SCHEDULE_SUMMARY_ID not in
               (select REQ_SCHEDULE_SUMMARY_ID
                  from REQ_APPROVAL_SCHEDULE_ACTIONS
                 where CORP_ID = v_corpid
                   and REQ_SCHEDULE_SUMMARY_ID = a.REQ_SCHEDULE_SUMMARY_ID
                   and APPROVED_BY = puserid);
      /* AND a.EXPECTED_USER_APPROVER_ID not in
      (select APPROVED_BY
         from REQ_APPROVAL_SCHEDULE_ACTIONS
        where APPROVAL_SCHEDULE_ID in
              (select APPROVAL_SCHEDULE_ID
                 from APPROVAL_SCHEDULES
                where APPROVAL_STATUS_ID = 1
                  and CORP_ID = v_corpid));*/
    
      insert into APPROVAL_SCHEDULES_TEMP
        SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
          FROM APPROVAL_SCHEDULES a
          JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
            on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
           and b.APPROVER_STATUS_ID = 1
           and b.CORP_ID = v_corpid
           and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
        
          JOIN APPROVAL_ROUTE_SIGNATORIES c
            on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
           and c.APPLY_APPROVAL_LIMIT = 'N'
        -- JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
        -- JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
         where a.APPROVAL_STATUS_ID = 1
              
           and a.CORP_ID = v_corpid
              -- and a.AMOUNT <= v_approval_limit
           and a.EXPECTED_USER_APPROVER_ID = puserid
           and a.VISIBLE = 'Y'
           AND a.REQ_SCHEDULE_SUMMARY_ID not in
               (select REQ_SCHEDULE_SUMMARY_ID
                  from REQ_APPROVAL_SCHEDULE_ACTIONS
                 where CORP_ID = v_corpid
                   and REQ_SCHEDULE_SUMMARY_ID = a.REQ_SCHEDULE_SUMMARY_ID
                   and APPROVED_BY = puserid);
    
      /* AND a.EXPECTED_USER_APPROVER_ID not in
      (select APPROVED_BY
         from REQ_APPROVAL_SCHEDULE_ACTIONS
        where APPROVAL_SCHEDULE_ID in
              (select APPROVAL_SCHEDULE_ID
                 from APPROVAL_SCHEDULES
                where APPROVAL_STATUS_ID = 1
                  and CORP_ID = v_corpid));*/
    
      --APPROVAL_SCHEDULES a where APPROVAL_STATUS_ID=1 and CORP_ID=v_corpid 
    ELSE
      insert into APPROVAL_SCHEDULES_TEMP
        SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
          FROM APPROVAL_SCHEDULES a
          JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
            on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
           and b.APPROVER_STATUS_ID = 1
           and b.CORP_ID = v_corpid
           and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
          JOIN APPROVAL_ROUTE_SIGNATORIES c
            on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
           and c.APPLY_APPROVAL_LIMIT = 'Y'
        --JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
        --JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
         where a.APPROVAL_STATUS_ID = 1
           and a.CORP_ID = v_corpid
           and a.AMOUNT <= v_approval_limit
           and a.EXPECTED_USER_APPROVER_ID = puserid
           and a.VISIBLE = 'Y'
           AND a.REQ_SCHEDULE_SUMMARY_ID not in
               (select REQ_SCHEDULE_SUMMARY_ID
                  from REQ_APPROVAL_SCHEDULE_ACTIONS
                 where CORP_ID = v_corpid
                   and REQ_SCHEDULE_SUMMARY_ID = a.REQ_SCHEDULE_SUMMARY_ID
                   and APPROVED_BY = puserid)
              
              /* AND a.EXPECTED_USER_APPROVER_ID not in
              (select APPROVED_BY
                 from REQ_APPROVAL_SCHEDULE_ACTIONS c
                where c.APPROVAL_SCHEDULE_ID in
                      (select APPROVAL_SCHEDULE_ID
                         from APPROVAL_SCHEDULES d
                        where d.APPROVAL_STATUS_ID = 1
                          and d.CORP_ID = v_corpid))*/
           AND (a.DR_ACCOUNT = 'N/A' OR
               a.DR_ACCOUNT IN
               (SELECT ACCOUNT_NUMBER
                   FROM CORPORATE_ACCOUNT
                  WHERE APPROVAL_STATUS_ID = 2
                    AND RECORD_STATUS_ID = 2
                    and CORP_ID = v_corpid
                    AND CORP_ACCT_ID IN
                        (SELECT CORP_ACCT_ID
                           FROM USER_ACCOUNT_ACCESS
                          WHERE USER_ID = puserid
                            AND APPROVAL_STATUS_ID = 2
                            AND RECORD_STATUS_ID = 2)));
    
      insert into APPROVAL_SCHEDULES_TEMP
        SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
          FROM APPROVAL_SCHEDULES a
          JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
            on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
           and b.APPROVER_STATUS_ID = 1
           and b.CORP_ID = v_corpid
           and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
          JOIN APPROVAL_ROUTE_SIGNATORIES c
            on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
           and c.APPLY_APPROVAL_LIMIT = 'N'
        --  JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
        -- JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
         where a.APPROVAL_STATUS_ID = 1
           and a.CORP_ID = v_corpid
              -- and a.AMOUNT <= v_approval_limit
           and a.EXPECTED_USER_APPROVER_ID = puserid
           and a.VISIBLE = 'Y'
              /* AND a.EXPECTED_USER_APPROVER_ID not in
              (select APPROVED_BY
                 from REQ_APPROVAL_SCHEDULE_ACTIONS c
                where c.APPROVAL_SCHEDULE_ID in
                      (select APPROVAL_SCHEDULE_ID
                         from APPROVAL_SCHEDULES d
                        where d.APPROVAL_STATUS_ID = 1
                          and d.CORP_ID = v_corpid))*/
           AND a.REQ_SCHEDULE_SUMMARY_ID not in
               (select REQ_SCHEDULE_SUMMARY_ID
                  from REQ_APPROVAL_SCHEDULE_ACTIONS
                 where CORP_ID = v_corpid
                   and REQ_SCHEDULE_SUMMARY_ID = a.REQ_SCHEDULE_SUMMARY_ID
                   and APPROVED_BY = puserid)
              
           AND (a.DR_ACCOUNT = 'N/A' OR
               a.DR_ACCOUNT IN
               (SELECT ACCOUNT_NUMBER
                   FROM CORPORATE_ACCOUNT
                  WHERE APPROVAL_STATUS_ID = 2
                    AND RECORD_STATUS_ID = 2
                    and CORP_ID = v_corpid
                    AND CORP_ACCT_ID IN
                        (SELECT CORP_ACCT_ID
                           FROM USER_ACCOUNT_ACCESS
                          WHERE USER_ID = puserid
                            AND APPROVAL_STATUS_ID = 2
                            AND RECORD_STATUS_ID = 2)));
    
    END IF;
    --  UNION 
    -- SELECT * FROM APPROVAL_SCHEDULES where APPROVAL_STATUS_ID=1 and CORP_ID=v_corpid and AMOUNT <=v_approval_limit and EXPECTED_USER_APPROVER_ID=puserid
  
    --GET ALL GROUPS WHERE USER BELONG OR USER DEPT BELONG
    FOR item IN (SELECT *
                   FROM APPROVAL_GROUPS
                  WHERE CORP_ID = v_corpid
                    AND APPROVAL_STATUS_ID = 2
                    AND RECORD_STATUS_ID = 2
                    AND GROUP_ID IN (SELECT APPROVAL_GROUP_ID
                                       FROM APPROVAL_GROUPS_USERS
                                      WHERE APPROVAL_STATUS_ID = 2
                                        AND RECORD_STATUS_ID = 2
                                        and CORP_ID = v_corpid
                                        AND GROUPS_USERS_TYPE = 1
                                        AND USER_ID = puserid
                                     
                                     UNION
                                     
                                     SELECT APPROVAL_GROUP_ID
                                       FROM APPROVAL_GROUPS_USERS
                                      WHERE APPROVAL_STATUS_ID = 2
                                        AND RECORD_STATUS_ID = 2
                                        and CORP_ID = v_corpid
                                        AND GROUPS_USERS_TYPE = 2
                                        AND DEPT_ID = v_deptid
                                     --AND (USER_ID = puserid OR DEPT_ID = v_deptid)
                                     )) LOOP
      BEGIN
        -- IF (item.APPLY_APPROVAL_LIMIT = 'Y') THEN
        IF (v_hasglobalacctaccess = 'Y') THEN
          insert into APPROVAL_SCHEDULES_TEMP
            SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
              FROM APPROVAL_SCHEDULES a
              JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
                on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
               and b.APPROVER_STATUS_ID = 1
               and b.CORP_ID = v_corpid
               and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
              JOIN APPROVAL_ROUTE_SIGNATORIES c
                on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
               and c.APPLY_APPROVAL_LIMIT = 'Y'
               and a.APPROVAL_LEVEL > 0
            -- JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
            --JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
             where a.APPROVAL_STATUS_ID = 1
               and a.CORP_ID = v_corpid
               and a.AMOUNT <= v_approval_limit
               and a.EXPECTED_GROUP_APPROVER_ID = item.GROUP_ID
               and a.VISIBLE = 'Y'
                  /* AND a.EXPECTED_USER_APPROVER_ID not in
                  (select APPROVED_BY
                     from REQ_APPROVAL_SCHEDULE_ACTIONS
                    where APPROVAL_SCHEDULE_ID in
                          (select APPROVAL_SCHEDULE_ID
                             from APPROVAL_SCHEDULES
                            where APPROVAL_STATUS_ID = 1
                              and CORP_ID = v_corpid));*/
               AND a.REQ_SCHEDULE_SUMMARY_ID not in
                   (select REQ_SCHEDULE_SUMMARY_ID
                      from REQ_APPROVAL_SCHEDULE_ACTIONS
                     where CORP_ID = v_corpid
                       and REQ_SCHEDULE_SUMMARY_ID =
                           a.REQ_SCHEDULE_SUMMARY_ID
                       and APPROVED_BY = puserid);
        
          insert into APPROVAL_SCHEDULES_TEMP
            SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
              FROM APPROVAL_SCHEDULES a
              JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
                on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
               and b.APPROVER_STATUS_ID = 1
               and b.CORP_ID = v_corpid
               and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
              JOIN APPROVAL_ROUTE_SIGNATORIES c
                on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
                  --and c.APPLY_APPROVAL_LIMIT = 'N'
                  --and c.APPLY_APPROVAL_LIMIT = 'Y'
               and a.APPROVAL_LEVEL = 0
            --and a.APPROVAL_LEVEL =0 or c.APPLY_APPROVAL_LIMIT = 'N'
            --JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
            --JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
             where a.APPROVAL_STATUS_ID = 1
               and a.CORP_ID = v_corpid
                  -- and a.AMOUNT <= v_approval_limit
               and a.EXPECTED_GROUP_APPROVER_ID = item.GROUP_ID
               and a.VISIBLE = 'Y'
                  /* AND a.EXPECTED_USER_APPROVER_ID not in
                  (select APPROVED_BY
                     from REQ_APPROVAL_SCHEDULE_ACTIONS
                    where APPROVAL_SCHEDULE_ID in
                          (select APPROVAL_SCHEDULE_ID
                             from APPROVAL_SCHEDULES
                            where APPROVAL_STATUS_ID = 1
                              and CORP_ID = v_corpid));*/
               AND a.REQ_SCHEDULE_SUMMARY_ID not in
                   (select REQ_SCHEDULE_SUMMARY_ID
                      from REQ_APPROVAL_SCHEDULE_ACTIONS
                     where CORP_ID = v_corpid
                       and REQ_SCHEDULE_SUMMARY_ID =
                           a.REQ_SCHEDULE_SUMMARY_ID
                       and APPROVED_BY = puserid);
        
          insert into APPROVAL_SCHEDULES_TEMP
            SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
              FROM APPROVAL_SCHEDULES a
              JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
                on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
               and b.APPROVER_STATUS_ID = 1
               and b.CORP_ID = v_corpid
               and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
              JOIN APPROVAL_ROUTE_SIGNATORIES c
                on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
                  --and c.APPLY_APPROVAL_LIMIT = 'N'
               and c.APPLY_APPROVAL_LIMIT = 'N'
               and a.APPROVAL_LEVEL > 0
            --JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
            --JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
             where a.APPROVAL_STATUS_ID = 1
               and a.CORP_ID = v_corpid
                  -- and a.AMOUNT <= v_approval_limit
               and a.EXPECTED_GROUP_APPROVER_ID = item.GROUP_ID
               and a.VISIBLE = 'Y'
                  /* AND a.EXPECTED_USER_APPROVER_ID not in
                  (select APPROVED_BY
                     from REQ_APPROVAL_SCHEDULE_ACTIONS
                    where APPROVAL_SCHEDULE_ID in
                          (select APPROVAL_SCHEDULE_ID
                             from APPROVAL_SCHEDULES
                            where APPROVAL_STATUS_ID = 1
                              and CORP_ID = v_corpid));*/
               AND a.REQ_SCHEDULE_SUMMARY_ID not in
                   (select REQ_SCHEDULE_SUMMARY_ID
                      from REQ_APPROVAL_SCHEDULE_ACTIONS
                     where CORP_ID = v_corpid
                       and REQ_SCHEDULE_SUMMARY_ID =
                           a.REQ_SCHEDULE_SUMMARY_ID
                       and APPROVED_BY = puserid);
        
        ELSE
          insert into APPROVAL_SCHEDULES_TEMP
            SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
              FROM APPROVAL_SCHEDULES a
              JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
                on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
               and b.APPROVER_STATUS_ID = 1
               and b.CORP_ID = v_corpid
               and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
              JOIN APPROVAL_ROUTE_SIGNATORIES c
                on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
               and c.APPLY_APPROVAL_LIMIT = 'Y'
               and a.APPROVAL_LEVEL > 0
            -- JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
            --JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
             where a.APPROVAL_STATUS_ID = 1
               and a.CORP_ID = v_corpid
               and a.AMOUNT <= v_approval_limit
               and a.EXPECTED_GROUP_APPROVER_ID = item.GROUP_ID
               and a.VISIBLE = 'Y'
                  /* AND a.EXPECTED_USER_APPROVER_ID not in
                  (select APPROVED_BY
                     from REQ_APPROVAL_SCHEDULE_ACTIONS
                    where APPROVAL_SCHEDULE_ID in
                          (select APPROVAL_SCHEDULE_ID
                             from APPROVAL_SCHEDULES
                            where APPROVAL_STATUS_ID = 1
                              and CORP_ID = v_corpid))*/
               AND a.REQ_SCHEDULE_SUMMARY_ID not in
                   (select REQ_SCHEDULE_SUMMARY_ID
                      from REQ_APPROVAL_SCHEDULE_ACTIONS
                     where CORP_ID = v_corpid
                       and REQ_SCHEDULE_SUMMARY_ID =
                           a.REQ_SCHEDULE_SUMMARY_ID
                       and APPROVED_BY = puserid)
                  
               AND (a.DR_ACCOUNT = 'N/A' OR
                   a.DR_ACCOUNT IN
                   (SELECT ACCOUNT_NUMBER
                       FROM CORPORATE_ACCOUNT
                      WHERE APPROVAL_STATUS_ID = 2
                        AND RECORD_STATUS_ID = 2
                        and CORP_ID = v_corpid
                        AND CORP_ACCT_ID IN
                            (SELECT CORP_ACCT_ID
                               FROM USER_ACCOUNT_ACCESS
                              WHERE USER_ID = puserid
                                AND APPROVAL_STATUS_ID = 2
                                AND RECORD_STATUS_ID = 2)));
        
          insert into APPROVAL_SCHEDULES_TEMP
            SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
              FROM APPROVAL_SCHEDULES a
              JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
                on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
               and b.APPROVER_STATUS_ID = 1
               and b.CORP_ID = v_corpid
               and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
              JOIN APPROVAL_ROUTE_SIGNATORIES c
                on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
                  --and c.APPLY_APPROVAL_LIMIT = 'N'
               and a.APPROVAL_LEVEL = 0
            --  JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
            -- JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
             where a.APPROVAL_STATUS_ID = 1
               and a.CORP_ID = v_corpid
                  -- and a.AMOUNT <= v_approval_limit
               and a.EXPECTED_GROUP_APPROVER_ID = item.GROUP_ID
               and a.VISIBLE = 'Y'
                  /* AND a.EXPECTED_USER_APPROVER_ID not in
                  (select APPROVED_BY
                     from REQ_APPROVAL_SCHEDULE_ACTIONS
                    where APPROVAL_SCHEDULE_ID in
                          (select APPROVAL_SCHEDULE_ID
                             from APPROVAL_SCHEDULES
                            where APPROVAL_STATUS_ID = 1
                              and CORP_ID = v_corpid))*/
               AND a.REQ_SCHEDULE_SUMMARY_ID not in
                   (select REQ_SCHEDULE_SUMMARY_ID
                      from REQ_APPROVAL_SCHEDULE_ACTIONS
                     where CORP_ID = v_corpid
                       and REQ_SCHEDULE_SUMMARY_ID =
                           a.REQ_SCHEDULE_SUMMARY_ID
                       and APPROVED_BY = puserid)
                  
               AND (a.DR_ACCOUNT = 'N/A' OR
                   a.DR_ACCOUNT IN
                   (SELECT ACCOUNT_NUMBER
                       FROM CORPORATE_ACCOUNT
                      WHERE APPROVAL_STATUS_ID = 2
                        AND RECORD_STATUS_ID = 2
                        and CORP_ID = v_corpid
                        AND CORP_ACCT_ID IN
                            (SELECT CORP_ACCT_ID
                               FROM USER_ACCOUNT_ACCESS
                              WHERE USER_ID = puserid
                                AND APPROVAL_STATUS_ID = 2
                                AND RECORD_STATUS_ID = 2)));
        
          insert into APPROVAL_SCHEDULES_TEMP
            SELECT v_guids AS REQ_BATCH_ID, a.* --,d.NAME as CORPORATE_NAME,e.short_name as TRAN_TYPE_SHORT_NAME
              FROM APPROVAL_SCHEDULES a
              JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
                on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
               and b.APPROVER_STATUS_ID = 1
               and b.CORP_ID = v_corpid
               and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
              JOIN APPROVAL_ROUTE_SIGNATORIES c
                on c.ROUTE_SIGNATORY_ID = a.ROUTE_SIGNATORY_ID
                  --and c.APPLY_APPROVAL_LIMIT = 'N'
               and c.APPLY_APPROVAL_LIMIT = 'N'
               and a.APPROVAL_LEVEL > 0
            --  JOIN CORPORATE_PROFILE d on d.corp_id=a.corp_id
            -- JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
             where a.APPROVAL_STATUS_ID = 1
               and a.CORP_ID = v_corpid
                  -- and a.AMOUNT <= v_approval_limit
               and a.EXPECTED_GROUP_APPROVER_ID = item.GROUP_ID
               and a.VISIBLE = 'Y'
                  /* AND a.EXPECTED_USER_APPROVER_ID not in
                  (select APPROVED_BY
                     from REQ_APPROVAL_SCHEDULE_ACTIONS
                    where APPROVAL_SCHEDULE_ID in
                          (select APPROVAL_SCHEDULE_ID
                             from APPROVAL_SCHEDULES
                            where APPROVAL_STATUS_ID = 1
                              and CORP_ID = v_corpid))*/
               AND a.REQ_SCHEDULE_SUMMARY_ID not in
                   (select REQ_SCHEDULE_SUMMARY_ID
                      from REQ_APPROVAL_SCHEDULE_ACTIONS
                     where CORP_ID = v_corpid
                       and REQ_SCHEDULE_SUMMARY_ID =
                           a.REQ_SCHEDULE_SUMMARY_ID
                       and APPROVED_BY = puserid)
                  
               AND (a.DR_ACCOUNT = 'N/A' OR
                   a.DR_ACCOUNT IN
                   (SELECT ACCOUNT_NUMBER
                       FROM CORPORATE_ACCOUNT
                      WHERE APPROVAL_STATUS_ID = 2
                        AND RECORD_STATUS_ID = 2
                        and CORP_ID = v_corpid
                        AND CORP_ACCT_ID IN
                            (SELECT CORP_ACCT_ID
                               FROM USER_ACCOUNT_ACCESS
                              WHERE USER_ID = puserid
                                AND APPROVAL_STATUS_ID = 2
                                AND RECORD_STATUS_ID = 2)));
        END IF;
        /*ELSE
          IF (v_hasglobalacctaccess = 'Y') THEN
            insert into APPROVAL_SCHEDULES_TEMP
              SELECT v_guids AS REQ_BATCH_ID, a.*
                FROM APPROVAL_SCHEDULES a
                JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
                  on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
                 and b.APPROVER_STATUS_ID = 1
                 and b.CORP_ID = v_corpid
                 and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
               where a.APPROVAL_STATUS_ID = 1
                 and a.CORP_ID = v_corpid
                 and a.EXPECTED_GROUP_APPROVER_ID = item.GROUP_ID
                 and a.VISIBLE = 'Y'
                 AND a.EXPECTED_USER_APPROVER_ID not in
                     (select APPROVED_BY
                        from REQ_APPROVAL_SCHEDULE_ACTIONS
                       where APPROVAL_SCHEDULE_ID in
                             (select APPROVAL_SCHEDULE_ID
                                from APPROVAL_SCHEDULES
                               where APPROVAL_STATUS_ID = 1
                                 and CORP_ID = v_corpid));
          ELSE
            insert into APPROVAL_SCHEDULES_TEMP
              SELECT v_guids AS REQ_BATCH_ID, a.*
                FROM APPROVAL_SCHEDULES a
                JOIN REQ_APPROVAL_SCHEDULE_SUMMARY b
                  on b.SUMMARY_ID = REQ_SCHEDULE_SUMMARY_ID
                 and b.APPROVER_STATUS_ID = 1
                 and b.CORP_ID = v_corpid
                 and b.ACTUAL_SIGNATORY_COUNT < b.EXPECTED_SIGNATORY_COUNT
               where a.APPROVAL_STATUS_ID = 1
                 and a.CORP_ID = v_corpid
                 and a.EXPECTED_GROUP_APPROVER_ID = item.GROUP_ID
                 and a.VISIBLE = 'Y'
                 AND a.EXPECTED_USER_APPROVER_ID not in
                     (select APPROVED_BY
                        from REQ_APPROVAL_SCHEDULE_ACTIONS
                       where APPROVAL_SCHEDULE_ID in
                             (select APPROVAL_SCHEDULE_ID
                                from APPROVAL_SCHEDULES
                               where APPROVAL_STATUS_ID = 1
                                 and CORP_ID = v_corpid))
                 AND (a.DR_ACCOUNT = 'N/A' OR
                     a.DR_ACCOUNT IN
                     (SELECT ACCOUNT_NUMBER
                         FROM CORPORATE_ACCOUNT
                        WHERE APPROVAL_STATUS_ID = 2
                          AND RECORD_STATUS_ID = 2
                          and CORP_ID = v_corpid
                          AND CORP_ACCT_ID IN
                              (SELECT CORP_ACCT_ID
                                 FROM USER_ACCOUNT_ACCESS
                                WHERE USER_ID = puserid
                                  AND APPROVAL_STATUS_ID = 2
                                  AND RECORD_STATUS_ID = 2)));
          END IF;
        END IF;*/
      
      END;
    END LOOP;
    COMMIT;
    --v_response := '00';
    -- RETURN v_response;
    -- COMMIT;
  
    OPEN o_refcursor FOR
    
      SELECT a.REQ_BATCH_ID,
             DR_ACCOUNT,
             a.REQUEST_TYPE_ID as REQUEST_TYPE_ID,
             a.LAST_MODIFIED_BY,
             a.TRANSACTION_TYPE_ID,
             APPROVAL_SCHEDULE_ID,
             a.CREATED_DATE,
             REQ_SCHEDULE_SUMMARY_ID,
             APPROVAL_LEVEL,
             a.REQUEST_TABLE_ID,
             a.APPROVED_DATE,
             VISIBLE,
             APPROVER_ROUTE_TYPEID,
             AMOUNT,
             ROUTE_SIGNATORY_ID,
             a.APPROVED_BY,
             EXPECTED_SIGNATORY_COUNT,
             a.CREATED_BY,
             ACTUAL_SIGNATORY_COUNT,
             TRANSACTION_DESCRIPTION,
             a.RECORD_STATUS_ID,
             a.LAST_MODIFIED_DATE,
             a.CORP_ID,
             a.APPROVAL_STATUS_ID,
             PARENT_TABLE_ID,
             BATCHID,
             a.PARENT_TABLE_NAME,
             EXPECTED_GROUP_APPROVER_ID,
             a.APPROVAL_COMMENT,
             EXPECTED_USER_APPROVER_ID,
             d.DESCRIPTION AS REQUEST_TYPE_DESC,
             b.NAME as TRANSACTION_TYPE_DESC,
             MENU_ID,
             (c.FIRST_NAME || ' ' || c.LAST_NAME) as CREATEDBYNAME,
             d.NAME AS CORPORATE_NAME,
             b.SHORT_NAME AS TRAN_TYPE_SHORT_NAME,
             a.MERCHANT_CORP_ID
      
        FROM APPROVAL_SCHEDULES_TEMP a
        join REF_REQUEST_TYPE d
          on d.REQUEST_TYPE_ID = a.REQUEST_TYPE_ID
        join REF_TRANSACTION_TYPE b
          on b.TRANSACTION_TYPE_ID = a.TRANSACTION_TYPE_ID
        join USER_PROFILE c
          on c.USER_ID = a.CREATED_BY
        JOIN CORPORATE_PROFILE d
          on d.corp_id = a.MERCHANT_CORP_ID
      -- JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
       where REQ_BATCH_ID = v_guids
       ORDER BY a.request_type_id, A.CREATED_DATE asc;
  
    RETURN o_refcursor;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.APPROVAL_SCHEDULES_TEMP');
    
      --COMMIT;
      --v_response := '99|OPERATION FAILED';
      RETURN o_refcursor;
  END;

  FUNCTION getAccountsByCorpId(i_CorpId IN VARCHAR2) RETURN SYS_REFCURSOR IS
    o_refcursor SYS_REFCURSOR;
    v_acctno    VARCHAR2(20);
  
  BEGIN
    select ACCOUNT_NUMBER
      into v_acctno
      from CORPORATE_ACCOUNT
     where corp_id = i_CorpId
       and rownum < 2;
    OPEN o_refcursor FOR
      SELECT ac_desc,
             cust_no,
             cust_ac_no,
             account_class,
             ccy,
             case account_type
               when 'U' then
                'Current'
               when 'S' then
                'Savings'
               else
                'Bank'
             end account_type,
             --b.*
             '' CUSTOMER,
             '' EMP_NUMBER,
             '' FULL_NAME,
             '' EMAIL,
             '' MOBILE,
             '' LOCATION,
             '' BRANCH_NAME
        FROM sttm_cust_account A
      -- LEFT JOIN VW_RM_PROFILE B
      -- ON a.cust_no = b.customer
       where a.auth_stat = 'A'
         and a.record_stat = 'O'
         and cust_Ac_no in
             (select CUST_AC_NO
                from (select s.*,
                             w.address location,
                             w.customer_no,
                             '0000000' emp_number,
                             'Union Bank' full_name,
                             'customerservice@unionbankng.com' email,
                             '+234-1-2716816' mobile,
                             '' notinuse,
                             'HEAD OFFICE' branch_name,
                             w.cust_email,
                             w.cust_phone_no
                        from (select branch_code,
                                     ac_desc,
                                     cust_no,
                                     cust_Ac_no,
                                     account_class,
                                     ccy,
                                     CASE account_type
                                       WHEN 'U' THEN
                                        'Current'
                                       WHEN 'S' THEN
                                        'Savings'
                                       ELSE
                                        'Bank'
                                     END account_type
                                from sttm_cust_account y
                               where cust_no in
                                     (select customer
                                        from cstb_relationship_linkage y
                                       where ref_no in
                                             (select cust_no
                                                from sttm_cust_account
                                               where cust_ac_no = v_acctno)
                                         and category = 'C'
                                         and relationship != 'AUS')
                              union
                              select branch_code,
                                     ac_desc,
                                     cust_no,
                                     cust_Ac_no,
                                     account_class,
                                     ccy,
                                     CASE account_type
                                       WHEN 'U' THEN
                                        'Current'
                                       WHEN 'S' THEN
                                        'Savings'
                                       ELSE
                                        'Bank'
                                     END account_type
                                from sttm_cust_account y
                               where cust_no in
                                     (select customer
                                        from cstb_relationship_linkage y
                                       where ref_no in
                                             (select ref_no
                                                from cstb_relationship_linkage y
                                               where customer in
                                                     (select cust_no
                                                        from sttm_cust_account
                                                       where cust_ac_no =
                                                             v_acctno)
                                                 and category = 'C'
                                                 and relationship = 'SUB')
                                         and relationship != 'AUS')) s,
                             (select c.address_line1 || ' ' || c.address_line2 || ' ' ||
                                     c.address_line3 || ' ' || c.address_line4 address,
                                     --b.customer,b.emp_number, b.full_name,b.email,b.mobile,b.location notinuse,b.branch_name,
                                     c.customer_no,
                                     '0000000' emp_number,
                                     'Union Bank' full_name,
                                     'customerservice@unionbankng.com' email,
                                     '+234-1-2716816' mobile,
                                     '' notinuse,
                                     'HEAD OFFICE' branch_name,
                                     m.e_mail cust_email,
                                     COALESCE(TRIM(m.mobile_number),
                                              TRIM(m.telephone),
                                              TRIM(m.home_tel_no)) cust_phone_no
                                FROM sttm_customer c, sttm_cust_personal m
                               where c.customer_no = m.customer_no) w
                       where s.cust_no = w.customer_no(+))
              
              );
  
    /*SELECT ac_desc,
          cust_no,
          cust_ac_no,
          account_class,
          ccy,
          case account_type
            when 'U' then
             'Current'
            when 'S' then
             'Savings'
            else
             'Bank'
          end account_type,
          b.*
     FROM sttm_cust_account A
     LEFT JOIN VW_RM_PROFILE B
       ON a.cust_no = b.customer
    where a.auth_stat = 'A'
      and a.record_stat = 'O'
      and cust_no in (select customer_id
                        from corporate_profile
                       where corp_id = i_CorpId
                         and record_status_id in (1, 2));*/
  
    RETURN o_refcursor;
  END getAccountsByCorpId;

  /*FUNCTION getRmByCustomerId(i_CustomerId IN VARCHAR2)
    RETURN SYS_REFCURSOR IS
    o_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN o_refcursor FOR
      
  
    RETURN o_refcursor;
  END getRmByCustomerId;*/

  FUNCTION getRoleTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select * from ref_role_types;
  
    RETURN c_refcursor;
  END getRoleTypes;

  FUNCTION getRoleTypesBySignFlag(p_signatory_flag char) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select *
        from ref_role_types a
       where a.is_signatory = p_signatory_flag;
  
    RETURN c_refcursor;
  END getRoleTypesBySignFlag;

  FUNCTION getRolesForUser(p_user_id varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
    --multiple
      select b.*, a.user_role_id
        from user_role a, roles b
       where a.role_id = b.role_id
         and a.user_id = p_user_id -- in
            --  (select user_id from user_profile where username = i_Username)
         and a.record_status_id in (1, 2);
  
    RETURN c_refcursor;
  END getRolesForUser;

  FUNCTION getUserRoleById(p_user_role_id varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
    --multiple
      select b.*, a.user_role_id
        from user_role a, roles b
       where a.role_id = b.role_id
            -- and a.user_id = p_user_id -- in
         and a.user_role_id = p_user_role_id
            --  (select user_id from user_profile where username = i_Username)
         and a.record_status_id in (1, 2);
  
    RETURN c_refcursor;
  END getUserRoleById;

  FUNCTION getRolesForCorporate(i_CorpId varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select b.*
        from roles b
       where b.corp_id = i_CorpId
         and b.record_status_id in (1, 2)
      union all
      select b.*
        from roles b
       where b.corp_id = 0
         and i_CorpId <> 1
         and b.record_status_id in (1, 2);
  
    RETURN c_refcursor;
  END getRolesForCorporate;

  FUNCTION getRolesForCorporateByTypeId(i_CorpId       varchar2,
                                        p_role_type_id varchar2)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select b.*
        from roles b
       where b.corp_id = i_CorpId
         and b.role_type_id = p_role_type_id
         and b.record_status_id in (1, 2)
      union all
      select b.*
        from roles b
       where b.corp_id = 0
         and i_CorpId <> 1
         and b.role_type_id = p_role_type_id
         and b.record_status_id in (1, 2);
  
    RETURN c_refcursor;
  END getRolesForCorporateByTypeId;

  FUNCTION getMenusByModuleRoleCorpId(p_module_id varchar2,
                                      p_role_id   varchar2,
                                      p_corp_id   varchar2)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
    v_corp_id   Long;
  BEGIN
  
    select a.corp_id
      into v_corp_id
      from roles a
     where a.role_id = p_role_id;
  
    OPEN c_refcursor FOR
      select *
        from menu a, ref_modules b
       where ((v_corp_id = 1 and a.Menu_Availability in ('BOTH', 'ADMIN')) OR
             (v_corp_id <> 1 and
             a.Menu_Availability in ('BOTH', 'CORPORATE')))
         and a.module_id = b.module_id
         and a.module_id = p_module_id
         and b.role_type_id in
             (select x.role_type_id from roles x where x.role_id = p_role_id)
      
      ;
  
    RETURN c_refcursor;
  END getMenusByModuleRoleCorpId;

  FUNCTION getMenusByModuleCorpId(p_module_id varchar2, p_corp_id varchar2)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select *
        from menu a
       where ((p_corp_id = 1 and a.Menu_Availability in ('BOTH', 'ADMIN')) OR
             (p_corp_id <> 1 and
             a.Menu_Availability in ('BOTH', 'CORPORATE')))
         and a.module_id = p_module_id;
  
    RETURN c_refcursor;
  END getMenusByModuleCorpId;

  FUNCTION getAllMenus(p_corp_id varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select *
        from menu a
       where (p_corp_id = 1 and a.Menu_Availability in ('BOTH', 'ADMIN'))
          OR (p_corp_id <> 1 and
             a.Menu_Availability in ('BOTH', 'CORPORATE'));
  
    RETURN c_refcursor;
  END getAllMenus;

  /*FUNCTION getMenuHeadersByUserId(p_user_id varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
    
      select distinct MENUHEADERID, HEADER_TITLE, HEADER_DESCRIPTION
        from (select a.MENUHEADERID,
                     a.HEADER_TITLE,
                     a.HEADER_DESCRIPTION,
                     b.MENU_ORDER_ID
                from menuheaders a, menu b
               where a.menuheaderid = b.menuheaderid
                 and b.menuid in
                    
                     (select appmenuid
                        from appmenuroles
                       where roleid in (select role_id
                                          from user_role
                                         where user_id = p_user_id))
               order by b.MENU_ORDER_ID asc) x;
  
    RETURN c_refcursor;
  END getMenuHeadersByUserId;*/

  FUNCTION getMenuHeadersByUserId(p_user_id varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
    
      select a.MENUHEADERID, a.HEADER_TITLE, a.HEADER_DESCRIPTION
        from cibank.menuheaders a
       where a.menuheaderid in
             (select n.menuheaderid
                from cibank.appmenuroles m, cibank.menu n
               where appmenuid = menuid
                 and roleid in (select role_id
                                  from cibank.user_role
                                 where user_id = p_user_id))
       order by a.order_id asc;
  
    RETURN c_refcursor;
  END getMenuHeadersByUserId;

  FUNCTION getMenuHeaderItemsByUserId(p_user_id      varchar2,
                                      i_MenuHeaderId Integer)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
    v_user_type integer;
  BEGIN
  
    select a.user_type_id
      into v_user_type
      from user_profile a
     where user_id = p_user_id;
  
    OPEN c_refcursor FOR
      select *
        from menu x
       where menuheaderid = i_MenuHeaderId
         and (menuid in
             (select appmenuid
                 from appmenuroles
                where roleid in (select role_id
                                   from user_role
                                  where user_id = p_user_id)) or
             (v_user_type = 2 and x.default_menu = 'Y' and
             x.menu_availability = 'CORPORATE'))
       order by x.menu_order_id;
  
    RETURN c_refcursor;
  END getMenuHeaderItemsByUserId;
  function cancelFIRSTinValidnupload(i_batchid VARCHAR2, i_userid VARCHAR2)
    RETURN VARCHAR2
  
   IS
    v_err_message VARCHAR2(3000);
    v_response    VARCHAR2(100);
    v_taxtype     VARCHAR2(100);
    v_count       NUMBER;
  
  BEGIN
  
    select TAXTYPE
      into v_taxtype
      from FIRS_REMIT_DETAILS_TEMP
     where BATCH_DETAIL_ID = i_batchid;
    IF (v_taxtype = 'WHT') THEN
      Select count(1)
        into v_count
        from FIRS_REMIT_DETAILS_WHT_TEMP
       where BATCH_DETAIL_ID = i_batchid
         and TRANSACTION_INITIATED = 'Y';
      IF (v_count > 0) THEN
        update FIRS_REMIT_DETAILS_WHT_TEMP
           set TRANSACTION_INITIATED = 'CANCELED',
               LAST_MODIFIED_BY      = i_userid,
               LAST_MODIFIED_DATE    = SYSDATE
         WHERE BATCH_DETAIL_ID = i_batchid
           AND TRANSACTION_INITIATED = 'N';
      ELSE
        update FIRS_REMIT_DETAILS_WHT_TEMP
           set TRANSACTION_INITIATED = 'CANCELED',
               LAST_MODIFIED_BY      = i_userid,
               LAST_MODIFIED_DATE    = SYSDATE
         WHERE BATCH_DETAIL_ID = i_batchid
           AND TRANSACTION_INITIATED = 'N';
        update FIRS_REMIT_DETAILS_TEMP
           set TRANSACTION_INITIATED = 'CANCELED',
               LAST_MODIFIED_BY      = i_userid,
               LAST_MODIFIED_DATE    = SYSDATE
         WHERE BATCH_DETAIL_ID = i_batchid;
      END IF;
    ELSIF (v_taxtype = 'PAYE') THEN
    
      Select count(1)
        into v_count
        from FIRS_REMIT_DETAILS_PAYE_TEMP
       where BATCH_DETAIL_ID = i_batchid
         and TRANSACTION_INITIATED = 'Y';
      IF (v_count > 0) THEN
        update FIRS_REMIT_DETAILS_PAYE_TEMP
           set TRANSACTION_INITIATED = 'CANCELED',
               LAST_MODIFIED_BY      = i_userid,
               LAST_MODIFIED_DATE    = SYSDATE
         WHERE BATCH_DETAIL_ID = i_batchid
           AND TRANSACTION_INITIATED = 'N';
      ELSE
        update FIRS_REMIT_DETAILS_PAYE_TEMP
           set TRANSACTION_INITIATED = 'CANCELED',
               LAST_MODIFIED_BY      = i_userid,
               LAST_MODIFIED_DATE    = SYSDATE
         WHERE BATCH_DETAIL_ID = i_batchid
           AND TRANSACTION_INITIATED = 'N';
        update FIRS_REMIT_DETAILS_TEMP
           set TRANSACTION_INITIATED = 'CANCELED',
               LAST_MODIFIED_BY      = i_userid,
               LAST_MODIFIED_DATE    = SYSDATE
         WHERE BATCH_DETAIL_ID = i_batchid;
      END IF;
    
    END IF;
    commit;
    v_response := '00~~Transaction Cancellation was Successful';
    RETURN v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.FIRS_REMIT_DETAILS_TEMP');
    
      -- COMMIT;
      v_response := '99~~OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, '1');
  END cancelFIRSTinValidnupload;

  function cancelupload(i_batchid VARCHAR2, i_userid VARCHAR2)
    RETURN VARCHAR2
  
   IS
    v_err_message VARCHAR2(3000);
    v_response    VARCHAR2(100);
    v_count       NUMBER;
  
  BEGIN
    Select count(1)
      into v_count
      from TRANSACTION_UPLOAD_DETAIL
     where BATCH_ID = i_batchid
       and TRANSACTION_INITIATED = 'Y';
    IF (v_count > 0) THEN
      update TRANSACTION_UPLOAD_DETAIL
         set TRANSACTION_INITIATED = 'CANCELED',
             LAST_MODIFIED_BY      = i_userid,
             LAST_MODIFIED_DATE    = SYSDATE
       WHERE BATCH_ID = i_batchid
         AND TRANSACTION_INITIATED = 'N';
    ELSE
      update TRANSACTION_UPLOAD_DETAIL
         set TRANSACTION_INITIATED = 'CANCELED',
             LAST_MODIFIED_BY      = i_userid,
             LAST_MODIFIED_DATE    = SYSDATE
       WHERE BATCH_ID = i_batchid
         AND TRANSACTION_INITIATED = 'N';
      update TRANSACTION_UPLOAD_SUMMARY
         set TRANSACTION_INITIATED = 'CANCELED',
             LAST_MODIFIED_BY      = i_userid,
             LAST_MODIFIED_DATE    = SYSDATE
       WHERE BATCH_ID = i_batchid;
    END IF;
  
    commit;
    v_response := '00~~Transaction Cancellation was Successful';
    RETURN v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.TRANSACTION_UPLOAD_SUMMARY');
    
      -- COMMIT;
      v_response := '99~~OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, '1');
  END cancelupload;

  function getUserProfileByUsername(p_corporate_id varchar2,
                                    p_username     varchar2)
    return sys_refcursor is
    c_refcursor sys_refcursor;
  begin
    open c_refcursor for
      select a.*,
             b.enable_verifier_token,
             b.enable_inputter_token,
             b.authorizer_token_flag,
             IS_A_SOLEPROPRIATOR as is_sme, --correct
             --multiple
             b.posting_option_id,
             c.name              posting_option_desc
      -- case b.corporate_type_id
      /* case b.corporate_type_id --correct
        when 4 then
         'Y'
        else
         'N'
      end is_sme*/
        from user_profile a, corporate_profile b, ref_posting_options c
       where username = p_username
         and nvl(b.posting_option_id, 2) = c.posting_option_id
         and a.corp_id = b.corp_id
         and b.corporate_id = p_corporate_id
         and a.record_status_id in (1, 2);
    return c_refcursor;
  end getUserProfileByUsername;

  function getUserProfilesByCorpId(i_corpId integer) return sys_refcursor is
    c_refcursor sys_refcursor;
  begin
    open c_refcursor for
      select *
        from user_profile a
       where a.corp_id = i_corpId
         and a.record_status_id in (1, 2);
    return c_refcursor;
  end getUserProfilesByCorpId;

  function getUserProfilesByGroupId(i_groupId integer) return sys_refcursor is
    c_refcursor sys_refcursor;
  begin
    open c_refcursor for
      select *
        from user_profile a
       where a.user_id in
             (select b.user_id
                from approval_groups_users b
               where b.approval_group_id = i_groupId)
         and a.record_status_id in (1, 2);
    return c_refcursor;
  end getUserProfilesByGroupId;

  function getCorporateProfile(i_CorpId varchar2) return sys_refcursor is
    c_refcursor sys_refcursor;
  begin
    open c_refcursor for
      select *
        from corporate_profile a
       where corp_id = i_CorpId
         and a.record_status_id in (1, 2);
    return c_refcursor;
  end getCorporateProfile;

  function saveUserAccountAccess(o_reference         out varchar2,
                                 i_ACCOUNT_ACCESS_ID NUMBER,
                                 i_USER_ID           NUMBER,
                                 i_CORP_ACCT_ID      NUMBER,
                                 i_CORP_ID           NUMBER,
                                 
                                 i_CREATED_BY NUMBER,
                                 
                                 i_APPROVED_BY NUMBER,
                                 
                                 i_LAST_MODIFIED_BY NUMBER,
                                 
                                 i_REQUEST_TYPE_ID INTEGER,
                                 i_MENU_ID         integer,
                                 i_ACCOUNT_RIGHTS  VARCHAR2,
                                 i_TRANSFER_LIMIT  number,
                                 i_view_balance    char,
                                 p_context_url     varchar2,
                                 p_ip_mac_address  varchar2,
                                 p_session_id      varchar2) RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    SELECT USER_ACCOUNT_ACCESS_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT USER_ACCOUNT_ACCESS_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
    
      INSERT INTO USER_ACCOUNT_ACCESS
        (ACCOUNT_ACCESS_ID,
         USER_ID,
         CORP_ACCT_ID,
         CORP_ID,
         APPROVAL_STATUS_ID,
         RECORD_STATUS_ID,
         CREATED_BY,
         CREATED_DATE,
         APPROVED_BY,
         APPROVED_DATE,
         LAST_MODIFIED_BY,
         LAST_MODIFIED_DATE,
         REQUEST_TYPE_ID,
         ACCOUNT_RIGHTS,
         TRANSFER_LIMIT,
         view_balance)
      VALUES
        (v_recordid,
         i_USER_ID,
         i_CORP_ACCT_ID,
         i_CORP_ID,
         v_approvalstatus,
         v_recordstatus,
         i_CREATED_BY,
         sysdate,
         i_APPROVED_BY,
         sysdate,
         i_LAST_MODIFIED_BY,
         sysdate,
         i_REQUEST_TYPE_ID,
         (select name
            from ref_account_rights
           where account_right_id = i_ACCOUNT_RIGHTS),
         i_TRANSFER_LIMIT,
         i_view_balance);
    
    else
      v_recordid := i_ACCOUNT_ACCESS_ID;
    END IF;
  
    INSERT INTO USER_ACCOUNT_ACCESS_REQ
      (ACCOUNT_ACCESS_ID,
       USER_ID,
       CORP_ACCT_ID,
       CORP_ID,
       APPROVAL_STATUS_ID,
       RECORD_STATUS_ID,
       CREATED_BY,
       CREATED_DATE,
       APPROVED_BY,
       APPROVED_DATE,
       LAST_MODIFIED_BY,
       LAST_MODIFIED_DATE,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID,
       ACCOUNT_RIGHTS,
       TRANSFER_LIMIT,
       view_balance)
    VALUES
      (v_recordid,
       i_USER_ID,
       i_CORP_ACCT_ID,
       i_CORP_ID,
       v_approvalstatus,
       v_recordstatus,
       i_CREATED_BY,
       sysdate,
       i_APPROVED_BY,
       sysdate,
       i_LAST_MODIFIED_BY,
       sysdate,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid,
       (select name
          from ref_account_rights
         where account_right_id = i_ACCOUNT_RIGHTS),
       i_TRANSFER_LIMIT,
       i_view_balance);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      --commit;
      o_reference := v_recordid;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'USER-ACCOUNT', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveUserAccountAccess');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END saveUserAccountAccess;

  function saveApprovalGroup(o_reference      out varchar2,
                             i_GROUP_ID       NUMBER,
                             i_NAME           VARCHAR2,
                             i_DESCRIPTION    VARCHAR2,
                             i_CORP_ID        NUMBER,
                             i_APPROVAL_LEVEL NUMBER,
                             i_CREATED_BY     NUMBER,
                             
                             i_LAST_MODIFIED_BY NUMBER,
                             
                             i_APPROVAL_COMMENTS VARCHAR2,
                             i_APPROVED_BY       NUMBER,
                             
                             i_APPLY_APPROVAL_LIMIT VARCHAR2,
                             i_REQUEST_TYPE_ID      INTEGER,
                             i_GROUP_EMAILS         varchar2,
                             i_MENU_ID              integer,
                             i_group_type_id        integer,
                             i_target_route_sign_id integer,
                             p_system_generated     char,
                             p_context_url          varchar2,
                             p_ip_mac_address       varchar2,
                             p_session_id           varchar2) RETURN VARCHAR2
  
   IS
    v_err_message               VARCHAR2(3000);
    v_response                  VARCHAR2(100);
    v_recordstatus              VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid                  NUMBER;
    v_requestid                 NUMBER;
    v_approvalstatus            VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_internal_group_exist_flag char(1) := 'Y';
  BEGIN
  
    BEGIN
    
      -- group internal to signatory id cannot be created twice
      -- so check if internal group exists first 
      select x.group_id, '00~~REQUEST CREATED SUCCESSFULLY'
        into o_reference, v_response
        from approval_groups x
       where x.target_approval_route_sign_id = i_target_route_sign_id
         and i_target_route_sign_id > 0;
      return v_response;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT APPROVAL_GROUPS_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
        v_recordstatus := getRecordStatusId(i_REQUEST_TYPE_ID);
        IF (i_REQUEST_TYPE_ID = '1') -- NEW
         THEN
        
          SELECT APPROVAL_GROUPS_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
        
          -- to do not create records for signatory group type
          -- this will be handled once the signatory is approved
          --if (i_target_route_sign_id is null or i_target_route_sign_id<=0) then
        
          /* if (p_system_generated IN ('Y')) then
                    INSERT INTO APPROVAL_GROUPS
            (GROUP_ID,
             NAME,
             DESCRIPTION,
             CORP_ID,
             APPROVAL_LEVEL,
             CREATED_BY,
             CREATED_DATE,
             LAST_MODIFIED_BY,
             LAST_MODIFIED_DATE,
             APPROVAL_COMMENTS,
            -- APPROVED_BY,
             APPROVED_DATE,
             RECORD_STATUS_ID,
             APPROVAL_STATUS_ID,
             APPLY_APPROVAL_LIMIT,
             REQUEST_TYPE_ID,
             GROUP_EMAILS,
             group_type_id,
             target_approval_route_sign_id)
          VALUES
            (v_recordid,
             i_NAME,
             i_DESCRIPTION,
             i_CORP_ID,
             i_APPROVAL_LEVEL,
             i_CREATED_BY,
             sysdate,
             i_LAST_MODIFIED_BY,
             sysdate,
             i_APPROVAL_COMMENTS,
            -- 1,
             sysdate,
             1,
             1,
             i_APPLY_APPROVAL_LIMIT,
             i_REQUEST_TYPE_ID,
             i_GROUP_EMAILS,
             i_group_type_id,
             i_target_route_sign_id);
             o_reference := v_recordid;
            -- return '00~~RECORD CREATED AND SENT FOR APPROVAL';
          else
            
          */
          INSERT INTO APPROVAL_GROUPS
            (GROUP_ID,
             NAME,
             DESCRIPTION,
             CORP_ID,
             APPROVAL_LEVEL,
             CREATED_BY,
             CREATED_DATE,
             LAST_MODIFIED_BY,
             LAST_MODIFIED_DATE,
             APPROVAL_COMMENTS,
             APPROVED_BY,
             APPROVED_DATE,
             RECORD_STATUS_ID,
             APPROVAL_STATUS_ID,
             APPLY_APPROVAL_LIMIT,
             REQUEST_TYPE_ID,
             GROUP_EMAILS,
             group_type_id,
             target_approval_route_sign_id)
          VALUES
            (v_recordid,
             i_NAME,
             i_DESCRIPTION,
             i_CORP_ID,
             i_APPROVAL_LEVEL,
             i_CREATED_BY,
             sysdate,
             i_LAST_MODIFIED_BY,
             sysdate,
             i_APPROVAL_COMMENTS,
             i_APPROVED_BY,
             sysdate,
             v_recordstatus,
             v_approvalstatus,
             i_APPLY_APPROVAL_LIMIT,
             i_REQUEST_TYPE_ID,
             i_GROUP_EMAILS,
             i_group_type_id,
             i_target_route_sign_id);
          -- end if;
          --end if;
        else
          v_recordid := i_GROUP_ID;
        END IF;
      
        INSERT INTO APPROVAL_GROUPS_REQ
          (GROUP_ID,
           NAME,
           DESCRIPTION,
           CORP_ID,
           APPROVAL_LEVEL,
           CREATED_BY,
           CREATED_DATE,
           LAST_MODIFIED_BY,
           LAST_MODIFIED_DATE,
           APPROVAL_COMMENTS,
           APPROVED_BY,
           APPROVED_DATE,
           RECORD_STATUS_ID,
           APPROVAL_STATUS_ID,
           APPLY_APPROVAL_LIMIT,
           REQUEST_TYPE_ID,
           GROUP_EMAILS,
           REQUEST_ID,
           PARENT_TABLE_ID,
           group_type_id,
           target_approval_route_sign_id)
        VALUES
          (v_recordid,
           i_NAME,
           i_DESCRIPTION,
           i_CORP_ID,
           i_APPROVAL_LEVEL,
           i_CREATED_BY,
           sysdate,
           i_LAST_MODIFIED_BY,
           sysdate,
           i_APPROVAL_COMMENTS,
           i_APPROVED_BY,
           sysdate,
           v_recordstatus,
           v_approvalstatus,
           i_APPLY_APPROVAL_LIMIT,
           i_REQUEST_TYPE_ID,
           i_GROUP_EMAILS,
           v_requestid,
           v_recordid,
           i_group_type_id,
           i_target_route_sign_id);
        if (p_system_generated IN ('Y')) then
          --return '00~~RECORD CREATED AND SENT FOR APPROVAL';
          v_response := '00~~RECORD CREATED AND SENT FOR APPROVAL';
        else
          v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                              i_CREATED_BY,
                                                              i_MENU_ID,
                                                              i_REQUEST_TYPE_ID,
                                                              v_requestid,
                                                              0,
                                                              i_CORP_ID,
                                                              p_context_url,
                                                              p_ip_mac_address,
                                                              p_session_id);
        end if;
        --v_response := '00';
        if (instr(v_response, '00')) > 0 then
          -- commit;
          o_reference := v_recordid;
        else
          rollback;
        end if;
        createAuditLog(i_CREATED_BY,
                       p_session_id,
                       'APPROVAL-GROUP', --event category
                       'recordid~' || v_recordid || '~~requestid~' ||
                       v_requestid, -- event details
                       p_context_url,
                       p_ip_mac_address,
                       i_MENU_ID,
                       i_REQUEST_TYPE_ID,
                       v_response,
                       v_requestid);
        return v_response;
    END;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveApprovalGroup');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END saveApprovalGroup;

  function saveApprovalUserGroup(o_reference                out varchar2,
                                 i_APPROVAL_GROUPS_USERS_ID NUMBER,
                                 i_GROUPS_USERS_TYPE        NUMBER,
                                 p_USER_ID                  NUMBER,
                                 p_DEPT_ID                  NUMBER,
                                 i_CREATED_BY               NUMBER,
                                 i_LAST_MODIFIED_BY         NUMBER,
                                 i_APPROVAL_GROUP_ID        NUMBER,
                                 i_CORP_ID                  NUMBER,
                                 i_REQUEST_TYPE_ID          INTEGER,
                                 i_MENU_ID                  integer,
                                 p_context_url              varchar2,
                                 p_ip_mac_address           varchar2,
                                 p_session_id               varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_user_id        number := p_USER_ID;
    v_dept_id        number := p_DEPT_ID;
  BEGIN
  
    if (i_GROUPS_USERS_TYPE = 1) then
      v_dept_id := null;
      if (v_user_id is null) then
        return '99~~User is required';
      end if;
    elsif (i_GROUPS_USERS_TYPE = 2) then
      v_user_id := null;
      if (v_dept_id is null) then
        return '99~~Department is required';
      end if;
    end if;
  
    SELECT APPROVAL_GROUPS_USERS_REQ_SEQ.nextval
      INTO v_requestid
      FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT APPROVAL_GROUPS_USERS_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
    
      v_recordstatus := getRecordStatusId(i_REQUEST_TYPE_ID);
    
      INSERT INTO APPROVAL_GROUPS_USERS
        (APPROVAL_GROUPS_USERS_ID,
         GROUPS_USERS_TYPE,
         USER_ID,
         DEPT_ID,
         CREATED_BY,
         CREATED_DATE,
         LAST_MODIFIED_BY,
         LAST_MODIFIED_DATE,
         APPROVAL_STATUS_ID,
         RECORD_STATUS_ID,
         APPROVAL_GROUP_ID,
         CORP_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,
         i_GROUPS_USERS_TYPE,
         v_USER_ID,
         v_DEPT_ID,
         i_CREATED_BY,
         sysdate,
         i_LAST_MODIFIED_BY,
         sysdate,
         v_recordstatus,
         v_approvalstatus,
         i_APPROVAL_GROUP_ID,
         i_CORP_ID,
         i_REQUEST_TYPE_ID);
    
    else
      v_recordid := i_APPROVAL_GROUPS_USERS_ID;
    END IF;
  
    v_recordstatus := getRecordStatusId(i_REQUEST_TYPE_ID);
  
    INSERT INTO APPROVAL_GROUPS_USERS_REQ
      (APPROVAL_GROUPS_USERS_ID,
       GROUPS_USERS_TYPE,
       USER_ID,
       DEPT_ID,
       CREATED_BY,
       CREATED_DATE,
       LAST_MODIFIED_BY,
       LAST_MODIFIED_DATE,
       APPROVAL_STATUS_ID,
       RECORD_STATUS_ID,
       APPROVAL_GROUP_ID,
       CORP_ID,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_recordstatus,
       i_GROUPS_USERS_TYPE,
       v_USER_ID,
       v_DEPT_ID,
       i_CREATED_BY,
       sysdate,
       i_LAST_MODIFIED_BY,
       sysdate,
       v_approvalstatus,
       v_recordstatus,
       -- i_RECORD_STATUS_ID,
       i_APPROVAL_GROUP_ID,
       i_CORP_ID,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      -- commit;
      o_reference := v_recordid;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'APPROVAL-USER-GROUP', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveApprovalUserGroup');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END saveApprovalUserGroup;

  FUNCTION searchCorporateProfiles(i_searchParam varchar2)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select *
        from corporate_profile
       where length(i_searchParam) >= 2
         and (instr(upper(name), upper(i_searchParam)) > 0 or
              instr(upper(corporate_id), upper(i_searchParam)) > 0 or
              (length(i_searchParam) = 10 and
               corp_id in
               (select corp_id
                  from corporate_account
                 where account_number = i_searchParam)));
    RETURN c_refcursor;
  END searchCorporateProfiles;

  procedure newPosFeed(
                       
                       i_MESSAGE      CLOB,
                       i_MESSAGE_TYPE VARCHAR2,
                       i_MESSAGE_CODE VARCHAR2
                       
                       ) as
  begin
  
    INSERT INTO POS_FEEDS
      (MESSAGE_ID, MESSAGE, MESSAGE_TYPE, MESSAGE_CODE)
    VALUES
      (POS_MESSAGES_SEQ.nextval, i_MESSAGE, i_MESSAGE_TYPE, i_MESSAGE_CODE);
  
  end newPosFeed;

  FUNCTION getPendingPosFeeds RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select *
        from POS_FEEDS a
       where a.status_code = 'N'
         AND A.RETRY_COUNT <= 5
         and a.message_code in ('ISOREQST', 'ISOREPLY');
    RETURN c_refcursor;
  END getPendingPosFeeds;

  -- not fully implemented
  FUNCTION getPosFinancialFeeds RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select *
        from POS_FINANCIAL_FEED_REQUEST a, POS_FINANCIAL_FEED_RESPONSE b
       where a.clearing_period = b.clearing_period
         and a.transaction_id = b.transaction_id
         and a.feed_message_code in ('ISOREQST', 'ISOREPLY')
         and a.channel_message_code like '_2__'
         and b.feed_message_code in ('ISOREQST', 'ISOREPLY');
    RETURN c_refcursor;
  END getPosFinancialFeeds;

  procedure newPosFinancialRequest(i_FEED_TYPE                    VARCHAR2,
                                   i_FEED_MESSAGE_CODE            VARCHAR2,
                                   i_FEED_MESSAGE_VERSION         VARCHAR2,
                                   i_FEED_TIMESTAMP               date,
                                   i_CLEARING_PERIOD              VARCHAR2,
                                   i_TRANSACTION_ID               VARCHAR2,
                                   i_TERMINAL_TYPE                VARCHAR2,
                                   i_PRT_APPLICATION_PDD          VARCHAR2,
                                   i_CHANNEL_MESSAGE_CODE         VARCHAR2,
                                   i_A041_CARD_ACCEPTOR_TERM_ID   VARCHAR2,
                                   i_AUTH_TRANSACTION_CODE        VARCHAR2,
                                   i_A012_LOCAL_TRANSACTION_TIME  VARCHAR2,
                                   i_A013_LOCAL_TRANSACTION_DATE  date,
                                   i_A004_TRANSACTION_AMOUNT      number,
                                   i_A007_TRANSMISION_DATE_TIME   date,
                                   i_A011_SYSTEM_TRACE_AUDIT_NUM  VARCHAR2,
                                   i_MERCHANT_CATEGORY_CODE       VARCHAR2,
                                   i_A022_PAN_AND_DATE_ENTRY_MODE VARCHAR2,
                                   i_A022_PIN_ENTRY_CAPABILITY    VARCHAR2,
                                   i_PAN_SEQUENCE_NUMBER          VARCHAR2,
                                   i_A025_POS_CONDITION_CODE      VARCHAR2,
                                   i_A026_POS_PIN_CAPTURE_CODE    VARCHAR2,
                                   i_ACCEPTING_INSTITUTION        VARCHAR2,
                                   i_RETRIEVAL_REFERENCE_NUMBER   VARCHAR2,
                                   i_CARD_ACCEPTOR_IDENT_CODE     VARCHAR2,
                                   i_A043_CARD_ACC_NME_LOC_8583   VARCHAR2,
                                   i_TRANSACTION_CURRENCY_CODE    VARCHAR2,
                                   i_A059_ECHO_DATA_8583          VARCHAR2,
                                   i_A095_REPLAC_AMOUNTS_8583     VARCHAR2,
                                   i_DATE_FETCHED                 DATE,
                                   i_POS_FEEDS_REF                VARCHAR) as
  
    v_status_code    varchar2(50);
    v_status_message varchar2(100);
  begin
  
    BEGIN
      insert into POS_FINANCIAL_FEED_REQUEST
        (FEED_TYPE,
         FEED_MESSAGE_CODE,
         FEED_MESSAGE_VERSION,
         FEED_TIMESTAMP,
         CLEARING_PERIOD,
         TRANSACTION_ID,
         TERMINAL_TYPE,
         PRT_APPLICATION_PDD,
         CHANNEL_MESSAGE_CODE,
         A041_CARD_ACCEPTOR_TERM_ID,
         AUTH_TRANSACTION_CODE,
         A012_LOCAL_TRANSACTION_TIME,
         A013_LOCAL_TRANSACTION_DATE,
         A004_TRANSACTION_AMOUNT,
         A007_TRANSMISION_DATE_AND_TIME,
         A011_SYSTEM_TRACE_AUDIT_NUMBER,
         MERCHANT_CATEGORY_CODE,
         A022_PAN_AND_DATE_ENTRY_MODE,
         A022_PIN_ENTRY_CAPABILITY,
         PAN_SEQUENCE_NUMBER,
         A025_POS_CONDITION_CODE,
         A026_POS_PIN_CAPTURE_CODE,
         ACCEPTING_INSTITUTION,
         RETRIEVAL_REFERENCE_NUMBER,
         CARD_ACCEPTOR_IDENT_CODE,
         A043_CARD_ACC_NME_LOC_8583,
         TRANSACTION_CURRENCY_CODE,
         A059_ECHO_DATA_8583,
         A095_REPLAC_AMOUNTS_8583,
         DATE_FETCHED,
         POS_FEEDS_REF)
      values
        (i_FEED_TYPE,
         i_FEED_MESSAGE_CODE,
         i_FEED_MESSAGE_VERSION,
         i_FEED_TIMESTAMP,
         i_CLEARING_PERIOD,
         i_TRANSACTION_ID,
         i_TERMINAL_TYPE,
         i_PRT_APPLICATION_PDD,
         i_CHANNEL_MESSAGE_CODE,
         i_A041_CARD_ACCEPTOR_TERM_ID,
         i_AUTH_TRANSACTION_CODE,
         i_A012_LOCAL_TRANSACTION_TIME,
         trunc(i_A013_LOCAL_TRANSACTION_DATE),
         i_A004_TRANSACTION_AMOUNT,
         i_A007_TRANSMISION_DATE_TIME,
         i_A011_SYSTEM_TRACE_AUDIT_NUM,
         i_MERCHANT_CATEGORY_CODE,
         i_A022_PAN_AND_DATE_ENTRY_MODE,
         i_A022_PIN_ENTRY_CAPABILITY,
         i_PAN_SEQUENCE_NUMBER,
         i_A025_POS_CONDITION_CODE,
         i_A026_POS_PIN_CAPTURE_CODE,
         i_ACCEPTING_INSTITUTION,
         i_RETRIEVAL_REFERENCE_NUMBER,
         i_CARD_ACCEPTOR_IDENT_CODE,
         i_A043_CARD_ACC_NME_LOC_8583,
         i_TRANSACTION_CURRENCY_CODE,
         i_A059_ECHO_DATA_8583,
         i_A095_REPLAC_AMOUNTS_8583,
         i_DATE_FETCHED,
         i_POS_FEEDS_REF);
    
      v_status_code    := 'P';
      v_status_message := 'Succ';
    
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        v_status_code    := 'F';
        v_status_message := 'Dup';
    END;
  
    update POS_FEEDS
       SET RETRY_COUNT        = RETRY_COUNT + 1,
           STATUS_CODE        = v_status_code,
           STATUS_DESCRIPTION = v_status_message,
           date_committed     = sysdate
     where MESSAGE_ID = i_POS_FEEDS_REF;
  
  end;

  procedure newPosFinancialResponse(i_FEED_TYPE                  VARCHAR2,
                                    i_FEED_MESSAGE_CODE          VARCHAR2,
                                    i_FEED_MESSAGE_VERSION       VARCHAR2,
                                    i_FEED_TIMESTAMP             DATE,
                                    i_CLEARING_PERIOD            VARCHAR2,
                                    i_TRANSACTION_ID             VARCHAR2,
                                    i_EBMS_TRANSACTION_TAG       VARCHAR2,
                                    i_CHANNEL_MESSAGE_CODE       VARCHAR2,
                                    i_EPMS_RESPONSE_CODE         VARCHAR2,
                                    i_A041_CARD_ACCEPTOR_TERM_ID VARCHAR2,
                                    i_AUTH_RESPONSE_CODE         VARCHAR2,
                                    i_AUTH_RESPONSE_IDENTIFIER   VARCHAR2,
                                    i_FWD_INSTITUTION_ID_CODE    VARCHAR2,
                                    i_TRANSACTION_TIMESTAMP      DATE,
                                    i_TRANSACTION_AMOUNT         NUMBER,
                                    i_AMOUNT_SIGNAL              VARCHAR2,
                                    i_EPMS_TERMINAL_ID           VARCHAR2,
                                    i_BANK_CODE                  VARCHAR2,
                                    i_PRIMARY_ACCOUNT_NUMBER     VARCHAR2,
                                    i_CIPHER_DATA_KEY_INDEX      VARCHAR2,
                                    i_CARD_EXPIRATION_DATE       varchar2,
                                    i_PAYMENT_SYSTEM             VARCHAR2,
                                    i_EPMS_DECISION_SCENARIO     VARCHAR2,
                                    i_A059_ECHO_DATA_8583        VARCHAR2,
                                    i_DATE_FETCHED               DATE,
                                    i_POS_FEEDS_REF              VARCHAR) as
  
    v_status_code    varchar2(50);
    v_status_message varchar2(100);
  begin
  
    BEGIN
      insert into POS_FINANCIAL_FEED_RESPONSE
        (FEED_TYPE,
         FEED_MESSAGE_CODE,
         FEED_MESSAGE_VERSION,
         FEED_TIMESTAMP,
         CLEARING_PERIOD,
         TRANSACTION_ID,
         EBMS_TRANSACTION_TAG,
         CHANNEL_MESSAGE_CODE,
         EPMS_RESPONSE_CODE,
         A041_CARD_ACCEPTOR_TERM_ID,
         AUTH_RESPONSE_CODE,
         AUTH_RESPONSE_IDENTIFIER,
         FWD_INSTITUTION_ID_CODE,
         TRANSACTION_TIMESTAMP,
         TRANSACTION_AMOUNT,
         AMOUNT_SIGNAL,
         EPMS_TERMINAL_ID,
         BANK_CODE,
         PRIMARY_ACCOUNT_NUMBER,
         CIPHER_DATA_KEY_INDEX,
         CARD_EXPIRATION_DATE,
         PAYMENT_SYSTEM,
         EPMS_DECISION_SCENARIO,
         A059_ECHO_DATA_8583,
         DATE_FETCHED,
         POS_FEEDS_REF)
      values
        (i_FEED_TYPE,
         i_FEED_MESSAGE_CODE,
         i_FEED_MESSAGE_VERSION,
         i_FEED_TIMESTAMP,
         i_CLEARING_PERIOD,
         i_TRANSACTION_ID,
         i_EBMS_TRANSACTION_TAG,
         i_CHANNEL_MESSAGE_CODE,
         i_EPMS_RESPONSE_CODE,
         i_A041_CARD_ACCEPTOR_TERM_ID,
         i_AUTH_RESPONSE_CODE,
         i_AUTH_RESPONSE_IDENTIFIER,
         i_FWD_INSTITUTION_ID_CODE,
         i_TRANSACTION_TIMESTAMP,
         i_TRANSACTION_AMOUNT,
         i_AMOUNT_SIGNAL,
         i_EPMS_TERMINAL_ID,
         i_BANK_CODE,
         i_PRIMARY_ACCOUNT_NUMBER,
         i_CIPHER_DATA_KEY_INDEX,
         i_CARD_EXPIRATION_DATE,
         i_PAYMENT_SYSTEM,
         i_EPMS_DECISION_SCENARIO,
         i_A059_ECHO_DATA_8583,
         i_DATE_FETCHED,
         i_POS_FEEDS_REF);
    
      v_status_code    := 'P';
      v_status_message := 'Succ';
    
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        v_status_code    := 'F';
        v_status_message := 'Dup';
    END;
  
    update POS_FEEDS
       SET RETRY_COUNT        = RETRY_COUNT + 1,
           STATUS_CODE        = v_status_code,
           STATUS_DESCRIPTION = v_status_message,
           date_committed     = sysdate
     where MESSAGE_ID = i_POS_FEEDS_REF;
  
  end;

  FUNCTION searchUsers(i_corpId varchar2, i_searchParam varchar2)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select *
        from user_profile
       where length(i_searchParam) >= 3
         and (instr(upper(First_Name), upper(i_searchParam)) > 0 or
              instr(upper(Last_Name), upper(i_searchParam)) > 0 or
              Username = i_searchParam)
         and record_Status_id in (1, 2)
         and corp_id = i_corpId;
    RETURN c_refcursor;
  END searchUsers;

  FUNCTION searchDepartments(i_corpId integer, i_searchParam varchar2)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select *
        from departments
       where length(i_searchParam) >= 2
         and ((instr(upper(Name), upper(i_searchParam)) > 0 or
              instr(upper(Description), upper(i_searchParam)) > 0) or
              corp_id = i_corpId)
         and record_Status_id in (1, 2);
    RETURN c_refcursor;
  END searchDepartments;

  FUNCTION searchRoles(i_corpId integer, i_searchParam varchar2)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select *
        from roles
       where length(i_searchParam) >= 3
         and (instr(upper(Name), upper(i_searchParam)) > 0)
         and corp_id = i_corpId
         and record_Status_id in (1, 2);
    RETURN c_refcursor;
  END searchRoles;

  FUNCTION getApprovalGroupsByCorpId(i_corpId integer) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select *
        from approval_groups a
       where (corp_id = i_corpId or i_corpId = 0)
         and a.record_status_id in (1, 2);
    RETURN c_refcursor;
  END getApprovalGroupsByCorpId;

  FUNCTION getTransactionTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.transaction_type_id id,
             a.name                name,
             a.name                description,
             a.parent_table_name   misc1
        from ref_transaction_type a;
  
    RETURN c_refcursor;
  END getTransactionTypes;

  FUNCTION getRouteTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.approval_route_type_id id,
             a.name name,
             a.description description,
             '' miscString1,
             a.default_priority_no miscInt
        from ref_approval_route_type a;
    RETURN c_refcursor;
  END getRouteTypes;

  FUNCTION getModuleTypesByRoleId(p_role_id varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.module_id id,
             a.module_name name,
             a.module_description description,
             '' miscString1,
             0 miscInt
        from ref_modules a
       where a.role_type_id in
             (select x.role_type_id from roles x where x.role_id = p_role_id);
    RETURN c_refcursor;
  END getModuleTypesByRoleId;

  FUNCTION getModuleTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.module_id id,
             a.module_name name,
             a.module_description description,
             '' miscString1,
             0 miscInt
        from ref_modules a;
    RETURN c_refcursor;
  END getModuleTypes;

  FUNCTION getSignatoryTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.signatory_type_id id,
             a.name name,
             a.description description,
             '' misc1
        from ref_signatory_type a;
    RETURN c_refcursor;
  END getSignatoryTypes;

  FUNCTION getApprovalGroupUserTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.group_user_type_id id, a.name name, a.name description
        from ref_group_user_type a;
  
    RETURN c_refcursor;
  END getApprovalGroupUserTypes;

  FUNCTION getCorporateAccountsByCorpId(i_corpId integer)
    RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.corp_acct_id   id,
             a.account_number name,
             a.account_name   description
        from corporate_account a
       where a.corp_id = i_corpId
         and a.record_status_id in (1, 2);
    RETURN c_refcursor;
  END getCorporateAccountsByCorpId;

  FUNCTION getApprovalRoutesByCorpId(i_corpId integer) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.approval_route_id id,
             a.route_name name,
             a.route_desc description,
             '' miscString1,
             0 miscInt
        from approval_route a
       where a.corp_id = i_corpId
         and a.record_status_id in (1, 2);
    RETURN c_refcursor;
  END getApprovalRoutesByCorpId;

 /*
 function getCorporateAccountsByUserId(i_corp_id integer,
                                        p_user_id varchar)
    RETURN SYS_REFCURSOR as
    c_refcursor SYS_REFCURSOR;
  begin
    open c_refcursor for
      select c.cust_no,
             c.branch_code,
             c.ac_desc,
             c.cust_no,
             c.cust_ac_no,
             c.ccy,
             c.cheque_book_facility,
             case c.account_type
               when 'U' then
                'Current'
               when 'S' then
                'Savings'
               when 'N' then
                'Nostro'
             end acctType,
             d.approval_limit,
             case d.has_global_acct_access
               when 'Y' then
                'TRANSFER'
               else
                a.account_rights
             end account_rights,
             e.description account_class,
             c.acy_avl_bal available_balance,
             view_balance
        from user_account_access a,
             corporate_account   b,
             sttm_cust_account   c,
             user_profile        d,
             sttm_account_class  e
       where c.cust_ac_no = b.account_number
         and (b.corp_acct_id = a.corp_acct_id and
             d.has_global_acct_access = 'N')
         and a.user_id = p_user_id
         and b.corp_id = i_corp_id
         and b.corp_id = a.corp_id
         and a.user_id = d.user_id
         and c.account_class = e.account_class
         and a.record_status_id in (1, 2)
         and c.auth_stat = 'A'
         and c.record_stat = 'O'
      union
      select c.cust_no,
             c.branch_code,
             c.ac_desc,
             c.cust_no,
             c.cust_ac_no,
             c.ccy,
             c.cheque_book_facility,
             case c.account_type
               when 'U' then
                'Current'
               when 'S' then
                'Savings'
               when 'N' then
                'Nostro'
             end acctType,
             d.approval_limit,
             case d.has_global_acct_access
               when 'Y' then
                'TRANSFER'
               else
                'TRANSFER'
             end account_rights,
             e.description account_class,
             c.acy_avl_bal available_balance,
             'Y' view_balance
        from corporate_account  b,
             sttm_cust_account  c,
             user_profile       d,
             sttm_account_class e
       where c.cust_ac_no = b.account_number
         and d.has_global_acct_access = 'Y'
         and d.user_id = p_user_id
         and b.corp_id = i_corp_id
         and c.auth_stat = 'A'
         and c.record_stat = 'O'
            --and b.corp_id=a.corp_id         
         and c.account_class = e.account_class;
    --and a.record_status_id in (1, 2)
  
    return c_refcursor;
  
  end getCorporateAccountsByUserId;


*/

function getCorporateAccountsByUserId(i_corp_id integer,
                                        p_user_id varchar)
    RETURN SYS_REFCURSOR as
    c_refcursor SYS_REFCURSOR;
  begin
    open c_refcursor for
      select c.cust_no,
             c.branch_code,
             c.ac_desc,
             c.cust_no,
             c.cust_ac_no,
             c.ccy,
             c.cheque_book_facility,
             case c.account_type
               when 'U' then
                'Current'
               when 'S' then
                'Savings'
               when 'N' then
                'Nostro'
             end acctType,
             d.approval_limit,
             case d.has_global_acct_access
               when 'Y' then
                'TRANSFER'
               else
                a.account_rights
             end account_rights,
             e.description account_class,
             --c.acy_avl_bal available_balance,
Fcubslive.acc_net_bal(c.cust_ac_no) available_balance,
             view_balance
        from user_account_access a,
             corporate_account   b,
             sttm_cust_account   c,
             user_profile        d,
             sttm_account_class  e
       where c.cust_ac_no = b.account_number
         and (b.corp_acct_id = a.corp_acct_id and
             d.has_global_acct_access = 'N')
         and a.user_id = p_user_id
         and b.corp_id = i_corp_id
         and b.corp_id = a.corp_id
         and a.user_id = d.user_id
         and c.account_class = e.account_class
         and a.record_status_id in (1, 2)
         and c.auth_stat = 'A'
         and c.record_stat = 'O'
      union
      select c.cust_no,
             c.branch_code,
             c.ac_desc,
             c.cust_no,
             c.cust_ac_no,
             c.ccy,
             c.cheque_book_facility,
             case c.account_type
               when 'U' then
                'Current'
               when 'S' then
                'Savings'
               when 'N' then
                'Nostro'
             end acctType,
             d.approval_limit,
             case d.has_global_acct_access
               when 'Y' then
                'TRANSFER'
               else
                'TRANSFER'
             end account_rights,
             e.description account_class,
            -- c.acy_avl_bal available_balance,
             --c.acy_avl_bal available_balance,
Fcubslive.acc_net_bal(c.cust_ac_no) available_balance,

             'Y' view_balance
        from corporate_account  b,
             sttm_cust_account  c,
             user_profile       d,
             sttm_account_class e
       where c.cust_ac_no = b.account_number
         and d.has_global_acct_access = 'Y'
         and d.user_id = p_user_id
         and b.corp_id = i_corp_id
         and c.auth_stat = 'A'
         and c.record_stat = 'O'
            --and b.corp_id=a.corp_id         
         and c.account_class = e.account_class;
    --and a.record_status_id in (1, 2)
  
    return c_refcursor;
  
  end getCorporateAccountsByUserId;

  function saveCorporateDiscount(i_CHARGE_DISCOUNT_ID  INTEGER,
                                 i_CORP_ID             INTEGER,
                                 i_PAYMENT_TYPE_ID     INTEGER,
                                 i_PERCENTAGE_DISCOUNT number,
                                 
                                 i_CREATED_BY       INTEGER,
                                 i_LAST_MODOFIED_BY INTEGER,
                                 
                                 i_APPROVAL_BY     NUMBER,
                                 i_REQUEST_TYPE_ID INTEGER,
                                 i_MENU_ID         INTEGER,
                                 p_context_url     varchar2,
                                 p_ip_mac_address  varchar2,
                                 p_session_id      varchar2) RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    SELECT CORPORATE_DISCOUNTS_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_DISCOUNTS_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CORPORATE_DISCOUNTS
        (CHARGE_DISCOUNT_ID,
         CORP_ID,
         PAYMENT_TYPE_ID,
         PERCENTAGE_DISCOUNT,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVAL_DATE,
         APPROVAL_BY,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- i_CHARGE_DISCOUNT_ID,
         i_CORP_ID,
         i_PAYMENT_TYPE_ID,
         i_PERCENTAGE_DISCOUNT,
         sysdate, --i_CREATED_DATE,
         i_CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         i_APPROVAL_BY,
         i_REQUEST_TYPE_ID);
    
    else
    
      v_recordid := i_CHARGE_DISCOUNT_ID;
    
    END IF;
  
    INSERT INTO CORPORATE_DISCOUNTS_REQ
      (CHARGE_DISCOUNT_ID,
       CORP_ID,
       PAYMENT_TYPE_ID,
       PERCENTAGE_DISCOUNT,
       CREATED_DATE,
       CREATED_BY,
       -- LAST_MODOFIED_BY, 
       -- LAST_MODIFIED_DATE, 
       RECORD_STATUS_ID,
       APPROVAL_STATUS_ID,
       APPROVAL_DATE,
       APPROVAL_BY,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_recordid, -- i_CHARGE_DISCOUNT_ID,
       i_CORP_ID,
       i_PAYMENT_TYPE_ID,
       i_PERCENTAGE_DISCOUNT,
       sysdate, --i_CREATED_DATE,
       i_CREATED_BY,
       --i_LAST_MODOFIED_BY,
       -- i_LAST_MODIFIED_DATE,
       v_recordstatus,
       v_approvalstatus,
       sysdate,
       i_APPROVAL_BY,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CORPORATE-DISCOUNT', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveCorporateDiscount');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END saveCorporateDiscount;

  function saveHoldingAccount(i_HOLDING_ACCOUNT_ID NUMBER,
                              i_ACCOUNT_NO         VARCHAR2,
                              i_ACCOUNT_TYPE       VARCHAR2,
                              i_NAME               VARCHAR2,
                              i_BRANCH_CODE        VARCHAR2,
                              i_CURRENCY_CODE      VARCHAR2,
                              
                              i_CREATED_BY       INTEGER,
                              i_LAST_MODOFIED_BY INTEGER,
                              
                              i_APPROVAL_BY     NUMBER,
                              i_REQUEST_TYPE_ID INTEGER,
                              i_MENU_ID         INTEGER,
                              p_context_url     varchar2,
                              p_ip_mac_address  varchar2,
                              p_session_id      varchar2) RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_ACCOUNT_TYPE   sttb_account.ac_or_gl%type;
    v_NAME           sttb_account.ac_gl_desc%type;
    v_BRANCH_CODE    sttb_account.branch_code%type;
    v_CURRENCY_CODE  sttb_account.ac_gl_ccy%type;
  BEGIN
  
    begin
      select ac_or_gl, ac_gl_desc, branch_code, ac_gl_ccy
        into v_ACCOUNT_TYPE, v_NAME, v_BRANCH_CODE, v_CURRENCY_CODE
        from sttb_account
       where ac_gl_no = i_ACCOUNT_NO;
    
      if (v_account_type = 'A') then
      
        SELECT a.ac_desc
          into v_NAME
          FROM STTM_CUST_ACCOUNT a
         WHERE cust_ac_no = i_ACCOUNT_NO
           and account_class in
               (SELECT account_class
                  FROM sttm_account_class
                 WHERE description LIKE '%COLLECTION%');
      
      end if;
    exception
      when no_data_found THEN
        v_response := '99|INVALID ACCOUNT NUMBER';
        return v_response;
    end;
  
    if ((v_BRANCH_CODE is null or trim(v_BRANCH_CODE) = '') and
       v_account_type = 'G') then
      v_BRANCH_CODE := i_BRANCH_CODE;
    end if;
  
    SELECT HOLDING_ACCOUNTS_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT HOLDING_ACCOUNTS_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO HOLDING_ACCOUNTS
        (HOLDING_ACCOUNT_ID,
         ACCOUNT_NO,
         ACCOUNT_TYPE,
         NAME,
         BRANCH_CODE,
         CURRENCY_CODE,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVAL_DATE,
         APPROVAL_BY,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- i_CHARGE_DISCOUNT_ID,
         i_ACCOUNT_NO,
         v_ACCOUNT_TYPE,
         v_NAME,
         v_BRANCH_CODE,
         v_CURRENCY_CODE,
         sysdate, --i_CREATED_DATE,
         i_CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         i_APPROVAL_BY,
         i_REQUEST_TYPE_ID);
    
    else
    
      v_recordid := i_HOLDING_ACCOUNT_ID;
    
    END IF;
  
    INSERT INTO HOLDING_ACCOUNTS_REQ
      (HOLDING_ACCOUNT_ID,
       ACCOUNT_NO,
       ACCOUNT_TYPE,
       NAME,
       BRANCH_CODE,
       CURRENCY_CODE,
       CREATED_DATE,
       CREATED_BY,
       -- LAST_MODOFIED_BY, 
       -- LAST_MODIFIED_DATE, 
       RECORD_STATUS_ID,
       APPROVAL_STATUS_ID,
       APPROVAL_DATE,
       APPROVAL_BY,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_recordid, -- i_CHARGE_DISCOUNT_ID,
       i_ACCOUNT_NO,
       v_ACCOUNT_TYPE,
       v_NAME,
       v_BRANCH_CODE,
       v_CURRENCY_CODE,
       sysdate, --i_CREATED_DATE,
       i_CREATED_BY,
       --i_LAST_MODOFIED_BY,
       -- i_LAST_MODIFIED_DATE,
       v_recordstatus,
       v_approvalstatus,
       sysdate,
       i_APPROVAL_BY,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        1,
                                                        
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'HOLDING-ACCOUNT', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    RETURN v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveHoldingAccount');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END saveHoldingAccount;

  FUNCTION getHoldingAccounts RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select * from holding_accounts a where a.record_status_id in (1, 2);
    RETURN c_refcursor;
  END getHoldingAccounts;

  function saveCorporateTerminal(i_CORP_TERMINAL_ID NUMBER,
                                 i_corp_id          varchar2,
                                 i_merchant_id      VARCHAR2,
                                 i_terminal_id      VARCHAR2,
                                 i_outlet_name      VARCHAR2,
                                 i_CREATED_BY       INTEGER,
                                 i_LAST_MODOFIED_BY INTEGER,
                                 i_APPROVAL_BY      NUMBER,
                                 i_REQUEST_TYPE_ID  INTEGER,
                                 i_MENU_ID          INTEGER,
                                 p_context_url      varchar2,
                                 p_ip_mac_address   varchar2,
                                 p_session_id       varchar2) RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    SELECT CORPORATE_TERMINALS_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_TERMINALS_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CORPORATE_TERMINALS
        (CORP_TERMINAL_ID,
         corp_id,
         merchant_id,
         terminal_id,
         outlet_name,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         approved_date,
         approved_by,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- i_CHARGE_DISCOUNT_ID,
         i_corp_id,
         i_merchant_id,
         i_terminal_id,
         i_outlet_name,
         sysdate, --i_CREATED_DATE,
         i_CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         i_APPROVAL_BY,
         i_REQUEST_TYPE_ID);
    
    else
    
      v_recordid := i_CORP_TERMINAL_ID;
    
    END IF;
  
    INSERT INTO CORPORATE_TERMINALS_REQ
      (CORP_TERMINAL_ID,
       corp_id,
       merchant_id,
       terminal_id,
       outlet_name,
       CREATED_DATE,
       CREATED_BY,
       -- LAST_MODOFIED_BY, 
       -- LAST_MODIFIED_DATE, 
       RECORD_STATUS_ID,
       APPROVAL_STATUS_ID,
       APPROVED_DATE,
       APPROVED_BY,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_recordid, -- i_CHARGE_DISCOUNT_ID,
       i_corp_id,
       i_merchant_id,
       i_terminal_id,
       i_outlet_name,
       sysdate, --i_CREATED_DATE,
       i_CREATED_BY,
       --i_LAST_MODOFIED_BY,
       -- i_LAST_MODIFIED_DATE,
       v_recordstatus,
       v_approvalstatus,
       sysdate,
       i_APPROVAL_BY,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        i_corp_id,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CORPORATE-TERMINAL', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    RETURN v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveCorporateTerminal');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END saveCorporateTerminal;

  FUNCTION getCorporateTerminals(i_corpId varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN c_refcursor FOR
      select *
        from corporate_terminals a
       where a.corp_id = i_corpId
         and a.record_status_id in (1, 2);
    RETURN c_refcursor;
  END getCorporateTerminals;

  function getPosTerminalTransactions(p_corp_id     varchar2,
                                      p_terminal_id varchar2,
                                      p_start_date  date,
                                      p_end_date    date)
    return sys_refcursor is
    c_refcursor Sys_Refcursor;
  begin
    open c_refcursor for
      select a.transaction_id transaction_id,
             a.a041_card_acceptor_term_id terminal_id,
             a.auth_transaction_code,
             A.A012_LOCAL_TRANSACTION_TIME,
             b.transaction_timestamp transaction_date,
             A.A007_TRANSMISION_DATE_AND_TIME transaction_timestamp,
             A.A004_TRANSACTION_AMOUNT / 100 A004_TRANSACTION_AMOUNT,
             a.a011_system_trace_audit_number audit_number,
             a.accepting_institution,
             a.retrieval_reference_number retrieval_ref,
             a.card_acceptor_ident_code,
             a.a043_card_acc_nme_loc_8583 terminal_name,
             b.primary_account_number pan,
             
             (select ccy_code
                from CYTM_CCY_DEFN
               where iso_num_ccy_code = a.transaction_currency_code
                 and record_stat = 'O'
                 and auth_stat = 'A')
             
             currency_code,
             a.a059_echo_data_8583 narration,
             b.auth_response_code auth_response_code,
             b.fwd_institution_id_code,
             b.transaction_timestamp,
             b.transaction_amount amount,
             -- debit to card == credit to corporate
             case b.amount_signal
               when 'D' then
                'CR'
               else
                'DR'
             end cr_dr_flag
        from POS_FINANCIAL_FEED_REQUEST a, POS_FINANCIAL_FEED_RESPONSE b
       where a.clearing_period = b.clearing_period
         and a.transaction_id = b.transaction_id
         and a.feed_message_code in ('ISOREQST', 'ISOREPLY')
         and a.channel_message_code like '_2__'
         and b.feed_message_code in ('ISOREQST', 'ISOREPLY')
         and b.a041_card_acceptor_term_id in
             (select y.TERMINAL_ID
                from APPS.POS_MERCHANT_MASTER_DETAILS x,
                     APPS.POS_TERMINAL_MASTER_DETAILS y
               where x.MERCHANT_ID = y.MERCHANT_ID
                 and x.ACCOUNT_NUM in
                     (select z.account_number
                        from corporate_account z
                       where z.corp_id = p_corp_id)
                 and (nvl(p_terminal_id, '~') = '~' or
                     y.terminal_id = p_terminal_id))
            
            /*(select x.terminal_id
             from corporate_terminals x
            where x.corp_id = p_corp_id
                 -- fetch all terminal for corporate if terminal id is null,
                 -- otherwise fetch for the specified terminal id
              and (p_terminal_id is null or x.terminal_id = p_terminal_id))*/
      and trunc(b.transaction_timestamp)   between trunc(p_start_date) and
            --and A.A013_LOCAL_TRANSACTION_DATE between trunc(p_start_date) and
            trunc(p_end_date);
  
    return c_refcursor;
  end getPosTerminalTransactions;

  function getPosTransactionSummary(p_corp_id     varchar2,
                                    p_terminal_id varchar2,
                                    p_start_date  date,
                                    p_end_date    date) RETURN sys_refcursor IS
    c_refcursor Sys_Refcursor;
  
  BEGIN
  
    /* c_refcursor := getPosTerminalTransactions(
                                              
                                              p_corp_id,
                                              p_terminal_id,
                                              p_start_date,
                                              p_end_date);
    
    v_rowcount := c_refcursor%rowcount;
    close c_refcursor;
    return v_rowcount;*/
  
    open c_refcursor for
    
      select x.*,
             (select count(1)
                from APPS.POS_MERCHANT_MASTER_DETAILS x,
                     APPS.POS_TERMINAL_MASTER_DETAILS y
               where x.MERCHANT_ID = y.MERCHANT_ID
                 and x.ACCOUNT_NUM in
                     (select z.account_number
                        from corporate_account z
                       where z.corp_id = p_corp_id)
                 and (nvl(p_terminal_id, '~') = '~' or
                     y.terminal_id = p_terminal_id)) TerminalCount
        from (select sum(a.A004_TRANSACTION_AMOUNT / 100) TransactionAmount,
                     count(1) TransactionCount
              
                from POS_FINANCIAL_FEED_REQUEST  a,
                     POS_FINANCIAL_FEED_RESPONSE b
               where a.clearing_period = b.clearing_period
                 and a.transaction_id = b.transaction_id
                 and a.feed_message_code in ('ISOREQST', 'ISOREPLY')
                 and a.channel_message_code like '_2__'
                 and b.feed_message_code in ('ISOREQST', 'ISOREPLY')
                 and b.a041_card_acceptor_term_id in
                     (select y.TERMINAL_ID
                        from APPS.POS_MERCHANT_MASTER_DETAILS x,
                             APPS.POS_TERMINAL_MASTER_DETAILS y
                       where x.MERCHANT_ID = y.MERCHANT_ID
                         and x.ACCOUNT_NUM in
                             (select z.account_number
                                from corporate_account z
                               where z.corp_id = p_corp_id)
                         and (nvl(p_terminal_id, '~') = '~' or
                             y.terminal_id = p_terminal_id))
                 and trunc(b.transaction_timestamp) between
                     trunc(p_start_date) and
                    --and A.A013_LOCAL_TRANSACTION_DATE between trunc(p_start_date) and
                     trunc(p_end_date)) x;
  
    return c_refcursor;
  
  END getPosTransactionSummary;

  FUNCTION getPaymentChannels RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
    /*select a.channel_id id,
                                                                                                                                             a.name name,
                                                                                                                                             a.description description,
                                                                                                                                             '' miscString1,
                                                                                                                                             0 miscInt
                                                                                                                                        from ref_payment_channels a
                                                                                                                                       where a.display_for_ft = 'Y';*/
      select a.channel_id id,
             a.name name,
             a.description description,
             '' miscString1,
             0 miscInt
        from ref_payment_channels a
       where a.display_for_ft = 'Y'
         AND DEL_FLG = 'N';
    RETURN c_refcursor;
  END getPaymentChannels;

  FUNCTION getChargeOptions RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.charge_option_id id,
             a.name name,
             a.description description,
             '' miscString1,
             0 miscInt
        from ref_charge_options a;
    RETURN c_refcursor;
  END getChargeOptions;

  function generateSha512(p_plain_text in varchar2,
                          
                          p_salt in varchar2) return varchar2 as
  
    language java name 'Crypto.generateSHA512(      
          java.lang.String,java.lang.String) return String';

  function generatePassword return varchar2 as
  
    language java name 'Crypto.generatePassword() return String';

  FUNCTION loginuser(o_auth_response_message OUT varchar2,
                     o_send_sms              out varchar2,
                     o_segment               out varchar2,
                     p_corporate_id          varchar2,
                     p_username              IN VARCHAR2,
                     p_hashed_password       IN VARCHAR2,
                     p_ip_address            IN VARCHAR2
                     
                     ) RETURN VARCHAR2 IS
    v_err_message            VARCHAR2(3000);
    v_count                  INTEGER := 0;
    v_user_id_count          INTEGER := 0;
    v_response               VARCHAR2(100) := 'INVALID LOGON DETAILS SPECIFIED';
    v_auth_response_code     varchar2(2);
    v_acct                   varchar(20);
    v_pword_status           varchar2(50);
    v_sms_message            VARCHAR2(300);
    v_fail_count             INTEGER := 0;
    v_authentication_type    INTEGER := 0;
    v_seg                    VARCHAR2(50);
    v_cust                   VARCHAR2(10);
    v_corp_id                varchar2(50);
    r_user_profile           user_profile%rowtype;
    v_MAX_FAILED_PWD_ATTEMPT integer := 0;
  BEGIN
  
    select corp_id
      into v_corp_id
      from corporate_profile
     where corporate_id = p_corporate_id;
  
    SELECT *
      into r_user_profile
      FROM user_profile
     WHERE (username = p_username and corp_id = v_corp_id);
  
    SELECT COUNT(*)
      INTO v_fail_count
      FROM CIB_CUSTOMERS_SESS_LOGON_LOG
     WHERE ((username = p_username and corporate_id = p_corporate_id) or
           (username = p_username and user_id is null))
       AND logon_status = 'FAILED'
       AND TRUNC(logon_session_date) = TRUNC(SYSDATE)
          -- AND TRUNC (LOGON_SESSION_DATE) = '26-sep-2016'
       AND del_flg = 'N';
  
    SELECT a.p_value
      into v_MAX_FAILED_PWD_ATTEMPT
      FROM CIB_PROC_PROPERTIES a
     where a.p_key_name = 'P_MAX_FAILED_PWD_ATTEMPT';
  
    IF (v_fail_count >= v_MAX_FAILED_PWD_ATTEMPT) THEN
      v_response           := 'BLOCKED';
      v_auth_response_code := '63';
      UPDATE USER_PROFILE
         SET LOCKED_FLAG = 'BLOCKED',
             LOCKED_DATE = SYSDATE,
             LOCKED_BY   = '1'
       WHERE user_id = r_user_profile.user_id
         and LOCKED_FLAG NOT IN ('LOCKED', 'BLOCKED');
    
      COMMIT;
    ELSE
      SELECT COUNT(*)
        INTO v_count
        FROM user_profile
       WHERE (user_id = r_user_profile.user_id)
         AND (user_password = p_hashed_password)
            --and corp_id = v_corp_id
         and record_status_id = 2
         and approval_status_id = 2
         and locked_flag = 'OPEN';
      -- AND (userstatus = 'Authorised')
      --- AND (loginstatus <> 'disabled')
      -- AND (loginstatus <> 'deleted')
      --;
    
      IF v_count = 1 THEN
        SELECT NVL(MAX(account_number), 0)
          INTO v_acct
          FROM CORPORATE_ACCOUNT
         WHERE CORP_ID = r_user_profile.corp_id
           and account_number not in ('0039363315', '0039363346')
              -- AND accountcurrency = 'NGN'
           AND ROWNUM < 2;
      
        --To get customer id
        SELECT NVL(MAX(cust_no), 0)
          INTO v_cust
          FROM fcubslive.sttm_cust_account
         WHERE cust_ac_no = v_acct
           and auth_stat = 'A'
           and record_stat = 'O';
      
        --To get customer segment
        SELECT DECODE(MAX(cust_mis_2),
                      'REA_330',
                      'elite',
                      'RAP_360',
                      'elite',
                      'RHN_340',
                      'royalty',
                      'SME_400',
                      'sme',
                      'SME_410',
                      'sme',
                      'SME_430',
                      'sme',
                      'others')
          INTO v_seg
          FROM fcubslive.mitm_customer_default
         WHERE customer = v_cust;
      
        --IF r_user_profile.security_token_flag = 'Y'
        -- THEN
        /*SELECT NVL (accountnumber, 0)
             INTO v_acct
             FROM customer_accounts
            WHERE uids = v_uid AND accountcurrency = 'NGN' AND ROWNUM < 2;
           SELECT DECODE (cust_mis_2,
           'REA_330', 'elite',
           'RHN_340', 'gold',
        'SME_400', 'sme',
           'SME_410', 'sme',
           'SME_430', 'sme',
           'others')  into v_seg
            FROM fcubslive.mitm_customer_default mt,  fcubslive.sttm_cust_account sm
                WHERE sm.cust_no = mt.customer
                AND sm.cust_ac_no = v_acct ;*/
        IF v_acct <> '0' THEN
          SELECT REPLACE(p_value,
                         '#DATE#',
                         TO_CHAR(SYSDATE, 'DD MON YYYY HH12:MI:SS AM'))
            INTO v_sms_message
            FROM cib_proc_properties
           WHERE p_key_name = 'P_SUCCESS_LOGON_SMS_MESSAGE';
        
          -- send_sms(r_user_profile.mobile_phone_no, v_sms_message, v_acct);
        
          INSERT INTO EMAIL_SCHEDULES
            (CREATED_BY,
             SCHEDULE_ID,
             EMAIL_SUBJECT,
             CREATED_DATE,
             TO_ADDRESS,
             EMAIL_BODY)
          VALUES
            ('SYSTEM',
             EMAIL_SCHEDULES_SEQ.NEXTVAL,
             'Union360 Login Alert',
             sysdate,
             r_user_profile.email,
             v_sms_message);
        
        END IF;
        -- END IF;
      
        INSERT INTO cib_customers_sess_logon_log
          (username,
           logon_session_date,
           logon_status,
           ip_address,
           user_id,
           corp_id,
           corporate_id)
        VALUES
          (p_username,
           SYSDATE,
           'SUCCESS',
           p_ip_address,
           r_user_profile.user_id,
           r_user_profile.corp_id,
           p_corporate_id);
      
        -- AND (customerpassword = ppassword)
        --AND (userstatus = 'Authorised')
        -- AND (loginstatus <> 'disabled')
        -- AND (loginstatus <> 'deleted');
      
        /* SELECT COUNT (*)
         INTO v_authentication_type
         FROM customers_diaspora
        WHERE (LOWER (customernumber) = LOWER (puserid))
          AND activestatus = '1';*/
      
        --IF     TRIM (v_profile_status) = 'newuser'
        --  AND TRIM (r_user_profile.change_password) = 'Y'
        if TRIM(r_user_profile.change_password) = 'Y' THEN
          v_pword_status := 'NEW';
        ELSE
          v_pword_status := 'OLD';
        END IF;
      
        /* IF v_authentication_type >= 1
        THEN
           v_response := 'SUCCESS~SMS~' || v_pword_status || '~' || v_seg||'~'||v_corp_id;
        ELSE*/
      
        UPDATE USER_PROFILE
           SET last_logon_date = sysdate
         WHERE user_id = r_user_profile.user_id;
      
        v_response           := 'SUCCESS';
        v_auth_response_code := '00';
        o_send_sms           := 'NOSMS';
        o_segment            := v_seg;
      
        update CIB_CUSTOMERS_SESS_LOGON_LOG
           set del_flg = 'D'
         WHERE user_id = r_user_profile.user_id
           AND logon_status = 'FAILED'
           AND trunc(logon_session_date) = trunc(sysdate)
           AND del_flg = 'N';
        commit;
      
        /*END IF;*/
      ELSE
        --IF r_user_profile.security_token_flag = 'Y'
        --THEN
        SELECT NVL(MAX(account_number), 0)
          INTO v_acct
          FROM corporate_account
         WHERE corp_id = r_user_profile.corp_id
              -- AND accountcurrency = 'NGN' 
           AND ROWNUM < 2;
      
        IF v_acct <> '0' THEN
          SELECT REPLACE(p_value,
                         '#DATE#',
                         TO_CHAR(SYSDATE, 'DD MON YYYY HH12:MI:SS AM'))
            INTO v_sms_message
            FROM cib_proc_properties
           WHERE p_key_name = 'P_FAILURE_LOGON_SMS_MESSAGE';
        
          --send_sms(r_user_profile.mobile_phone_no, v_sms_message, v_acct);
          INSERT INTO EMAIL_SCHEDULES
            (CREATED_BY,
             SCHEDULE_ID,
             EMAIL_SUBJECT,
             CREATED_DATE,
             TO_ADDRESS,
             EMAIL_BODY)
          VALUES
            ('SYSTEM',
             EMAIL_SCHEDULES_SEQ.NEXTVAL,
             'Union360 Login Alert',
             sysdate,
             r_user_profile.email,
             v_sms_message);
        END IF;
      
        INSERT INTO cib_customers_sess_logon_log
          (username,
           logon_session_date,
           logon_status,
           ip_address,
           user_id,
           corp_id,
           corporate_id)
        VALUES
          (p_username,
           SYSDATE,
           'FAILED',
           p_ip_address,
           r_user_profile.user_id,
           v_corp_id,
           p_corporate_id);
      
        --v_response := 'INVALID LOGON DETAILS SPECIFIED';
        v_response           := 'FAILED';
        v_auth_response_code := '63';
        -- END IF;
      
        COMMIT;
      END IF;
    END IF;
    O_auth_response_message := v_response;
  
    RETURN v_auth_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      v_response           := 'FAILED';
      v_auth_response_code := '63';
      ROLLBACK;
      v_err_message := SQLERRM;
      INSERT INTO cib_customers_sess_logon_log
        (username,
         logon_session_date,
         logon_status,
         ip_address,
         user_id,
         corp_id,
         corporate_id)
      VALUES
        (p_username,
         SYSDATE,
         'FAILED',
         p_ip_address,
         r_user_profile.user_id,
         v_corp_id,
         p_corporate_id);
      commit;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'cib_ibank_sr_pkg.loginUser');
    
      --COMMIT;
      o_auth_response_message := v_response;
    
      RETURN v_auth_response_code;
  END;

  function changePassword(p_corporate_id      varchar2,
                          p_username          varchar2,
                          p_old_hash_password varchar2,
                          p_new_hash_password varchar2,
                          p_context_url       varchar2,
                          p_ip_mac_address    varchar2,
                          p_session_id        varchar2) return varchar2 as
    v_count       integer;
    v_response    varchar2(50);
    v_corp_id     varchar2(50);
    v_err_message varchar(500);
  begin
  
    select corp_id
      into v_corp_id
      from corporate_profile
     where corporate_id = p_corporate_id;
  
    SELECT COUNT(*)
      INTO v_count
      FROM user_profile
     WHERE (username = p_username)
       AND (user_password = p_old_hash_password)
       and corp_id = v_corp_id
       and record_status_id = 2
       and approval_status_id = 2
       and locked_flag = 'OPEN';
  
    if (v_count = 1) then
      update user_profile
         set user_password             = p_new_hash_password,
             change_password           = 'N',
             last_password_change_Date = sysdate
       where corp_id = v_corp_id
         and username = p_username
         and record_status_id = 2
         and approval_status_id = 2;
    
      v_response := '00';
    
    else
    
      v_response := '63';
    
    end if;
    createAuditLog(0,
                   p_session_id,
                   'CHANGE-PASSWORD', --event category
                   'username~' || p_username, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   1,
                   2,
                   v_response,
                   0);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      v_response := '96';
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'cib_ibank_sr_pkg.changePassword');
    
      --COMMIT;
      RETURN v_response;
  END;

  function resetPassword(p_corporate_id   varchar2,
                         p_username       varchar2,
                         p_context_url    varchar2,
                         p_ip_mac_address varchar2,
                         p_session_id     varchar2) return varchar2 as
    v_count        integer;
    v_response     varchar2(50);
    v_corp_id      varchar2(50);
    v_err_message  varchar(500);
    v_plain_pwd    varchar(500);
    v_hashed_pwd   varchar(1000);
    r_user_profile user_profile%rowtype;
  begin
  
    select corp_id
      into v_corp_id
      from corporate_profile
     where corporate_id = p_corporate_id;
  
    begin
      SELECT *
        into r_user_profile
        FROM user_profile
       WHERE (username = p_username)
            -- AND (user_password = p_old_hash_password)
         and corp_id = v_corp_id
         and record_status_id in (2, 5)
         and approval_status_id = 2;
      v_count := 1;
    exception
      when no_data_found then
        v_count := 0;
    end;
    if (v_count = 1) then
    
      v_plain_pwd := generatePassword;
    
      --insert into idvalid values (p_username, v_plain_pwd);
    
      v_hashed_pwd := generateSha512(v_plain_pwd, lower(p_username));
    
      update user_profile
         set user_password             = v_hashed_pwd,
             change_password           = 'Y',
             LOCKED_FLAG               = 'OPEN',
             LOCKED_DATE               = SYSDATE,
             LOCKED_BY                 = 1,
             last_password_change_Date = sysdate
       where corp_id = v_corp_id
         and username = p_username
         and record_status_id in (2, 5)
         and approval_status_id = 2;
    
      sendPwd2User(r_user_profile.first_name,
                   r_user_profile.mobile_phone_no,
                   v_plain_pwd,
                   getCorporateDefaultAccount(r_user_profile.corp_id),
                   r_user_profile.user_id,
                   'Y');
      --sendPwd2User('Hello','08032227456',v_plain_pwd,0);
    
      v_response := '00';
      commit;
    else
    
      v_response := '63';
    
    end if;
    createAuditLog(0,
                   p_session_id,
                   'RESET-PASSWORD', --event category
                   'username~' || p_username, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   0,
                   2,
                   v_response,
                   0);
    return v_response;
  
  EXCEPTION
    WHEN OTHERS THEN
      v_response := 'FAILED';
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'cib_ibank_sr_pkg.resetPassword');
    
      --COMMIT;
      RETURN v_response;
  END;

  function getCorporateProfileByAcctNo(p_account_number varchar2)
    return sys_refcursor as
    c_refcursor sys_refcursor;
  begin
    open c_refcursor for
      select *
        from corporate_profile a
       where exists (select 1
                from corporate_account b
               where a.corp_id = b.corp_id
                 and b.account_number = p_account_number
                 and b.record_status_id in (1, 2))
         and a.record_status_id in (1, 2);
  
    return c_refcursor;
  end getCorporateProfileByAcctNo;

  function getNextApprovalLevel(p_approval_route_id varchar2) return number as
    v_signatories_count      number;
    v_current_approval_level number;
    v_total_signatories      number;
  begin
  
    select sum(a.no_of_signatories_for_level), max(a.approval_level)
      into v_signatories_count, v_current_approval_level
      from approval_route_signatories a
     where a.routeid = p_approval_route_id;
  
    select a.NO_OF_SIGNATORIES
      into v_total_signatories
      from approval_route a
     where a.approval_route_id = p_approval_route_id;
  
    if coalesce(v_total_signatories, 0) > coalesce(v_signatories_count, 0) then
      return coalesce(v_current_approval_level, 0) + 1;
    else
      return - 1;
    end if;
  
  end getNextApprovalLevel;

  FUNCTION getAccountRights RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.account_right_id id,
             a.name name,
             a.name description,
             '' miscString1,
             0 miscInt
        from ref_account_rights a;
  
    RETURN c_refcursor;
  END getAccountRights;

  function getUserProfileById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
    --#spring2
    --added corporate_id
      select a.*,
             b.corporate_id,
             b.NAME,
             --multiple
             b.posting_option_id,
             c.name posting_option_desc
        from user_profile a, corporate_profile b, ref_posting_options c
       where a.corp_id = b.corp_id
         and a.user_id = p_id
         and nvl(b.posting_option_id, 2) = c.posting_option_id
         and a.record_status_id in (1, 2);
    return c_result;
  
  end;

  function getCorporateProfileById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from corporate_profile a
       where a.corp_id = p_id
         and a.record_status_id in (1, 2);
  
    return c_result;
  
  end;

  function getApprovalRouteSignatoryById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.*, b.route_name, b.corp_id
        from approval_route_signatories a, approval_route b
       where a.route_signatory_id = p_id
         and a.routeid = b.approval_route_id
         and a.record_status_id in (1, 2);
    return c_result;
  
  end;

  function getApprovalRouteById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from approval_route a
       where a.approval_route_id = p_id
         and a.record_status_id in (1, 2);
    return c_result;
  
  end;

  function getApprovalSignByRouteId(p_corp_id  varchar2,
                                    p_route_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.*, b.route_name, b.corp_id
        from approval_route_signatories a, approval_route b
       where a.routeid = b.approval_route_id
         and b.corp_id = p_corp_id
         and b.approval_route_id = p_route_id
         and a.record_status_id in (1, 2);
    return c_result;
  
  end;

  function getUserAccountAccessById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from user_account_access a
       where a.account_access_id = p_id
         and a.record_status_id in (1, 2);
    return c_result;
  
  end;

  function getRoleById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from roles a
       where a.role_id = p_id
         and a.record_status_id in (1, 2);
  
    return c_result;
  end;

  function getApprovalGroupById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from approval_groups a
       where a.group_id = p_id
         and a.record_status_id in (1, 2);
    return c_result;
  
  end;

  function getApprovalGroupUsersByGroupId(pGroupId varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.*,
             b.name GroupDesc,
             c.first_name || ' ' || c.last_name UsernameDesc,
             d.name DeptDesc
        from approval_groups_users a,
             approval_groups       b,
             user_profile          c,
             departments           d
       where a.approval_group_id = b.group_id
         and a.approval_group_id = pGroupId
         and a.user_id = c.user_id(+)
         and a.dept_id = d.dept_id(+)
         and a.record_status_id in (1, 2);
    return c_result;
  end;

  function getApprovalGroupUserById(p_Id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.*,
             b.name GroupDesc,
             c.first_name || ' ' || c.last_name UsernameDesc,
             d.name DeptDesc
        from approval_groups_users a,
             approval_groups       b,
             user_profile          c,
             departments           d
       where a.approval_group_id = b.group_id
         and a.approval_groups_users_id = p_Id
         and a.user_id = c.user_id(+)
         and a.dept_id = c.dept_id(+)
         and a.record_status_id in (1, 2);
    return c_result;
  end;

  function getCorporateTerminalById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from corporate_terminals a
       where a.corp_terminal_id = p_id
         and a.record_status_id in (1, 2);
    return c_result;
  
  end;

  function getHoldingAccountById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
    
      select *
        from holding_accounts a
       where a.holding_account_id = p_id
         and a.record_status_id in (1, 2);
    return c_result;
  
  end;

  function getDepartmentById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from departments a
       where a.dept_id = p_id
         and a.record_status_id in (1, 2);
    return c_result;
  end;

  function getLoanSchedules(p_loan_account_number varchar2)
    return sys_refcursor as
  begin
  
    return pkg_loan_schedule_util.get_loan_schedule_list(p_loan_account_number);
  
  end;

  function getLoanDetails(p_loan_account_number varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      SELECT a.account_number AS account_no,
             a.dr_prod_ac target_account_no,
             a.dr_prod_ac source_account_no,
             a.branch_code branch_code,
             a.primary_applicant_name AS customer_name,
             t4.product_code AS prod_code,
             t4.product_description AS prod_name,
             t3.resolved_value AS eff_rate,
             a.amount_disbursed AS principal,
             t1.balance AS balance,
             a.maturity_date mat_date,
             a.book_date eff_date,
             a.currency currency,
             a.value_date,
             0 rollover_count,
             pkg_loan_schedule_util.remaining_installments(a.account_number) unpaid_installments,
             pkg_loan_schedule_util.installment_paid(a.account_number) paid_installments,
             pkg_loan_schedule_util.loan_tenor(a.account_number) tenor
        FROM cltb_account_apps_master a,
             (SELECT account_number,
                     SUM(amount_due) - SUM(amount_settled) AS balance
                FROM fcubslive.cltb_account_schedules
               WHERE component_name = 'PRINCIPAL'
               GROUP BY account_number) t1,
             cstm_product t4,
             (SELECT DISTINCT account_number, resolved_value
                FROM fcubslive.cltb_account_ude_values
               WHERE ude_id = 'INTEREST_RATE') t3
       WHERE a.account_number = t1.account_number
         AND t3.account_number = a.account_number
         AND t4.product_code = a.product_code
         and a.account_number = p_loan_account_number
         AND a.account_status = 'A';
  
    return c_result;
  end;

  function getLoanSummary(p_corp_id IN VARCHAR2) return sys_refcursor AS
    c_result sys_refcursor;
  
  BEGIN
  
    OPEN c_result FOR
      SELECT a.account_number         AS account_no,
             a.dr_prod_ac             casa,
             a.branch_code            brncode,
             a.primary_applicant_name AS NAME,
             t4.product_code          AS prod_code,
             t4.product_description   AS prod_name,
             t3.resolved_value        AS eff_rate,
             a.amount_disbursed       AS principal,
             t1.balance               AS balance,
             a.maturity_date          mat_date,
             t4.product_description   description,
             a.currency
        FROM cltb_account_apps_master a,
             (SELECT account_number,
                     SUM(amount_due) - SUM(amount_settled) AS balance
                FROM fcubslive.cltb_account_schedules
               WHERE component_name = 'PRINCIPAL'
               GROUP BY account_number) t1,
             cstm_product t4,
             (SELECT DISTINCT account_number, resolved_value
                FROM fcubslive.cltb_account_ude_values
               WHERE ude_id = 'INTEREST_RATE') t3
       WHERE a.account_number = t1.account_number
         AND t3.account_number = a.account_number
         AND t4.product_code = a.product_code
         AND a.customer_id in
             (select cust_no
                from sttm_cust_account
               where auth_stat = 'A'
                 and record_stat = 'O'
                 and cust_ac_no in
                     (select x.account_number
                        from corporate_account x
                       where x.corp_id = p_corp_id))
         AND a.account_status = 'A';
        -- and a.maturity_date >= trunc(sysdate);  uncomment for the deployment to live
  
    return c_result;
  END getLoanSummary;

  function getInvestmentSummary(p_corp_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    open c_result for
      SELECT a.contract_ref_no account_no,
             (SELECT principal_outstanding_bal
                FROM fcubslive.ldtb_contract_balance bb
               WHERE bb.contract_ref_no = a.contract_ref_no) principal,
             (SELECT principal_outstanding_bal
                FROM fcubslive.ldtb_contract_balance bb
               WHERE bb.contract_ref_no = a.contract_ref_no) AS balance,
             a.remarks description,
             a.maturity_date mat_date,
             a.currency
      
        FROM ldtb_contract_master a
       WHERE contract_status = 'A'
         AND counterparty in
             (select cust_no
                from sttm_cust_account
               where auth_stat = 'A'
                 and record_stat = 'O'
                 and cust_ac_no in
                     (select x.account_number
                        from corporate_account x
                       where x.corp_id = p_corp_id))
         and a.maturity_date >= trunc(sysdate)
         AND a.event_seq_no =
             (SELECT MAX(event_seq_no)
                FROM ldtb_contract_master tt
               WHERE a.contract_ref_no = tt.contract_ref_no);
  
    return c_result;
  end;

  function getInvestmentDetails(p_contract_number varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  
  BEGIN
    OPEN c_result FOR
      SELECT a.contract_ref_no account_no,
             a.version_no,
             a.event_seq_no,
             a.branch,
             a.product prod_code,
             e.product_description prod_name,
             a.module,
             a.payment_method,
             a.rollover_allowed,
             a.user_ref_no,
             a.counterparty,
             a.currency currency,
             (SELECT principal_outstanding_bal
                FROM fcubslive.ldtb_contract_balance bb
               WHERE bb.contract_ref_no = a.contract_ref_no) principal,
             (SELECT principal_outstanding_bal
                FROM fcubslive.ldtb_contract_balance bb
               WHERE bb.contract_ref_no = a.contract_ref_no) AS lcy_amount,
             a.original_start_date,
             a.booking_date eff_date,
             a.value_date,
             a.maturity_type,
             a.maturity_date mat_date,
             a.remarks,
             a.main_comp,
             a.main_comp_rate eff_rate,
             --a.dflt_settle_ac,
             a.dflt_settle_ac_branch,
             a.iccf_status,
             a.settlement_status,
             a.tax_status,
             a.brokerage_status,
             a.tenor || ' Days' tenor,
             a.rollover_count,
             a.user_defined_status,
             a.contract_status,
             d.contract_status,
             a.job_picked_up,
             a.loan_stmt_type,
             a.annuity_loan,
             a.int_period_basis,
             a.rollover_mechanism,
             a.rollover_method,
             (SELECT (SELECT NVL(SUM(bb.lcy_amount), 0.00) accrued_interest
                        FROM actb_daily_log bb
                       WHERE a.contract_ref_no = bb.trn_ref_no
                         AND bb.drcr_ind = 'C'
                         AND bb.event = 'ACCR'
                         AND bb.trn_dt <= TRUNC(SYSDATE)) +
                     (SELECT NVL(SUM(kk.lcy_amount), 0.00) accrued_interest
                        FROM actb_history kk
                       WHERE a.contract_ref_no = kk.trn_ref_no
                         AND kk.drcr_ind = 'C'
                         AND kk.event = 'ACCR'
                         AND kk.trn_dt <= TRUNC(SYSDATE))
                FROM DUAL) accrued_interest,
             c.customer_name1 customer_name,
             a.dflt_settle_ac target_account_no,
             a.dr_setl_ac source_account_no
        FROM ldtb_contract_master a,
             sttm_customer        c,
             cstb_contract        d,
             cstm_product         e
      -- WHERE     dflt_settle_ac = accountnumber
       WHERE a.contract_ref_no = p_contract_number
         AND a.contract_ref_no = d.contract_ref_no
         AND c.customer_no = d.counterparty
         AND a.counterparty = c.customer_no
         and a.product = e.product_code
         AND d.contract_status = 'A'
         and c.auth_stat = 'A'
         and c.record_stat = 'O'
         AND d.product_type = 'D'
         AND a.event_seq_no =
             (SELECT MAX(event_seq_no)
                FROM ldtb_contract_master tt
               WHERE a.contract_ref_no = tt.contract_ref_no);
    return c_result;
  
  END;

  function saveBeneficiary(i_BENEFICIARY_ID              INTEGER,
                           i_CORP_ID                     INTEGER,
                           i_PREFERRED_NAME              varchar2,
                           i_BENEFICIARY_CODE            varchar2,
                           i_BENEFICIARY_CATEGORY        varchar2,
                           i_product_category            varchar2,
                           i_DESTINATION_BANK_CODE       varchar2,
                           i_ACCOUNT_NAME                varchar2,
                           i_ACCTNO_PHONE_RSA_TAX_TIN_ID varchar2,
                           i_batch_id                    varchar2,
                           i_isaccount_valid             varchar2,
                           i_BENEFICIARY_EMAIL           VARCHAR2,
                           i_CREATED_BY                  INTEGER,
                           i_LAST_MODOFIED_BY            INTEGER,
                           i_APPROVAL_BY                 NUMBER,
                           i_REQUEST_TYPE_ID             INTEGER,
                           i_MENU_ID                     INTEGER,
                           p_context_url                 varchar2,
                           p_ip_mac_address              varchar2,
                           p_session_id                  varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_batch_id       number;
  BEGIN
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_batch_id FROM DUAL;
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_BENEFICIARIES_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CORPORATE_BENEFICIARIES
        (BENEFICIARY_ID,
         CORP_ID,
         PREFERRED_NAME,
         BENEFICIARY_CODE,
         BENEFICIARY_CATEGORY,
         product_category,
         DESTINATION_BANK_CODE,
         ACCOUNT_NAME,
         ACCTNO_PHONENO_RSA_TAX_TIN_ID,
         batch_id,
         isaccount_valid,
         BENEFICIARY_EMAIL,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVED_DATE,
         APPROVED_BY,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- i_CHARGE_DISCOUNT_ID,
         
         i_CORP_ID,
         i_PREFERRED_NAME,
         i_BENEFICIARY_CODE,
         i_BENEFICIARY_CATEGORY,
         i_product_category,
         i_DESTINATION_BANK_CODE,
         i_ACCOUNT_NAME,
         i_ACCTNO_PHONE_RSA_TAX_TIN_ID,
         v_batch_id,
         i_isaccount_valid,
         i_BENEFICIARY_EMAIL,
         sysdate, --i_CREATED_DATE,
         i_CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         i_APPROVAL_BY,
         i_REQUEST_TYPE_ID);
    
    else
    
      v_recordid := i_BENEFICIARY_ID;
    
    END IF;
  
    INSERT INTO CORPORATE_BENEFICIARIES_REQ
      (BENEFICIARY_ID_REQ,
       BENEFICIARY_ID,
       CORP_ID,
       PREFERRED_NAME,
       BENEFICIARY_CODE,
       BENEFICIARY_CATEGORY,
       product_category,
       DESTINATION_BANK_CODE,
       ACCOUNT_NAME,
       ACCTNO_PHONENO_RSA_TAX_TIN_ID,
       batch_id,
       isaccount_valid,
       BENEFICIARY_EMAIL,
       CREATED_DATE,
       CREATED_BY,
       -- LAST_MODOFIED_BY, 
       -- LAST_MODIFIED_DATE, 
       RECORD_STATUS_ID,
       APPROVAL_STATUS_ID,
       APPROVED_DATE,
       APPROVED_BY,
       REQUEST_TYPE_ID,
       PARENT_TABLE_ID)
    VALUES
      (v_requestid,
       v_recordid, -- i_CHARGE_DISCOUNT_ID,
       
       i_CORP_ID,
       i_PREFERRED_NAME,
       i_BENEFICIARY_CODE,
       i_BENEFICIARY_CATEGORY,
       i_product_category,
       i_DESTINATION_BANK_CODE,
       i_ACCOUNT_NAME,
       i_ACCTNO_PHONE_RSA_TAX_TIN_ID,
       v_batch_id,
       i_isaccount_valid,
       i_BENEFICIARY_EMAIL,
       sysdate, --i_CREATED_DATE,
       i_CREATED_BY,
       --i_LAST_MODOFIED_BY,
       -- i_LAST_MODIFIED_DATE,
       v_recordstatus,
       v_approvalstatus,
       sysdate,
       i_APPROVAL_BY,
       i_REQUEST_TYPE_ID,
       v_recordid);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_batch_id,
                                                        0,
                                                        i_CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'BENEFICIARY', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveBeneficiary');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END saveBeneficiary;

  function getCorporateBeneByCorpId(p_corp_id              varchar2,
                                    p_beneficiary_category varchar2,
                                    p_product_category     varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
      
        from Corporate_Beneficiaries a
       where a.corp_id = p_corp_id
         and a.beneficiary_category = p_beneficiary_category
         and (p_product_category is null or
             a.product_category = p_product_category)
         and a.record_status_id in (1, 2);
    return c_result;
  end;

  function getCorporateBeneByCorpIdHtml(p_corp_id              varchar2,
                                        p_beneficiary_category varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.beneficiary_id                ID,
             a.preferred_name                Alias,
             a.beneficiary_code,
             a.beneficiary_email             Email,
             a.account_name                  Acct_Name,
             a.acctno_phoneno_rsa_tax_tin_id Target_ID
      
        from Corporate_Beneficiaries a
       where a.corp_id = p_corp_id
            --and a.beneficiary_category = p_beneficiary_category
         and a.record_status_id in (1, 2);
    return c_result;
  end;

  function getCorporateBeneById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from Corporate_Beneficiaries a
       where a.beneficiary_id = p_id
         and a.record_status_id in (1, 2);
    return c_result;
  end;

  FUNCTION getAccountListByUserId(p_user_id  IN VARCHAR2,
                                  p_ccy_flag varchar2) RETURN sys_refcursor IS
    v_hasglobalacctaccess VARCHAR2(100);
    o_refcursor           sys_refcursor;
  BEGIN
    select HAS_GLOBAL_ACCT_ACCESS
      into v_hasglobalacctaccess
      from USER_PROFILE
     where USER_ID = p_user_id;
  
    if (v_hasglobalacctaccess = 'Y') THEN
      OPEN o_refcursor FOR
        SELECT d.email customeremail,
               d.mobile_phone_no mobilenumber,
               d.first_name firstname,
               d.last_name lastname,
               d.username username,
               c.account_number accountnumber,
               C.record_status_id accountstatus,
               D.APPROVAL_LIMIT transferlimit,
               b.ccy accountcurrency,
               b.ac_desc accountname,
               'TRANSFER' accright,
               cheque_book_facility,
               'Y' view_balance,
               b.ac_open_date
          FROM corporate_account c,
               --user_account_access a,
               sttm_cust_account b,
               user_profile      d
         WHERE d.user_id = p_user_id
              --AND a.corp_acct_id = c.corp_acct_id
           and d.has_global_acct_access = 'Y'
           AND c.account_number = b.cust_ac_no
           and c.corp_id = d.corp_id
              --- #status added by oawe 29/03/2016 to ensure only whitelist status is tested
              --- and fcubs status is also considered
              --and a.record_status_id in (1, 2)
           and c.record_status_id in (1, 2)
           and b.auth_stat = 'A'
           and b.record_stat = 'O'
           and (p_ccy_flag is null or b.ccy = p_ccy_flag or
               (p_ccy_flag = 'DOM' AND b.ccy <> 'NGN'))
              -- exempt credit card account class
           AND B.ACCOUNT_CLASS not in ('CA_033')
              --- end #status
              -- AND a.accountstatus NOT IN
              --    ('deleted', 'disabled', 'Disabled', 'DELETED', 'DISABLED')
           AND c.approval_status_id IN (1, 2)
         order by b.ac_open_date ASC;
      RETURN o_refcursor;
    ELSE
      OPEN o_refcursor FOR
        SELECT d.email              customeremail,
               d.mobile_phone_no    mobilenumber,
               d.first_name         firstname,
               d.last_name          lastname,
               d.username           username,
               c.account_number     accountnumber,
               a.record_status_id   accountstatus,
               a.transfer_limit     transferlimit,
               b.ccy                accountcurrency,
               b.ac_desc            accountname,
               a.account_rights     accright,
               cheque_book_facility,
               view_balance,
               b.ac_open_date
          FROM corporate_account   c,
               user_account_access a,
               sttm_cust_account   b,
               user_profile        d
         WHERE a.user_id = p_user_id
           AND a.corp_acct_id = c.corp_acct_id
           AND c.account_number = b.cust_ac_no
           and d.user_id = a.user_id
           and (b.ccy = p_ccy_flag or
               (p_ccy_flag = 'DOM' AND b.ccy <> 'NGN'))
              --- #status added by oawe 29/03/2016 to ensure only whitelist status is tested
              --- and fcubs status is also considered
           and a.record_status_id in (1, 2)
           and c.record_status_id in (1, 2)
           and b.auth_stat = 'A'
           and b.record_stat = 'O'
              
              -- exempt credit card account class
           AND B.ACCOUNT_CLASS not in ('CA_033')
              --- end #status
              -- AND a.accountstatus NOT IN
              --    ('deleted', 'disabled', 'Disabled', 'DELETED', 'DISABLED')
           AND c.approval_status_id IN (1, 2)
         order by b.ac_open_date ASC;
      RETURN o_refcursor;
    END IF;
  
    -- ) x
    --order by x.ac_open_date;
  
  END getAccountListByUserId;

  FUNCTION getAccountListByUserId(p_user_id IN VARCHAR2) RETURN sys_refcursor as
    c_result Sys_Refcursor;
  begin
  
    c_result := getAccountListByUserId(p_user_id, 'NGN');
  
    return c_result;
  
  end;

  FUNCTION getDomAccountListByUserId(p_user_id IN VARCHAR2)
    RETURN sys_refcursor as
    c_result Sys_Refcursor;
  begin
  
    c_result := getAccountListByUserId(p_user_id, 'DOM');
  
    return c_result;
  
  end;

  function getApprovedTransByStatus(p_batch_id    varchar2,
                                    p_status_flag varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    open c_result for
      select
      
       CR_ACCOUNT_NO Beneficiary_Account,
       a.beneficiary_name Beneficiary_Name,
       c.dr_account_currency_code Currency,
       nvl(bnk_name, BANK_CODE) Destination_Bank,
       AMOUNT,
       NARRATION Transaction_Description,
       CHARGE_AMOUNT Charges,
       formatDateTime(POSTED_DATE) Posted_Date,
       
       case
         when a.BILLER_RECHARGE_PIN is not null then
          '<span style="font-weight:bold;color:green">' ||
          BILLER_RECHARGE_PIN || '</span>'
         else
          ''
       end Recharge_Pin,
       b.statusdescription Processing_Status,
       a.FAILURE_REASON Failure_Reason,
       case a.PROCESSING_STATUS
         when '00' then
          '<a href="/sec/printReceipt?id=' || a.batch_detail_id ||
         -- '<a href="/sec/printReceipt?id='||'CIB8A6D90D69C672157E0540208200B5AE0'||
          '">Download</a>'
       
         else
          ''
       end Receipt, --ui,
       case a.CUSTOM_RECEIPT_GENERATED
         when 'Y' then
         --'<a href="/sec/printCustomReceipt?id='||'CIB8A6D90D69C672157E0540208200B5AE0'||
          '<a href="/sec/printCustomReceipt?id=' || a.POST_REF_NO ||
          '&path=' || replace(a.CUSTOM_RECEIPT_URL, '&', '~~') ||
          '">Download Custom Receipt</a>'
       
         else
          ''
       
       end Custom_Receipt,
       case a.ENABLE_COLLECTION_REPORT
         when 'Y' then
         --'<a href="/sec/printCustomReceipt?id='||'CIB8A6D90D69C672157E0540208200B5AE0'||
          '<a href="/CorpBanking/sec/printCollectionReceipt?id=' || a.POST_REF_NO ||
          '">Download Collection Receipt</a>'
       
         else
          ''
       
       end Collection_Receipt
      
        from transaction_batch_summary c,
             TRANSACTION_BATCH_DETAIL  a,
             ref_processingstatus      b,
             /*( select bnk_code, bnk_name from 
             ribank.RIB_BANKS_LIST 
             where length(bnk_code)=3
             union all
              select nibsscode, bnk_name from 
             ribank.RIB_BANKS_LIST) k*/
             newibank.RIB_BANKS_LIST k
       where a.batch_id = c.batch_id
         and a.processing_status = b.statuscode
         and a.batch_id = p_batch_id
         and a.bank_code = k.nibsscode(+)
         and (p_status_flag is null or
             ((a.processing_status = '00' and p_status_flag = 'SUCCESS') or
             (a.processing_status = '07' and p_status_flag = 'FAILED') or
             (coalesce(a.processing_status, '') not in ('00', '07') and
             p_status_flag = 'PENDING')));
  
    return c_result;
  end;

  function getTransactionsByBatchId(p_batch_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.*, b.bnk_name bank_name
        from transaction_batch_detail a, RIB_BANKS_LIST b
       where a.bank_code = b.nibsscode(+)
         and a.batch_id = p_batch_id;
    return c_result;
  
  end getTransactionsByBatchId;

  function getTransactionsByUserId(p_user_id    varchar2,
                                   p_start_date date,
                                   p_end_date   date) return sys_refcursor as
    c_result sys_refcursor;
    v_corpid Integer;
  begin
    select corp_id
      into v_corpid
      from USER_PROFILE
     where user_id = p_user_id;
    open c_result for
      select a.batch_id,
             a.batch_description,
             a.schedule_date,
             a.created_date,
             a.total_tran_amount,
             a.total_charge_amt,
             a.TOTAL_TRAN_AMT_SUCCESSFUL,
             a.total_charge_amt_successful,
             a.total_tran_amt_failed,
             a.total_charge_amt_failed,
             a.total_tran_amt_unknown_status,
             a.total_charge_unknown_status,
             a.reversed_total_amount,
             a.reversed_total_charge,
             a.dr_account,
             b.statusdescription,
             a.no_of_record                  ALL_ITEMS,
             a.no_of_records_successful      SUCCESS_ITEMS,
             a.failure_count                 FAILED_ITEMS,
             a.no_of_records_unknown_status  UNDECIDED_ITEMS,
             
             a.no_of_record - a.no_of_records_successful - a.failure_count -
             a.no_of_records_unknown_status PENDING_ITEMS,
             '<a href ="javascript:void(0)" class="quick-view-btn" data-id="' ||
              a.batch_id || '" id ="btn' || a.batch_id ||
              '"> View Details</a>
                                                    <img id="quikloadeux' ||
              a.batch_id ||
             --ui changed menu to detail
              '" src="${pageContext.request.contextPath}/img/loader.gif" style="display:none;position:relative;width:30px;height:30px"/>' Detail
        from TRANSACTION_BATCH_SUMMARY a, ref_processingstatus b
       where a.processing_status = b.statuscode
         and a.corp_id = v_corpid
            -- and a.created_by = p_user_id
         and trunc(a.created_date) between trunc(p_start_date) and
             trunc(p_end_date)
       order by a.created_date desc;
    return c_result;
  
  end getTransactionsByUserId;

  function getWeeklyInOutFlowGraph(p_corp_id varchar2) return Sys_Refcursor as
    c_result Sys_Refcursor;
  begin
  
    open c_result for
      select label_id,
             nvl(y.amount, 0) value1,
             nvl(z.amount, 0) value2,
             0 value3
        from dashboard_labels x
        left join (select to_char(trn_dt, 'D') dt, sum(lcy_amount) amount
                     from acvw_all_ac_entries x
                    where ac_no in (select y.account_number
                                      from corporate_account y
                                     where corp_id = p_corp_id)
                      and drcr_ind = 'C'
                   --and trn_dt between trunc(sysdate)-7 and trunc(sysdate);
                    group by to_char(trn_dt, 'D')) y
          on upper(x.Order_Id) = upper(y.dt)
        left join (select to_char(trn_dt, 'D') dt, sum(lcy_amount) amount
                     from acvw_all_ac_entries x
                    where ac_no in (select y.account_number
                                      from corporate_account y
                                     where corp_id = p_corp_id)
                      and drcr_ind = 'D'
                   --and trn_dt between trunc(sysdate)-7 and trunc(sysdate);
                    group by to_char(trn_dt, 'D')) z
          on upper(x.Order_Id) = upper(z.dt)
       where /*x.order_id <=
                                                                                                                                                                                                                   (select order_id
                                                                                                                                                                                                                      from dashboard_labels m
                                                                                                                                                                                                                     where upper(m.label_id) = to_char(sysdate, 'MON'))
                                                                                                                                                                                                               and */
       x.label_type = 'WEEK'
       order by order_id;
  
    return c_result;
  
  end;

  --iu
  function getMonthlyInOutFlowGraph(p_corp_id varchar2) return Sys_Refcursor as
    c_result Sys_Refcursor;
  begin
  
    open c_result for
      select label_id,
             nvl(y.amount, 0) value1,
             nvl(z.amount, 0) value2,
             0 value3
        from dashboard_labels x
        left join (select to_char(trn_dt, 'DD') dt, sum(lcy_amount) amount
                     from acvw_all_ac_entries x
                    where ac_no in (select y.account_number
                                      from corporate_account y
                                     where corp_id = p_corp_id)
                      and drcr_ind = 'C'
                   --and trn_dt between trunc(sysdate)-7 and trunc(sysdate);
                    group by to_char(trn_dt, 'DD')) y
          on upper(x.Label_Id) = upper(y.dt)
        left join (select to_char(trn_dt, 'DD') dt, sum(lcy_amount) amount
                     from acvw_all_ac_entries x
                    where ac_no in (select y.account_number
                                      from corporate_account y
                                     where corp_id = p_corp_id)
                      and drcr_ind = 'D'
                   --and trn_dt between trunc(sysdate)-7 and trunc(sysdate);
                    group by to_char(trn_dt, 'DD')) z
          on upper(x.Label_Id) = upper(z.dt)
       where /*x.order_id <=
                                                                                                                                                                                                                   (select order_id
                                                                                                                                                                                                                      from dashboard_labels m
                                                                                                                                                                                                                     where upper(m.label_id) = to_char(sysdate, 'MON'))
                                                                                                                                                                                                               and */
       x.label_type = 'DAY'
       order by order_id;
  
    return c_result;
  
  end;

  function getCorporateRmDetail(p_corp_id varchar) return sys_refcursor is
    o_refcursor               sys_refcursor;
    v_corp_default_account_no varchar2(20) := getCorporateDefaultAccount(p_corp_id);
  begin
    open o_refcursor for
      select em.FIRST_NAME || ' ' || em.LAST_NAME rm_name,
             em.MOBILE,
             em.EMAIL,
             em.BRANCH_NAME,
             em.BRANCH_CODE
        from mitm_customer_default          mit,
             gltm_mis_code                  glt,
             sttm_cust_account              stt,
             fcubslive.ubn_employee_details em
       where mit.cust_mis_4 = glt.mis_code
         and stt.cust_no = mit.customer
         and glt.mis_class = 'RM_CODE'
         and CUST_AC_NO = v_corp_default_account_no
         and mit.cust_mis_4 = em.EMP_NUMBER;
    return o_refcursor;
  end getCorporateRmDetail;

  FUNCTION updateProcessedUploadsSummary(p_THREAD_id IN VARCHAR2)
    RETURN VARCHAR2 IS
    v_batchid               VARCHAR2(200);
    v_processingstatus      VARCHAR2(100);
    v_pendingcount          INTEGER;
    v_trancount             INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_totalamt              NUMBER(18, 2);
    v_totalcharge           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_failurecount          INTEGER;
    v_processedcount        INTEGER;
    v_noofrecords           INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
  
    v_email_template varchar2(1000);
    --v_batchid            varchar2(200);
    v_fname              varchar2(200);
    v_user_email_address varchar2(100);
    v_payment_type       varchar2(200);
    --v_noofrecords varchar2(100);
    v_amount                  varchar2(100);
    v_tranremarks             varchar2(500);
    v_corporate_email_address varchar2(200);
    v_app_url                 varchar2(300);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
  BEGIN
    SET TRANSACTION READ WRITE;
    v_reversalamt := 0.0;
  
    FOR item IN (SELECT a.batch_id,
                        a.posting_option_id,
                        a.CREATED_BY,
                        a.TOTAL_TRAN_AMOUNT,
                        a.BATCH_DESCRIPTION
                   FROM TRANSACTION_UPLOAD_SUMMARY a
                  WHERE a.PROCESSING_STATUS = '22'
                    and a.THREAD_ID = p_THREAD_id) LOOP
    
      -- BEGIN
    
      v_trancount   := 0;
      v_totalamt    := 0.0;
      v_totalcharge := 0.0;
      select count(1)
        into v_pendingcount
        from TRANSACTION_UPLOAD_DETAIL
       where batch_id = item.batch_id
            -- and TRANSACTION_STATUS = 'FAILED'
         AND IS_SUMMARY_TABLE_UPDATED = 'N'
         AND PROCESSING_STATUS = '07';
    
      IF (v_pendingcount > 0) THEN
      
        UPDATE TRANSACTION_UPLOAD_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
         where batch_id = item.batch_id
              --and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '07';
        select count(1), sum(AMOUNT), sum(CHARGE_AMOUNT)
          into v_trancount, v_totalamt, v_totalcharge
          from TRANSACTION_UPLOAD_DETAIL
         where batch_id = item.batch_id
              --  and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '07';
      
        UPDATE TRANSACTION_UPLOAD_SUMMARY
           SET FAILURE_COUNT         =
               (FAILURE_COUNT + v_trancount),
               NO_OF_RECORDS_FAILED  =
               (NO_OF_RECORDS_FAILED + v_trancount),
               PROCESSED_RECORD_COUNT =
               (PROCESSED_RECORD_COUNT + v_trancount)
         WHERE BATCH_ID = item.batch_id;
      
        UPDATE TRANSACTION_upload_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'Y'
         where batch_id = item.batch_id
              --and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '07';
      
        v_trancount    := 0;
        v_totalamt     := 0.0;
        v_totalcharge  := 0.0;
        v_pendingcount := 0;
      END IF;
    
      select count(1)
        into v_pendingcount
        from TRANSACTION_UPLOAD_DETAIL
       where batch_id = item.batch_id
            -- and TRANSACTION_STATUS = 'FAILED'
         AND IS_SUMMARY_TABLE_UPDATED = 'N'
         AND PROCESSING_STATUS = '00';
    
      IF (v_pendingcount > 0) THEN
      
        UPDATE TRANSACTION_UPLOAD_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
         where batch_id = item.batch_id
              --and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '00';
        select count(1), sum(AMOUNT), sum(CHARGE_AMOUNT)
          into v_trancount, v_totalamt, v_totalcharge
          from TRANSACTION_UPLOAD_DETAIL
         where batch_id = item.batch_id
              --  and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '00';
      
        UPDATE TRANSACTION_UPLOAD_SUMMARY
           SET NO_OF_RECORDS_SUCCESSFUL =
               (NO_OF_RECORDS_SUCCESSFUL + v_trancount),
               PROCESSED_RECORD_COUNT  =
               (PROCESSED_RECORD_COUNT + v_trancount)
         WHERE BATCH_ID = item.batch_id;
      
        UPDATE TRANSACTION_UPLOAD_DETAIL
           SET IS_SUMMARY_TABLE_UPDATED = 'Y'
         where batch_id = item.batch_id
              --and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           AND PROCESSING_STATUS = '00';
      
        v_trancount    := 0;
        v_totalamt     := 0.0;
        v_totalcharge  := 0.0;
        v_pendingcount := 0;
      END IF;
    
      select NO_OF_RECORD, FAILURE_COUNT, PROCESSED_RECORD_COUNT, b.NAME
        into v_noofrecords,
             v_failurecount,
             v_processedcount,
             v_payment_type
        from TRANSACTION_UPLOAD_SUMMARY a
        join REF_PAYMENT_TYPES b
          on b.PAYMENT_TYPE_ID = a.PAYMENT_TYPE_ID
       where batch_id = item.batch_id;
    
      IF (v_noofrecords = v_processedcount) THEN
        --PROCESSING_STATUS
        --v_processingstatus
        select FIRST_NAME, EMAIL
          into v_fname, v_user_email_address
          from USER_PROFILE
         where USER_ID = item.CREATED_BY;
        select EMAIL
          into v_corporate_email_address
          from CORPORATE_PROFILE
         where corp_id = (select corp_id
                            from USER_PROFILE
                           where user_id = item.CREATED_BY);
        select a.p_value
          into v_email_template
          from cib_proc_properties a
         where a.p_key_name =
               'P_UPLOAD_ACCOUNT_VALIDATION_COMPLETION_EMAIL';
        select a.p_value
          into v_app_url
          from cib_proc_properties a
         where a.p_key_name = 'P_APP_URL';
      
        v_email_template := replace(v_email_template, '#FNAME#', v_fname);
        v_email_template := replace(v_email_template,
                                    '#BATCH_ID#',
                                    item.batch_id);
        v_email_template := replace(v_email_template,
                                    '#PAYMENT_TYPE#',
                                    v_payment_type);
      
        v_email_template := replace(v_email_template,
                                    '#P_APP_URL#',
                                    v_app_url);
      
        select TO_CHAR(item.TOTAL_TRAN_AMOUNT, '999,999,999,999')
          into v_amount
          from dual;
      
        v_email_template := replace(v_email_template,
                                    '#TOTAL_AMOUNT#',
                                    v_amount);
        v_email_template := replace(v_email_template,
                                    '#NO_OF_RECORDS#',
                                    v_noofrecords);
        v_email_template := replace(v_email_template,
                                    '#TRAN_REMARKS#',
                                    item.BATCH_DESCRIPTION);
        IF (v_failurecount = v_noofrecords) THEN
          v_processingstatus := '07';
        ELSIF (v_failurecount > 0 AND v_failurecount < v_noofrecords) THEN
          v_processingstatus := '06';
        ELSIF (v_failurecount = 0) THEN
          v_processingstatus := '00';
        END IF;
        UPDATE TRANSACTION_UPLOAD_SUMMARY
           SET PROCESSING_STATUS = v_processingstatus
         WHERE BATCH_ID = item.batch_id;
      
        INSERT INTO EMAIL_SCHEDULES
          (CREATED_BY,
           SCHEDULE_ID,
           EMAIL_SUBJECT,
           CREATED_DATE,
           TO_ADDRESS,
           EMAIL_BODY,
           cc_address)
        VALUES
          ('SYSTEM',
           EMAIL_SCHEDULES_SEQ.NEXTVAL,
           'Upload Account Validation Completed for Batch ' ||
           item.batch_id,
           sysdate,
           v_user_email_address,
           v_email_template,
           v_corporate_email_address
           
           );
      
      END IF;
    
    --END;
    END LOOP;
    --select * from RIA_INVOICES
  
    -- END;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  function getPaymentDetailsByBatchId(p_batch_detail_id varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
    --insert into idvalid values(p_start_date,p_end_date);
    --commit;
    open c_result for
      SELECT a.CHARGE_AMOUNT,
             a.CREATED_DATE,
             a.MOBILE_NUMBER,
             a.IS_SUMMARY_TABLE_UPDATED,
             a.POSTED_DATE,
             a.NE_DATE,
             a.BATCH_DETAIL_ID,
             a.THREAD_ID,
             a.ERROR_PROCESSING_STATUS,
             a.FLEXCUBECUSTOMERID,
             a.REVERSAL_REF_NO,
             a.AMOUNT,
             a.BENEFICIARY_NAME,
             a.REVERSAL_DATE,
             a.BILLER_NAME,
             a.CR_ACCOUNT_NO,
             a.APPROVED_BY,
             a.BENEFICIARY_EMAIL,
             b.DR_ACCOUNT as DR_ACCOUNT_NO,
             --a.DR_ACCOUNT_NO,
             a.CREATED_BY,
             a.ERROR_TRIAL_COUNT,
             a.FLEXCUBETRANID,
             a.MANUAL_SETTLEMENT_ADVISED,
             a.NE_SESSION_ID,
             a.LAST_MODIFIED_DATE,
             a.CR_ACCOUNT_CURRENCY_CODE,
             a.SCHEDULE_DATE,
             a.BILLER_CUSTOM_FIELD_VALUE,
             a.THIRDPARTY_RESPONSE_DATE,
             a.PROCESSING_STATUS,
             a.REJECTED_DATE,
             a.REJECTED_BY,
             a.ISPOSTING_REVERSED,
             a.PAYMENT_TYPE_ID,
             a.ISINTERBANK_TRANSFER,
             a.POSTINGUIDS,
             a.POSTING_LOCK_COUNT,
             a.RESPONSE_CODE,
             a.BILLER_CATEGORY,
             a.THIRDPARTY_RESPONSE_MESSAGE,
             a.LAST_MODIFIED_BY,
             a.CUSTOMER_BVN,
             a.REVERSALPOSTINGUIDS,
             a.BATCH_ID,
             a.APPROVED_DATE,
             a.TRANSACTION_STATUS,
             a.REVERSAL_RESPONSE_MESSAGE,
             a.NEXT_TRIAL_TIME,
             a.FLEXCUBEACCOUNTVALIDATIONFLG,
             a.NE_BVN_NO,
             a.CR_ACCOUNT_BRANCH_CODE,
             a.BILLER_RECHARGE_PIN,
             r.BNK_CODE                     as BANK_CODE,
             a.BENEFICIARY_ID,
             a.FLEXCUBERESPONSECODE,
             --a.TRANSACTION_INITIATED ,
             a.NE_CUST_NAME,
             a.ISFT_SUCCESSFUL,
             a.FLEXCUBERESPONSEDESCRIPTION,
             a.THIRDPARTY_RESPONSE_CODE,
             a.RECORD_STATUS_ID,
             a.CORP_ID,
             a.POSTEDFLG,
             a.APPROVAL_STATUS_ID,
             a.PAYMENT_CHANNEL_ID,
             a.ISNE_SUCCESSFUL,
             a.NE_RESPONSE_CODE,
             a.NARRATION,
             a.NE_KYCLEVEL,
             a.POST_REF_NO,
             a.THIRDPARTY_GUID,
             a.NE_RESPONSE_MESSAGE,
             a.THIRDPARTY_SESSION_ID,
             a.REVERSAL_RESPONSE_CODE,
             a.BILLER_PRODUCT_TYPE,
             -- a.BANK_NAME
             z.BNK_NAME as BANK_NAME,
             b.batch_id as summary_batch_id,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.BATCH_DESCRIPTION,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             b.PROCESSED_RECORD_COUNT,
             c.CHANNEL_CODE,
             case b.PROCESSING_STATUS
               when '21' then
                'PENDING'
               when '22' then
                'IN_PROGRESS'
               when '00' then
                'COMPLETED'
               when '07' then
                'COMPLETED'
               when '06' then
                'COMPLETED'
             end SUMMARY_PROCESSING_STATUS,
             p.NAME as paymenttypedesc,
             k.NARRATION_OPTION_ID
        FROM TRANSACTION_batch_DETAIL a
        join TRANSACTION_batch_SUMMARY b
      
          on b.batch_id = a.batch_id
        left join newibank.RIB_BANKS_LIST z
          on z.NIBSSCODE = a.bank_code
        join corporate_profile k
          on b.corp_id = k.corp_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join REF_PAYMENT_TYPES p
          on p.payment_type_id = a.payment_type_id
        join newibank.RIB_BANKS_LIST r
          on r.nibsscode = a.bank_code
       WHERE a.BATCH_DETAIL_ID = p_batch_detail_id;
    --AND a.SCHEDULE_DATE <= sysdate
    --AND  b.PROCESSING_STATUS IN('21','00','07','22','06') AND b.TRANSACTION_INITIATED='N';
  
    --select * from TRANSACTION_BATCH_DETAIL where BATCH_DETAIL_ID=p_batch_detail_id;
    return c_result;
  
  end;

  function getApprovedTransByUserId(p_user_id    varchar2,
                                    p_start_date date,
                                    p_end_date   date) return sys_refcursor as
    c_result sys_refcursor;
  begin
    --insert into idvalid values(p_start_date,p_end_date);
    --commit;
    open c_result for
      select a.batch_id,
             a.batch_description,
             
             (select count(1)
                from TRANSACTION_BATCH_DETAIL m
               where m.batch_id = a.batch_id) ALL_ITEMS,
             (select count(1)
                from TRANSACTION_BATCH_DETAIL n
               where n.batch_id = a.batch_id
                 and n.processing_status = '00') SUCCESS_ITEMS,
             (select count(1)
                from TRANSACTION_BATCH_DETAIL o
               where o.batch_id = a.batch_id
                 and o.processing_status = '07') FAILED_ITEMS,
             (select count(1)
                from TRANSACTION_BATCH_DETAIL p
               where p.batch_id = a.batch_id
                 and coalesce(p.processing_status, '') not in ('00', '07')) PENDING_ITEMS
        from TRANSACTION_BATCH_SUMMARY a
       where a.batch_id in
             (select x.parent_table_id
                from REQ_APPROVAL_SCHEDULE_ACTIONS x
               where x.approved_by = p_user_id
                 and trunc(x.approved_date) between trunc(p_start_date) and
                     trunc(p_end_date))
          or (a.created_by = p_user_id and
             trunc(a.created_date) between trunc(p_start_date) and
             trunc(p_end_date));
    return c_result;
  
  end;

  function saveApprovalPriorities(p_APPROVAL_PRIORITIES_TYP APPROVAL_PRIORITIES_TYP,
                                  p_context_url             varchar2,
                                  p_ip_mac_address          varchar2,
                                  p_session_id              varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message           VARCHAR2(3000);
    v_response              VARCHAR2(100);
    v_recordstatus          VARCHAR2(2);
    v_recordid              NUMBER;
    v_requestid             NUMBER;
    v_approvalstatus        VARCHAR2(2);
    v_counter               integer := 0;
    v_batch_id              number;
    v_APPROVAL_PRIORITY_TYP APPROVAL_PRIORITY_TYP := NEW
                                                     APPROVAL_PRIORITY_TYP(0,
                                                                           0,
                                                                           0,
                                                                           0,
                                                                           0,
                                                                           0,
                                                                           0,
                                                                           0,
                                                                           0);
  
  BEGIN
    SELECT APPROVAL_ROUTE_TYPE_PR_REQ_SEQ.nextval
      INTO v_batch_id
      FROM DUAL;
  
    FOR i IN p_APPROVAL_PRIORITIES_TYP.FIRST .. p_APPROVAL_PRIORITIES_TYP.LAST LOOP
    
      SELECT APPROVAL_ROUTE_TYPE_PR_REQ_SEQ.nextval
        INTO v_requestid
        FROM DUAL;
    
      v_counter               := v_counter + 1;
      v_APPROVAL_PRIORITY_TYP := p_APPROVAL_PRIORITIES_TYP(i);
      v_recordstatus          := getRecordStatusId(v_APPROVAL_PRIORITY_TYP.request_type_id);
      v_approvalstatus        := getApprovalStatusId(v_APPROVAL_PRIORITY_TYP.request_type_id);
      IF (v_APPROVAL_PRIORITY_TYP.request_type_id = '1') -- NEW
       THEN
      
        SELECT APPROVAL_ROUTE_TYPE_PR_SEQ.NEXTVAL
          INTO v_recordid
          FROM DUAL;
      
        INSERT INTO APPROVAL_ROUTE_TYPE_PRIORITY
          (ROUTE_TYPE_PRIORITY_ID,
           CORP_ID,
           APPROVAL_ROUTE_TYPE_ID,
           PRIORITY_NO,
           CREATED_DATE,
           CREATED_BY,
           -- LAST_MODOFIED_BY, 
           -- LAST_MODIFIED_DATE, 
           RECORD_STATUS_ID,
           APPROVAL_STATUS_ID,
           APPROVed_DATE,
           APPROVed_BY,
           REQUEST_TYPE_ID,
           batch_id)
        VALUES
          (v_recordid, -- i_CHARGE_DISCOUNT_ID,
           v_APPROVAL_PRIORITY_TYP.CORP_ID,
           v_APPROVAL_PRIORITY_TYP.APPROVAL_ROUTE_TYPE_ID,
           v_APPROVAL_PRIORITY_TYP.PRIORITY_NO,
           sysdate, --i_CREATED_DATE,
           v_APPROVAL_PRIORITY_TYP.CREATED_BY,
           --i_LAST_MODOFIED_BY,
           -- i_LAST_MODIFIED_DATE,
           v_recordstatus,
           v_approvalstatus,
           sysdate,
           v_APPROVAL_PRIORITY_TYP.APPROVed_BY,
           v_APPROVAL_PRIORITY_TYP.REQUEST_TYPE_ID,
           v_batch_id);
      
      else
      
        v_recordid := v_APPROVAL_PRIORITY_TYP.ROUTE_TYPE_PRIORITY_ID;
      
      END IF;
    
      INSERT INTO APPROVAL_ROUTE_TYPE_PR_REQ
        (ROUTE_TYPE_PRIORITY_ID,
         CORP_ID,
         APPROVAL_ROUTE_TYPE_ID,
         PRIORITY_NO,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVed_DATE,
         APPROVed_BY,
         REQUEST_TYPE_ID,
         REQUEST_ID,
         PARENT_TABLE_ID,
         batch_id)
      VALUES
        (v_recordid, -- i_CHARGE_DISCOUNT_ID,
         v_APPROVAL_PRIORITY_TYP.CORP_ID,
         v_APPROVAL_PRIORITY_TYP.APPROVAL_ROUTE_TYPE_ID,
         v_APPROVAL_PRIORITY_TYP.PRIORITY_NO,
         sysdate, --i_CREATED_DATE,
         v_APPROVAL_PRIORITY_TYP.CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         v_APPROVAL_PRIORITY_TYP.APPROVED_BY,
         v_APPROVAL_PRIORITY_TYP.request_type_id,
         v_requestid,
         v_recordid,
         v_batch_id);
    
    --ensure this is called once
    
    end loop;
  
    --if (v_counter = 1) then
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        v_APPROVAL_PRIORITY_TYP.CREATED_BY,
                                                        v_APPROVAL_PRIORITY_TYP.menu_id,
                                                        v_APPROVAL_PRIORITY_TYP.request_type_id,
                                                        v_batch_id,
                                                        0,
                                                        v_APPROVAL_PRIORITY_TYP.CORP_ID,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    -- end if;
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(v_APPROVAL_PRIORITY_TYP.CREATED_BY,
                   p_session_id,
                   'APPROVAL-PRIORITIES', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   v_APPROVAL_PRIORITY_TYP.MENU_ID,
                   v_APPROVAL_PRIORITY_TYP.REQUEST_TYPE_ID,
                   v_response,
                   v_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveApprovalPriorities');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message,
                                         v_APPROVAL_PRIORITY_TYP.MENU_ID);
  END saveApprovalPriorities;

  function getApprovalPrioritiesByCorpId(p_corp_id varchar2)
    RETURN sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from APPROVAL_ROUTE_TYPE_PRIORITY a
       where a.record_status_id in (1, 2)
         and a.corp_id = p_corp_id;
    return c_result;
  end;

  function getBranches return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.branch_code,
             a.branch_name,
             a.branch_addr1 branch_address,
             a.branch_addr2 branch_state,
             a.branch_addr3 branch_city
        from sttm_branch a
       where a.record_stat = 'O'
         and a.auth_stat = 'A';
  
    return c_result;
  end getBranches;

  function saveBeneficiaries(p_corporate_beneficiaries corporate_beneficiaries_typ,
                             p_context_url             varchar2,
                             p_ip_mac_address          varchar2,
                             p_session_id              varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message           VARCHAR2(3000);
    v_response              VARCHAR2(100);
    v_recordstatus          VARCHAR2(2);
    v_recordid              NUMBER;
    v_requestid             NUMBER;
    v_counter               integer;
    v_approvalstatus        VARCHAR2(2);
    v_batch_id              number;
    v_corporate_beneficiary corporate_beneficiary_typ := NEW
                                                         corporate_beneficiary_typ(0,
                                                                                   0,
                                                                                   '',
                                                                                   '',
                                                                                   0,
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   0,
                                                                                   0,
                                                                                   0,
                                                                                   0,
                                                                                   0);
  BEGIN
  
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_batch_id FROM DUAL;
  
    FOR i IN p_corporate_beneficiaries.FIRST .. p_corporate_beneficiaries.LAST LOOP
      SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    
      v_counter               := v_counter + 1;
      v_corporate_beneficiary := p_corporate_beneficiaries(i);
      v_recordstatus          := getRecordStatusId(v_corporate_beneficiary.REQUEST_TYPE_ID);
      v_approvalstatus        := getApprovalStatusId(v_corporate_beneficiary.REQUEST_TYPE_ID);
    
      IF (v_corporate_beneficiary.REQUEST_TYPE_ID = '1') -- NEW
       THEN
      
        SELECT CORPORATE_BENEFICIARIES_SEQ.NEXTVAL
          INTO v_recordid
          FROM DUAL;
        INSERT INTO CORPORATE_BENEFICIARIES
          (BENEFICIARY_ID,
           CORP_ID,
           PREFERRED_NAME,
           BENEFICIARY_CODE,
           BENEFICIARY_CATEGORY,
           PRODUCT_CATEGORY,
           DESTINATION_BANK_CODE,
           ACCOUNT_NAME,
           ACCTNO_PHONENO_RSA_TAX_TIN_ID,
           batch_id,
           isaccount_valid,
           BENEFICIARY_EMAIL,
           CREATED_DATE,
           CREATED_BY,
           -- LAST_MODOFIED_BY, 
           -- LAST_MODIFIED_DATE, 
           RECORD_STATUS_ID,
           APPROVAL_STATUS_ID,
           APPROVED_DATE,
           APPROVED_BY,
           REQUEST_TYPE_ID)
        VALUES
          (v_recordid, -- i_CHARGE_DISCOUNT_ID,
           
           v_corporate_beneficiary.CORP_ID,
           v_corporate_beneficiary.PREFERRED_NAME,
           v_corporate_beneficiary.BENEFICIARY_CODE,
           v_corporate_beneficiary.BENEFICIARY_CATEGORY,
           v_corporate_beneficiary.PRODUCT_CATEGORY,
           v_corporate_beneficiary.DESTINATION_BANK_CODE,
           v_corporate_beneficiary.ACCOUNT_NAME,
           v_corporate_beneficiary.ACCTNO_PHONE_RSA_TAX_TIN_ID,
           --v_corporate_beneficiary.batch_id,
           v_batch_id,
           v_corporate_beneficiary.isaccount_valid,
           v_corporate_beneficiary.BENEFICIARY_EMAIL,
           sysdate, --i_CREATED_DATE,
           v_corporate_beneficiary.CREATED_BY,
           --i_LAST_MODOFIED_BY,
           -- i_LAST_MODIFIED_DATE,
           2,
           2,
           sysdate,
           v_corporate_beneficiary.APPROVed_BY,
           v_corporate_beneficiary.REQUEST_TYPE_ID);
      
      else
      
        v_recordid := v_corporate_beneficiary.BENEFICIARY_ID;
      
      END IF;
    
      INSERT INTO CORPORATE_BENEFICIARIES_REQ
        (BENEFICIARY_ID_REQ,
         BENEFICIARY_ID,
         CORP_ID,
         PREFERRED_NAME,
         BENEFICIARY_CODE,
         BENEFICIARY_CATEGORY,
         PRODUCT_CATEGORY,
         DESTINATION_BANK_CODE,
         ACCOUNT_NAME,
         ACCTNO_PHONENO_RSA_TAX_TIN_ID,
         batch_id,
         isaccount_valid,
         BENEFICIARY_EMAIL,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVED_DATE,
         APPROVED_BY,
         REQUEST_TYPE_ID,
         PARENT_TABLE_ID)
      VALUES
        (v_requestid,
         v_recordid, -- i_CHARGE_DISCOUNT_ID,
         
         v_corporate_beneficiary.CORP_ID,
         v_corporate_beneficiary.PREFERRED_NAME,
         v_corporate_beneficiary.BENEFICIARY_CODE,
         v_corporate_beneficiary.BENEFICIARY_CATEGORY,
         v_corporate_beneficiary.PRODUCT_CATEGORY,
         v_corporate_beneficiary.DESTINATION_BANK_CODE,
         v_corporate_beneficiary.ACCOUNT_NAME,
         v_corporate_beneficiary.ACCTNO_PHONE_RSA_TAX_TIN_ID,
         --v_corporate_beneficiary.batch_id,
         v_batch_id,
         v_corporate_beneficiary.isaccount_valid,
         v_corporate_beneficiary.BENEFICIARY_EMAIL,
         sysdate, --i_CREATED_DATE,
         v_corporate_beneficiary.CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         2,
         2,
         sysdate,
         v_corporate_beneficiary.APPROVed_BY,
         v_corporate_beneficiary.REQUEST_TYPE_ID,
         v_recordid);
    
    end loop;
  
    v_response := '00~~Beneficiary Added successfully';
  
    --if (v_counter=1) then
    /*v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
    v_corporate_beneficiary.CREATED_BY,
    v_corporate_beneficiary.MENU_ID,
    v_corporate_beneficiary.REQUEST_TYPE_ID,
    v_batch_id,
    0);*/
    -- end if;
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(v_corporate_beneficiary.CREATED_BY,
                   p_session_id,
                   'BENEFICIARIES', --event category
                   'recordid~' || v_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   v_corporate_beneficiary.MENU_ID,
                   v_corporate_beneficiary.REQUEST_TYPE_ID,
                   v_response,
                   v_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveBeneficiaries');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message,
                                         v_corporate_beneficiary.MENU_ID);
  END saveBeneficiaries;

  function getApprovalRoutesByCorpId2(p_corp_id varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select * from approval_route a where a.corp_id = p_corp_id;
    return c_result;
  end getApprovalRoutesByCorpId2;

  FUNCTION getAccountDetail(p_account_number varchar2) RETURN SYS_REFCURSOR IS
    o_refcursor SYS_REFCURSOR;
  BEGIN
    OPEN o_refcursor FOR
      SELECT branch_code,
             ac_desc,
             cust_no,
             cust_ac_no,
             account_class,
             ccy,
             case account_type
               when 'U' then
                'Current'
               when 'S' then
                'Savings'
               else
                'Bank'
             end account_type,
             c.address_line1 || ' ' || c.address_line2 || ' ' ||
             c.address_line3 || ' ' || c.address_line4 location,
             --b.customer,b.emp_number, b.full_name,b.email,b.mobile,b.location notinuse,b.branch_name,
             c.customer_no,
             '0000000' emp_number,
             'Union Bank' full_name,
             'customerservice@unionbankng.com' email,
             '+234-1-2716816' mobile,
             '' notinuse,
             'HEAD OFFICE' branch_name,
             m.e_mail cust_email,
             COALESCE(TRIM(m.mobile_number),
                      TRIM(m.telephone),
                      TRIM(m.home_tel_no)) cust_phone_no
      
        FROM sttm_cust_account A, sttm_customer c, sttm_cust_personal m --, fcubslive.sttm_cust_corporate n
      -- ,
      --  VW_RM_PROFILE      B
      
       where a.cust_no = c.customer_no -- and a.cust_no = b.customer(+)
         and a.cust_ac_no = p_account_number
         and a.record_stat = 'O'
         and a.auth_stat = 'A'
         AND a.cust_no = m.customer_no;
    -- AND a.cust_no = n.customer_no(+);  
    /* select s.*, w.address
               location, w.customer_no,
           '0000000' emp_number,
           'Union Bank' full_name,
           'customerservice@unionbankng.com' email,
           '+234-1-2716816' mobile,
           '' notinuse,
           'HEAD OFFICE' branch_name,
          w.cust_email,
           w.cust_phone_no
    from
    (select branch_code, ac_desc, cust_no,cust_Ac_no,account_class,ccy ,
    CASE account_type
               WHEN 'U' THEN 'Current'
               WHEN 'S' THEN 'Savings'
               ELSE 'Bank'
           END account_type
    from  sttm_cust_account y 
            where cust_no in 
         (select customer from  fcubslive.cstb_relationship_linkage y
          where ref_no in 
          (select cust_no from sttm_cust_account where cust_ac_no = p_account_number)
           and category = 'C' and relationship != 'AUS')
           union
    select  branch_code, ac_desc, cust_no,cust_Ac_no,account_class,ccy ,
    CASE account_type
               WHEN 'U' THEN 'Current'
               WHEN 'S' THEN 'Savings'
               ELSE 'Bank'
           END account_type from  sttm_cust_account y  
            where cust_no in 
         (select customer from  fcubslive.cstb_relationship_linkage y
          where ref_no in 
         (select ref_no from  fcubslive.cstb_relationship_linkage y
          where customer in 
          (select cust_no from sttm_cust_account where cust_ac_no = p_account_number) 
           and category = 'C' and relationship = 'SUB') and relationship != 'AUS')) s, 
           (select  c.address_line1 || ' ' || c.address_line2 || ' ' ||
                 c.address_line3 || ' ' || c.address_line4 address,
                 --b.customer,b.emp_number, b.full_name,b.email,b.mobile,b.location notinuse,b.branch_name,
                 c.customer_no,
                 '0000000' emp_number,
                 'Union Bank' full_name,
                 'customerservice@unionbankng.com' email,
                 '+234-1-2716816' mobile,
                 '' notinuse,
                 'HEAD OFFICE' branch_name,
                 m.e_mail cust_email,
                 COALESCE(TRIM(m.mobile_number),
                          TRIM(m.telephone),
                          TRIM(m.home_tel_no)) cust_phone_no FROM sttm_customer c, sttm_cust_personal m 
           where c.customer_no = m.customer_no) w
           where s.cust_no = w.customer_no(+);*/
  
    RETURN o_refcursor;
  END getAccountDetail;

  function getGroupMembers(p_group_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select b.group_id group_Id,
             b.name group_Name,
             a.approval_groups_users_id group_User_Id,
             c.first_name || ' ' || c.last_name member_Name,
             'Individual' member_Type
        from approval_groups_users a, approval_groups b, user_profile c
       where a.user_id = c.user_id
         and a.approval_group_id = b.group_id
         and b.group_id = p_group_id
         and a.dept_id is null
      union all
      select b.group_id,
             b.name,
             a.approval_groups_users_id,
             c.name MemberName,
             'Individual'
        from approval_groups_users a, approval_groups b, departments c
       where a.dept_id = c.dept_id
         and a.approval_group_id = b.group_id
         and b.group_id = p_group_id
         and a.user_id is null;
    return c_result;
  
  end getGroupMembers;

  function getRolesByTypeId(p_role_type_id varchar2) return Sys_Refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select * from roles a where a.role_type_id = p_role_type_id;
    return c_result;
  end getRolesByTypeId;

  function getAuditLogs(p_corp_id    number,
                        p_user_id    number,
                        p_start_date date,
                        p_end_date   date) return sys_refcursor as
    c_result Sys_Refcursor;
  begin
  
    open c_result for
      select a.event_id,
             c.corporate_id,
             b.username,
             a.event_category,
             a.event_date,
             a.event_detail,
             a.session_id,
             a.context_url,
             a.ip_address,
             a.target_reference
      
        from audit_log a, user_profile b, corporate_profile c
       where a.user_id = b.user_id(+)
         and a.corp_id = c.corp_id(+)
         and a.event_date between TRUNC(p_start_date) and
             TRUNC(p_end_date + 1)
         and (p_corp_id is null or nvl(a.corp_id, 0) = p_corp_id)
         and (p_user_id is null or nvl(a.user_id, 0) = p_user_id);
    return c_result;
  
  end getAuditLogs;

  FUNCTION getCorporateTypes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.corporate_type_id id,
             a.name name,
             a.description description,
             '' miscString1,
             0 miscInt
        from REF_CORPORATE_TYPES a
       WHERE a.availability_flag <> 'NONE';
    RETURN c_refcursor;
  END getCorporateTypes;

  procedure clearBlockedUser as
    v_USER_LOCKOUT_DURATION integer;
  begin
    select a.p_value
      into v_USER_LOCKOUT_DURATION
      from cib_proc_properties a
     where a.p_key_name = 'P_USER_LOCKOUT_DURATION';
  
    for item in (select a.user_id
                   from USER_PROFILE a
                  where Locked_FLAG = 'BLOCKED'
                    and (sysdate - a.Locked_Date) * 24 * 60 >
                        v_USER_LOCKOUT_DURATION) loop
    
      update CIB_CUSTOMERS_SESS_LOGON_LOG
         set del_flg = 'D'
       WHERE user_id = item.user_id
         AND logon_status = 'FAILED'
         AND trunc(logon_session_date) = trunc(sysdate)
         AND del_flg = 'N';
    
      update user_profile
         set LOCKED_FLAG = 'OPEN', LOCKED_DATE = SYSDATE, LOCKED_BY = 1
       where USER_ID = item.user_id
         and record_status_id = 2
         and locked_flag = 'BLOCKED'
         and approval_status_id = 2;
      commit;
    end loop;
  end clearBlockedUser;

  function saveCorporateLimit(i_CORP_LIMIT_ID            NUMBER,
                              i_corp_id                  varchar2,
                              p_TRANSACTION_LIMIT_AMOUNT NUMBER,
                              p_DAILY_LIMIT_AMOUNT       NUMBER,
                              p_TRANSACTION_LIMIT_COUNT  INTEGER,
                              p_DAILY_LIMIT_COUNT        INTEGER,
                              i_CREATED_BY               INTEGER,
                              i_LAST_MODOFIED_BY         INTEGER,
                              i_APPROVAL_BY              NUMBER,
                              i_REQUEST_TYPE_ID          INTEGER,
                              i_MENU_ID                  INTEGER,
                              p_context_url              varchar2,
                              p_ip_mac_address           varchar2,
                              p_session_id               varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message       VARCHAR2(3000);
    v_response          VARCHAR2(100);
    v_recordstatus      VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid          NUMBER;
    v_requestid         NUMBER;
    v_approvalstatus    VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_corporate_type_id number;
  BEGIN
    SELECT CORPORATE_LIMITS_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    select corporate_type_id
      into v_corporate_type_id
      from corporate_profile
     where corp_id = i_corp_id;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_LIMITS_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CORPORATE_LIMITS
        (CORP_LIMIT_ID,
         corp_id,
         TRANSACTION_LIMIT_AMOUNT,
         DAILY_LIMIT_AMOUNT,
         TRANSACTION_LIMIT_COUNT,
         DAILY_LIMIT_COUNT,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         approved_date,
         approved_by,
         REQUEST_TYPE_ID,
         target_corporate_type_id)
      VALUES
        (v_recordid, -- i_CHARGE_DISCOUNT_ID,
         i_corp_id,
         p_TRANSACTION_LIMIT_AMOUNT,
         p_DAILY_LIMIT_AMOUNT,
         p_TRANSACTION_LIMIT_COUNT,
         p_DAILY_LIMIT_COUNT,
         sysdate, --i_CREATED_DATE,
         i_CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         i_APPROVAL_BY,
         i_REQUEST_TYPE_ID,
         v_corporate_type_id);
    
    else
    
      v_recordid := i_CORP_LIMIT_ID;
    
    END IF;
  
    INSERT INTO CORPORATE_LIMITS_REQ
      (CORP_LIMIT_ID,
       corp_id,
       TRANSACTION_LIMIT_AMOUNT,
       DAILY_LIMIT_AMOUNT,
       TRANSACTION_LIMIT_COUNT,
       DAILY_LIMIT_COUNT,
       CREATED_DATE,
       CREATED_BY,
       -- LAST_MODOFIED_BY, 
       -- LAST_MODIFIED_DATE, 
       RECORD_STATUS_ID,
       APPROVAL_STATUS_ID,
       APPROVED_DATE,
       APPROVED_BY,
       REQUEST_TYPE_ID,
       REQUEST_ID,
       PARENT_TABLE_ID,
       target_corporate_type_id)
    VALUES
      (v_recordid, -- i_CHARGE_DISCOUNT_ID,
       i_corp_id,
       p_TRANSACTION_LIMIT_AMOUNT,
       p_DAILY_LIMIT_AMOUNT,
       p_TRANSACTION_LIMIT_COUNT,
       p_DAILY_LIMIT_COUNT,
       sysdate, --i_CREATED_DATE,
       i_CREATED_BY,
       --i_LAST_MODOFIED_BY,
       -- i_LAST_MODIFIED_DATE,
       v_recordstatus,
       v_approvalstatus,
       sysdate,
       i_APPROVAL_BY,
       i_REQUEST_TYPE_ID,
       v_requestid,
       v_recordid,
       v_corporate_type_id);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_requestid,
                                                        0,
                                                        i_corp_id,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CORPORATE-LIMIT', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_requestid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_requestid);
    RETURN v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveCorporateLimit');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END saveCorporateLimit;

  FUNCTION getCorporateLimit(i_corpId varchar2) RETURN SYS_REFCURSOR IS
    c_refcursor         SYS_REFCURSOR;
    v_found             integer := 0;
    v_corporate_type_id number;
  BEGIN
    select corporate_type_id
      into v_corporate_type_id
      from corporate_profile
     where corp_id = i_corpId;
    select count(1)
      into v_found
      from CORPORATE_LIMITS a
     where a.corp_id = i_corpId
       and a.record_status_id in (1, 2);
    if (v_found = 0) then
      OPEN c_refcursor FOR
        select a.*, 'Y' inherited, b.name CorpDesc
          from CORPORATE_LIMITS a, corporate_profile b
         where a.corp_id = 1
           and a.corp_id = b.corp_id
           and a.target_corporate_type_id = v_corporate_type_id
           and a.record_status_id in (1, 2);
    else
    
      OPEN c_refcursor FOR
        select a.*, 'N' inherited, b.name CorpDesc
          from CORPORATE_LIMITS a, corporate_profile b
         where a.corp_id = i_corpId
           and a.corp_id = b.corp_id
           and a.record_status_id in (1, 2);
    end if;
    RETURN c_refcursor;
  END getCorporateLimit;

  function getCorporateLimitById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.*, 'N' inherited, b.name CorpDesc
        from corporate_limits a, corporate_profile b
       where a.corp_limit_id = p_id
         and a.corp_id = b.corp_id
         and a.record_status_id in (1, 2);
    return c_result;
  end;

  function getCorporateDiscountsByCorpId(p_corp_id varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.*, b.name PaymentType, c.name CorpDesc
        from corporate_discounts a,
             ref_payment_types   b,
             corporate_profile   c
       where a.payment_type_id = b.payment_type_id
         and a.corp_id = p_corp_id
         and a.corp_id = c.corp_id
         and a.record_status_id in (1, 2);
    return c_result;
  end getCorporateDiscountsByCorpId;

  function getCorporateDiscountById(p_id varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select a.*, b.name PaymentType, c.name CorpDesc
        from corporate_discounts a,
             ref_payment_types   b,
             corporate_profile   c
       where a.payment_type_id = b.payment_type_id
         and a.charge_discount_id = p_id
         and a.corp_id = c.corp_id
         and a.record_status_id in (1, 2);
    return c_result;
  end getCorporateDiscountById;

  function getBanks return Sys_Refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      SELECT BNK_CODE, BNK_NAME, NIBSSCODE, SHORTNAME
        FROM newibank.RIB_BANKS_LIST
      
       WHERE DEL_FLG = 'N'
       order by BNK_NAME ASC;
    return c_result;
  end getBanks;

  FUNCTION getquicktellercategories RETURN sys_refcursor IS
    o_refcursor sys_refcursor;
  BEGIN
    OPEN o_refcursor FOR
      SELECT DISTINCT CATEGORY
        FROM newibank.rib_qtr_biller_master
       ORDER BY CATEGORY;
  
    RETURN o_refcursor;
  END getquicktellercategories;

  FUNCTION log_quickteller_res(p_account_number IN VARCHAR2,
                               p_bills_ref      IN VARCHAR2,
                               p_resp_xml       IN VARCHAR2) RETURN VARCHAR2 IS
    v_count       INTEGER;
    v_err_message VARCHAR2(3000);
    v_uid         VARCHAR2(100) := NULL;
  BEGIN
    INSERT INTO newibank.quckteller_log
      (BILLS_RES, ACCOUNT_NUMBER, DATECREATED, XML_RESP)
    VALUES
      (p_bills_ref, p_account_number, SYSDATE, p_resp_xml);
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      INSERT INTO rib_sr_error_log
        (error_date, error_msg, error_point)
      VALUES
        (SYSDATE,
         DBMS_UTILITY.format_error_backtrace || v_err_message,
         'ribank.UBN_ribank.UTIL_PKG.update_password');
    
      COMMIT;
      RETURN 'ERROR UPDATING USER PASSWORD';
  END;

  FUNCTION getquicktellerbillers(pcategory IN VARCHAR2) RETURN sys_refcursor IS
    o_refcursor sys_refcursor;
  BEGIN
    IF pcategory IS NOT NULL THEN
      OPEN o_refcursor FOR
        SELECT biller_id,
               biller_name,
               short_name,
               CATEGORY,
               custom_field_name,
               custom_field_name2
          FROM newibank.rib_qtr_biller_master
         WHERE (del_flg = 'N')
           AND (CATEGORY = pcategory);
    ELSE
      OPEN o_refcursor FOR
        SELECT biller_id,
               biller_name,
               short_name,
               CATEGORY,
               custom_field_name,
               custom_field_name2
          FROM newibank.rib_qtr_biller_master
         WHERE (del_flg = 'N');
    END IF;
  
    -- AND customer_number = pUserName;
    RETURN o_refcursor;
  END getquicktellerbillers;

  FUNCTION getquicktellerbillerdetails(billerid IN VARCHAR2)
    RETURN sys_refcursor IS
    o_refcursor sys_refcursor;
  BEGIN
    OPEN o_refcursor FOR
      SELECT biller_id, payment_code, payment_name, amount, payment_id, fee
        FROM newibank.rib_qtr_biller_details
       WHERE (del_flg = 'N')
         AND (biller_id = billerid);
  
    -- AND customer_number = pUserName;
    RETURN o_refcursor;
  END getquicktellerbillerdetails;

  function getDashBoardGraphValues(p_corp_id varchar2) return Sys_Refcursor as
    c_result Sys_Refcursor;
  begin
  
    open c_result for
      select label_id,
             nvl(y.amount, 0) value1,
             nvl(z.amount, 0) value2,
             0 value3
        from dashboard_labels x
        left join (select to_char(a.created_date, 'MON') Mon,
                          count(a.amount) Amount
                     from transaction_batch_detail a
                    where a.corp_id = p_corp_id
                      and a.payment_type_id <> 6
                    GROUP BY to_char(a.created_date, 'MON')) y
          on upper(x.LABEL_ID) = upper(y.Mon)
        left join (select to_char(a.created_date, 'MON') Mon,
                          count(a.amount) Amount
                     from transaction_batch_detail a
                    where a.corp_id = p_corp_id
                      and a.payment_type_id = 6
                    GROUP BY to_char(a.created_date, 'MON')) z
          on upper(x.LABEL_ID) = upper(z.Mon)
       where x.order_id <=
             (select order_id
                from dashboard_labels m
               where upper(m.label_id) = to_char(sysdate, 'MON'))
         and x.label_type = 'MONTH'
       order by order_id;
  
    return c_result;
  
  end;

  FUNCTION getaccountname(account_number IN VARCHAR2) RETURN sys_refcursor IS
    o_refcursor sys_refcursor;
  BEGIN
    OPEN o_refcursor FOR --
      SELECT ac_desc, a.ccy
        FROM sttm_cust_account a
       WHERE cust_ac_no = account_number
         and a.auth_stat = 'A'
         and a.record_stat = 'O';
  
    RETURN o_refcursor;
  END getaccountname;

  ----=============== SPRINT 2 BEGINS ===================================
  function getPendingBatches(p_batch_state varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
    if (p_batch_state = 'PENDING_POSTING') THEN
      --get pending batches for posting    
      open c_result for
        select a.*, substr(b.ac_desc,0,24) sender_name
          from transaction_batch_summary a, sttm_cust_account b
         where a.dr_account = b.cust_ac_no
           and a.processing_status = '22'
           and b.auth_stat = 'A'
           and b.record_stat = 'O'
           and exists
         (select *
                  from transaction_batch_detail b
                 where a.batch_id = b.batch_id
                   and b.processing_status in ('04')
                      --vendor and salary payments
                   and b.payment_channel_id in (2, 3)
                   and b.bank_code not in ('032', '999032', '000018'))
              
           and not exists
         (select *
                  from transaction_batch_detail b
                 where a.batch_id = b.batch_id
                   and b.processing_status not in ('04', '07', '11')
                      --payment via neft and naps only
                   and b.payment_channel_id in (2, 3)
                   and b.bank_code not in ('032', '999032', '000018'));
    
    elsif p_batch_state = 'PENDING_ENQUIRY' THEN
      open c_result for
        select a.*, b.ac_desc sender_name
          from transaction_batch_summary a, sttm_cust_account b
         where a.dr_account = b.cust_ac_no
           and a.processing_status = '22'
           and b.auth_stat = 'A'
           and b.record_stat = 'O'
           and exists
         (select *
                  from transaction_batch_detail b
                 where a.batch_id = b.batch_id
                   and b.processing_status in ('11')
                      --payment via neft and naps only
                   and b.payment_channel_id in (2, 3)
                   and b.bank_code not in ('032', '999032', '000018'));
    end if;
    return c_result;
  end getPendingBatches;

  function getPendingBatchItems(p_batch_id    varchar2,
                                p_batch_state varchar2) return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    if (p_batch_state = 'PENDING_POSTING') THEN
      --get pending batches for posting    
      open c_result for
        select BATCH_DETAIL_ID,
               BATCH_ID,
               CR_ACCOUNT_NO,
               AMOUNT,
               DR_ACCOUNT_NO,
               SCHEDULE_DATE,
               NARRATION,
               c.bnk_code BANK_CODE,
               THREAD_ID,
               RESPONSE_CODE,
               POST_REF_NO,
               POSTED_DATE,
               ISINTERBANK_TRANSFER,
               NE_SESSION_ID,
               NE_CUST_NAME,
               NE_DATE,
               NE_BVN_NO,
               NE_RESPONSE_CODE,
               ISNE_SUCCESSFUL,
               NE_RESPONSE_MESSAGE,
               THIRDPARTY_SESSION_ID,
               THIRDPARTY_RESPONSE_CODE,
               THIRDPARTY_RESPONSE_DATE,
               ISFT_SUCCESSFUL,
               ISPOSTING_REVERSED,
               REVERSAL_REF_NO,
               REVERSAL_DATE,
               REVERSAL_RESPONSE_MESSAGE,
               REVERSAL_RESPONSE_CODE,
               CREATED_BY,
               CREATED_DATE,
               LAST_MODIFIED_DATE,
               LAST_MODIFIED_BY,
               RECORD_STATUS_ID,
               APPROVED_BY,
               BENEFICIARY_ID,
               substr(BENEFICIARY_NAME,0,24),
               PAYMENT_TYPE_ID,
               BANK_NAME,
               PROCESSING_STATUS,
               CORP_ID,
               APPROVED_DATE,
               APPROVAL_STATUS_ID,
               POSTEDFLG,
               FLEXCUBECUSTOMERID,
               CUSTOMER_BVN,
               FLEXCUBEACCOUNTVALIDATIONFLG,
               NE_KYCLEVEL,
               THIRDPARTY_RESPONSE_MESSAGE,
               THIRDPARTY_GUID,
               FLEXCUBETRANID,
               FLEXCUBERESPONSECODE,
               FLEXCUBERESPONSEDESCRIPTION,
               POSTINGUIDS,
               REVERSALPOSTINGUIDS,
               CR_ACCOUNT_BRANCH_CODE,
               CHARGE_AMOUNT,
               CR_ACCOUNT_CURRENCY_CODE,
               PAYMENT_CHANNEL_ID,
               BILLER_PRODUCT_TYPE,
               MOBILE_NUMBER,
               BILLER_CATEGORY,
               BENEFICIARY_EMAIL,
               BILLER_NAME,
               BILLER_CUSTOM_FIELD_VALUE,
               BILLER_RECHARGE_PIN,
               REJECTED_BY,
               REJECTED_DATE,
               ERROR_TRIAL_COUNT,
               NEXT_TRIAL_TIME,
               ERROR_PROCESSING_STATUS,
               TRANSACTION_STATUS,
               IS_SUMMARY_TABLE_UPDATED,
               POSTING_LOCK_COUNT
          from transaction_batch_detail b, newibank.RIB_BANKS_LIST c
         where b.bank_code = c.nibsscode
           and b.batch_id = p_batch_id
           and b.processing_status in ('04')
           and b.payment_channel_id in (2, 3)
           and b.bank_code not in ('032', '999032', '000018');
    elsif p_batch_state = 'PENDING_ENQUIRY' THEN
      open c_result for
        select BATCH_DETAIL_ID,
               BATCH_ID,
               CR_ACCOUNT_NO,
               AMOUNT,
               DR_ACCOUNT_NO,
               SCHEDULE_DATE,
               NARRATION,
               c.bnk_code BANK_CODE,
               THREAD_ID,
               RESPONSE_CODE,
               POST_REF_NO,
               POSTED_DATE,
               ISINTERBANK_TRANSFER,
               NE_SESSION_ID,
               NE_CUST_NAME,
               NE_DATE,
               NE_BVN_NO,
               NE_RESPONSE_CODE,
               ISNE_SUCCESSFUL,
               NE_RESPONSE_MESSAGE,
               THIRDPARTY_SESSION_ID,
               THIRDPARTY_RESPONSE_CODE,
               THIRDPARTY_RESPONSE_DATE,
               ISFT_SUCCESSFUL,
               ISPOSTING_REVERSED,
               REVERSAL_REF_NO,
               REVERSAL_DATE,
               REVERSAL_RESPONSE_MESSAGE,
               REVERSAL_RESPONSE_CODE,
               CREATED_BY,
               CREATED_DATE,
               LAST_MODIFIED_DATE,
               LAST_MODIFIED_BY,
               RECORD_STATUS_ID,
               APPROVED_BY,
               BENEFICIARY_ID,
               substr(BENEFICIARY_NAME,0,24),
               PAYMENT_TYPE_ID,
               BANK_NAME,
               PROCESSING_STATUS,
               CORP_ID,
               APPROVED_DATE,
               APPROVAL_STATUS_ID,
               POSTEDFLG,
               FLEXCUBECUSTOMERID,
               CUSTOMER_BVN,
               FLEXCUBEACCOUNTVALIDATIONFLG,
               NE_KYCLEVEL,
               THIRDPARTY_RESPONSE_MESSAGE,
               THIRDPARTY_GUID,
               FLEXCUBETRANID,
               FLEXCUBERESPONSECODE,
               FLEXCUBERESPONSEDESCRIPTION,
               POSTINGUIDS,
               REVERSALPOSTINGUIDS,
               CR_ACCOUNT_BRANCH_CODE,
               CHARGE_AMOUNT,
               CR_ACCOUNT_CURRENCY_CODE,
               PAYMENT_CHANNEL_ID,
               BILLER_PRODUCT_TYPE,
               MOBILE_NUMBER,
               BILLER_CATEGORY,
               BENEFICIARY_EMAIL,
               BILLER_NAME,
               BILLER_CUSTOM_FIELD_VALUE,
               BILLER_RECHARGE_PIN,
               REJECTED_BY,
               REJECTED_DATE,
               ERROR_TRIAL_COUNT,
               NEXT_TRIAL_TIME,
               ERROR_PROCESSING_STATUS,
               TRANSACTION_STATUS,
               IS_SUMMARY_TABLE_UPDATED,
               POSTING_LOCK_COUNT
          from transaction_batch_detail b, newibank.RIB_BANKS_LIST c
         where b.bank_code = c.nibsscode
           and b.batch_id = p_batch_id
           and b.processing_status in ('11')
           and b.payment_channel_id in (2, 3)
           and b.bank_code not in ('032', '999032', '000018');
    end if;
  
    return c_result;
  
  end getPendingBatchItems;

  function updateBatchItems(p_batch_id          varchar2,
                            p_processing_status varchar2) return varchar2 as
  begin
    -- update batch item immediately after posting to API
    update transaction_batch_detail a
       set a.processing_status = p_processing_status
     where a.batch_id = p_batch_id
       and a.payment_channel_id in (2, 3)
       and a.processing_status in ('04')
       and a.bank_code not in ('032', '999032', '000018');
    return '00';
  end;

  function isThreadRunning(p_THREAD_id IN VARCHAR2) return varchar2 as
    v_found_flag    integer := 0;
    v_response_code varchar2(100);
    v_isRunning     varchar2(100);
    v_recordexist   INTEGER;
  begin
    v_response_code := 'N';
  
    select count(1)
      into v_recordexist
      from THREAD_LAST_RUN
     where THREAD_ID = p_THREAD_id;
    IF (v_recordexist = 0) THEN
      INSERT INTO THREAD_LAST_RUN
        (THREAD_ID, LAST_RUN_TIME)
      VALUES
        (p_THREAD_id, SYSDATE);
    
    END IF;
  
    select IS_RUNNING
      into v_isRunning
      from THREAD_LAST_RUN
     where THREAD_ID = p_THREAD_id;
    if (v_isRunning = 'N') THEN
      v_response_code := 'N';
    ELSE
    
      select count(1)
        into v_found_flag
        from THREAD_LAST_RUN a
       where THREAD_ID = p_THREAD_id
         AND ((SYSDATE - LAST_RUN_TIME) * 24 * 60) >= 5;
    
      if (v_found_flag > 0) then
        v_response_code := 'N';
      
      ELSE
        v_response_code := 'Y';
      END IF;
    END IF;
  
    IF (v_response_code = 'N') THEN
      UPDATE THREAD_LAST_RUN
         SET IS_RUNNING = 'Y'
       WHERE THREAD_ID = p_THREAD_id;
      COMMIT;
    END IF;
  
    return v_response_code;
  end;

  FUNCTION updatethreadlaststatus(v_threadid  IN VARCHAR2,
                                  v_runstatus IN VARCHAR2) RETURN VARCHAR2 IS
    v_recordid    VARCHAR2(100);
    v_recordexist INTEGER;
    -- v_err                 VARCHAR2 (3000);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
  BEGIN
    SET TRANSACTION READ WRITE;
    select count(1)
      into v_recordexist
      from THREAD_LAST_RUN
     where THREAD_ID = v_threadid;
    IF (v_recordexist > 0) THEN
      UPDATE THREAD_LAST_RUN
         SET IS_RUNNING = v_runstatus
       WHERE THREAD_ID = v_threadid;
    ELSE
      INSERT INTO THREAD_LAST_RUN
        (THREAD_ID, LAST_RUN_TIME, IS_RUNNING)
      VALUES
        (v_threadid, SYSDATE, v_runstatus);
    END IF;
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  
  END;

  function isThreadAlive(p_THREAD_id IN VARCHAR2, p_duration IN Integer)
    return varchar2 as
    v_found_flag    integer := 0;
    v_response_code varchar2(100);
  begin
    v_response_code := 'Y';
    select count(1)
      into v_found_flag
      from THREAD_LAST_RUN a
     where THREAD_ID = p_THREAD_id;
    -- (date1 - date2) * 24 * 60
    if (v_found_flag = 0) then
      v_response_code := 'N';
    
    else
      --v_response_code := '00';
      select count(1)
        into v_found_flag
        from THREAD_LAST_RUN a
       where THREAD_ID = p_THREAD_id
         AND ((SYSDATE - LAST_RUN_TIME) * 24 * 60) > p_duration;
    
      if (v_found_flag > 0) then
        v_response_code := 'N';
      
      end if;
    end if;
    return v_response_code;
  end;

  function updateBatchItemEnquiryStatus(p_batch_id             varchar2,
                                        p_batch_detail_id      varchar2,
                                        p_napsneft_ref         varchar2,
                                        p_napsneft_status_code varchar2,
                                        p_napsneft_status_msg  varchar2)
    return varchar2 as
    v_finalProcessingStatus varchar2(20) := '11';
  begin
    if p_napsneft_status_code = 'PAID' then
      v_finalProcessingStatus := '00';
    elsif p_napsneft_status_code in ('FAILED', 'UNPAID') then
      v_finalProcessingStatus := '07';
    end if;
    --FAILURE
  
    if v_finalProcessingStatus = '07' then
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS       = '13',
             ERROR_TRIAL_COUNT       = 0,
             ERROR_PROCESSING_STATUS = '10',
             TRANSACTION_STATUS      = 'FAILED',
             THIRDPARTY_SESSION_ID   = p_napsneft_ref,
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = p_napsneft_status_code,
             THIRDPARTY_RESPONSE_MESSAGE = p_napsneft_status_msg,
             
             FAILURE_REASON = p_napsneft_status_msg
      
       WHERE BATCH_DETAIL_ID = p_batch_detail_id;
    
    elsif v_finalProcessingStatus = '00' then
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS     = '00',
             THIRDPARTY_SESSION_ID = p_napsneft_ref,
             ERROR_TRIAL_COUNT     = 0,
             TRANSACTION_STATUS    = 'SUCCESSFUL',
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = p_napsneft_status_code,
             THIRDPARTY_RESPONSE_MESSAGE = p_napsneft_status_msg
      
       WHERE BATCH_DETAIL_ID = p_batch_detail_id;
    
    else
      update transaction_batch_detail a
         set a.processing_status         = v_finalProcessingStatus,
             THIRDPARTY_SESSION_ID       = p_napsneft_ref,
             THIRDPARTY_RESPONSE_CODE    = p_napsneft_status_code,
             THIRDPARTY_RESPONSE_MESSAGE = p_napsneft_status_msg
      
       where a.batch_id = p_batch_id
         and a.batch_detail_id = p_batch_detail_id;
    end if;
  
    return '00';
  end;

  function getCorporateRm(p_corp_id varchar) return sys_refcursor is
    o_refcursor               sys_refcursor;
    v_corp_default_account_no varchar2(20) := getCorporateDefaultAccount(p_corp_id);
  begin
    open o_refcursor for
      select stt.ac_desc,
             stt.cust_ac_no,
             mit.customer,
             -- mit.cust_mis_4 || ': ' || glt.code_desc || ' (' || em.MOBILE || ')' as RM
             glt.code_desc || ' (' || em.MOBILE || ')' as RM
        from mitm_customer_default          mit,
             gltm_mis_code                  glt,
             sttm_cust_account              stt,
             fcubslive.ubn_employee_details em
       where mit.cust_mis_4 = glt.mis_code
         and stt.cust_no = mit.customer
         and glt.mis_class = 'RM_CODE'
         and CUST_AC_NO = v_corp_default_account_no
         and mit.cust_mis_4 = em.EMP_NUMBER;
    return o_refcursor;
  end getCorporateRm;
  function getUserProfileByUsername2fa(p_corporate_id varchar2,
                                       p_username     varchar2)
    return sys_refcursor is
    c_refcursor         sys_refcursor;
    v_account_no        varchar2(100);
    v_corp_id           number;
    r_sttm_cust_account sttm_cust_account%rowtype;
  begin
    select corp_id
      into v_corp_id
      from corporate_profile a
     where lower(a.corporate_id) = lower(p_corporate_id)
       and corp_id <> 1;
    --v_account_no := getCorporateDefaultAccount(v_corp_id);
    v_account_no := getCorporateAc4TokenCharges(v_corp_id);
    select *
      into r_sttm_cust_account
      from sttm_cust_account a
     where cust_ac_no = v_account_no
       and auth_stat = 'A'
       and record_stat = 'O';
    open c_refcursor for
      select a.*,
             b.has_token,
             b.corporate_id,
             v_account_no account_number,
             r_sttm_cust_account.branch_code account_brn_code,
             'UBN_CIB' App_name,
             r_sttm_cust_account.ccy account_ccy
        from user_profile a, corporate_profile b
       where lower(username) = lower(p_username)
         and a.corp_id = b.corp_id
         and lower(b.corporate_id) = lower(p_corporate_id)
         and a.record_status_id in (1, 2);
    return c_refcursor;
  end getUserProfileByUsername2fa;

  FUNCTION getTokenOptions RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.token_option_id id,
             a.token_option name,
             a.token_option description,
             '' miscString1,
             0 miscInt
        from ref_token_options a;
    RETURN c_refcursor;
  END getTokenOptions;

  function getCorpUsersByApprovalLevel(p_corp_id        varchar2,
                                       p_approval_level integer)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    open c_result for
      select a.*,
             b.enable_verifier_token,
             b.enable_inputter_token,
             b.authorizer_token_flag,
             case b.corporate_type_id
               when 4 then
                'Y'
               else
                'N'
             end is_sme,
             --multiple
             b.posting_option_id,
             c.name              posting_option_desc
        from user_profile a, corporate_profile b, ref_posting_options c
       where a.corp_id = b.corp_id
         and nvl(b.posting_option_id, 2) = c.posting_option_id
         and a.record_Status_id in (1, 2)
         and b.corp_id = p_corp_id
         and (exists (select 1
                        from user_role x, roles y
                       where x.role_id = y.role_id
                         and a.user_id = x.user_id
                         and p_approval_level = 0
                         and y.role_type_id = 4) or exists
              (select 1
                 from user_role x, roles y
                where x.role_id = y.role_id
                  and a.user_id = x.user_id
                  and p_approval_level > 0
                  and y.role_type_id = 3));
  
    return c_result;
  
  end;

  function getUserFullnameById(p_user_id varchar2) return varchar2 as
    v_fullname varchar2(200);
  begin
    select a.first_name || ' ' || a.last_name
      into v_fullname
      from user_profile a
     where user_id = p_user_id;
    return v_fullname;
  
  end;

  FUNCTION getApprovedRequestsByUserId(p_user_id    IN VARCHAR2,
                                       p_start_date date,
                                       p_end_date   date)
    RETURN SYS_REFCURSOR as
  
    o_refcursor sys_refcursor;
  begin
  
    open o_refcursor for
    
      SELECT '' REQ_BATCH_ID,
             DR_ACCOUNT,
             a.REQUEST_TYPE_ID as REQUEST_TYPE_ID,
             a.LAST_MODIFIED_BY,
             a.TRANSACTION_TYPE_ID,
             a.APPROVAL_SCHEDULE_ID,
             a.CREATED_DATE,
             a.REQ_SCHEDULE_SUMMARY_ID,
             a.APPROVAL_LEVEL,
             a.REQUEST_TABLE_ID,
             x.APPROVED_DATE,
             VISIBLE,
             APPROVER_ROUTE_TYPEID,
             AMOUNT,
             a.ROUTE_SIGNATORY_ID,
             x.APPROVED_BY,
             EXPECTED_SIGNATORY_COUNT,
             a.CREATED_BY,
             ACTUAL_SIGNATORY_COUNT,
             TRANSACTION_DESCRIPTION,
             a.RECORD_STATUS_ID,
             a.LAST_MODIFIED_DATE,
             a.CORP_ID,
             x.APPROVAL_STATUS_ID,
             a.PARENT_TABLE_ID,
             BATCHID,
             a.PARENT_TABLE_NAME,
             EXPECTED_GROUP_APPROVER_ID,
             x.APPROVAL_COMMENT,
             EXPECTED_USER_APPROVER_ID,
             d.DESCRIPTION AS REQUEST_TYPE_DESC,
             b.NAME as TRANSACTION_TYPE_DESC,
             MENU_ID,
             (c.FIRST_NAME || ' ' || c.LAST_NAME) as CREATEDBYNAME,
             d.NAME AS CORPORATE_NAME,
             b.SHORT_NAME AS TRAN_TYPE_SHORT_NAME,
             a.MERCHANT_CORP_ID,
             x.approved_by,
             f.name Approval_Status_Desc
      
        FROM APPROVAL_SCHEDULES a
        join REF_REQUEST_TYPE d
          on d.REQUEST_TYPE_ID = a.REQUEST_TYPE_ID
        join REF_TRANSACTION_TYPE b
          on b.TRANSACTION_TYPE_ID = a.TRANSACTION_TYPE_ID
        join USER_PROFILE c
          on c.USER_ID = a.CREATED_BY
        JOIN CORPORATE_PROFILE d
          on d.corp_id = a.MERCHANT_CORP_ID
        join ref_approval_status f
          on a.approval_status_id = f.approval_status_id
      -- JOIN  REF_TRANSACTION_TYPE e on e.TRANSACTION_TYPE_ID=a.TRANSACTION_TYPE_ID
      -- where REQ_BATCH_ID = v_guids
        join req_approval_schedule_actions x
          on x.approval_schedule_id = a.approval_schedule_id
         and x.approved_by = p_user_id
         and trunc(x.approved_date) between trunc(p_start_date) and
             trunc(p_end_Date)
      
       ORDER BY a.request_type_id, A.CREATED_DATE asc;
  
    return o_refcursor;
  end getApprovedRequestsbyUserid;

  FUNCTION getNarrationOptions RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.option_id id,
             a.option_desc name,
             a.option_desc description,
             '' miscString1,
             0 miscInt
        from ref_narration_option a;
    RETURN c_refcursor;
  END getNarrationOptions;

  --  Phase2 Sprint1  =============================

FUNCTION stopChequeRequest(i_REQUEST_ID         number,
                                   i_CORP_ID            number,
                                   i_ACCOUNT_NO         varchar2,
                                  i_START_CHEQUE_NUMBER varchar2,
                                   i_END_CHEQUE_NUMBER varchar2,
                                   i_CREATED_BY       NUMBER,
                                   i_APPROVED_BY      NUMBER,
                                   i_LAST_MODIFIED_BY NUMBER,
                                   i_REQUEST_TYPE_ID  INTEGER,
                                   i_MENU_ID          integer,
                                   p_context_url      varchar2,
                                   p_ip_mac_address   varchar2,
                                   p_session_id       varchar2,
                                   p_auth_token_flag  char,
                                   p_auth_token_sno   varchar2,
                                   p_no_of_booklet   varchar2,
  p_no_of_leaflet   varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_check_validation_flag integer := 0;
  BEGIN
  
  
   --validate check number
  
    begin
    
      SELECT count(1)
        into v_check_validation_flag
        FROM catm_check_details ca
       WHERE account = i_ACCOUNT_NO
         AND check_no = lpad(i_START_CHEQUE_NUMBER, 8, '0')
         AND record_stat = 'O'
         AND auth_stat = 'A'
         AND NOT EXISTS (SELECT 1
                FROM catm_check_details
               WHERE check_no = ca.check_no
                 AND ca.account = account
                 AND status = 'U');
      if v_check_validation_flag = 0 then
        return 'Cheque Number does not exist.';
      end if;
    end;
  
    --end validate check number
  
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO STOP_CHEQUE_REQUESTS
        (REQUEST_ID,THREAD_ID,
         CORP_ID,
         ACCOUNT_NO,
         START_CHEQUE_NUMBER ,
         END_CHEQUE_NUMBER,
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID,NO_OF_LEAFLETS,

NO_OF_BOOKLETS)
      VALUES
        (v_recordid,THREAD_ID_SEQ.NEXTVAL,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_START_CHEQUE_NUMBER ,
         i_END_CHEQUE_NUMBER ,
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID,p_no_of_leaflet,
p_no_of_booklet);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'STOP-CHEQUE-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.stopChequeRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;


  FUNCTION createChequeBookRequest(i_REQUEST_ID         number,
                                   i_CORP_ID            number,
                                   i_ACCOUNT_NO         varchar2,
                                   i_NO_OF_LEAFLETS     number,
                                   i_NO_OF_BOOKLETS     number,
                                   i_DELIVERY_OPTION_ID number,
                                   i_COLLECTION_BRANCH  varchar2,
                                   i_RM_EMAIL           varchar2,
                                   
                                   i_CREATED_BY       NUMBER,
                                   i_APPROVED_BY      NUMBER,
                                   i_LAST_MODIFIED_BY NUMBER,
                                   i_REQUEST_TYPE_ID  INTEGER,
                                   i_MENU_ID          integer,
                                   p_context_url      varchar2,
                                   p_ip_mac_address   varchar2,
                                   p_session_id       varchar2,
                                   p_auth_token_flag  char,
                                   p_auth_token_sno   varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CHEQUE_BOOK_REQUESTS
        (REQUEST_ID,
         CORP_ID,
         ACCOUNT_NO,
         NO_OF_LEAFLETS,
         NO_OF_BOOKLETS,
         DELIVERY_OPTION_ID,
         COLLECTION_BRANCH,
         RM_EMAIL,
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_NO_OF_LEAFLETS,
         i_NO_OF_BOOKLETS,
         i_DELIVERY_OPTION_ID,
         i_COLLECTION_BRANCH,
         i_RM_EMAIL,
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CHEQUE-BOOK-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createChequeRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;

  FUNCTION createManagerChequeRequest(i_REQUEST_ID          number,
                                      i_CORP_ID             number,
                                      i_ACCOUNT_NO          varchar2,
                                      i_AMOUNT              number,
                                      i_BENEFICIARY_NAME    varchar2,
                                      i_DELIVERY_OPTION_ID  number,
                                      i_COLLECTION_BRANCH   varchar2,
                                      i_RM_EMAIL            varchar2,
                                      i_PURPOSE_OF_ISSUANCE varchar2,
                                      
                                      i_CREATED_BY       NUMBER,
                                      i_APPROVED_BY      NUMBER,
                                      i_LAST_MODIFIED_BY NUMBER,
                                      i_REQUEST_TYPE_ID  INTEGER,
                                      i_MENU_ID          integer,
                                      p_context_url      varchar2,
                                      p_ip_mac_address   varchar2,
                                      p_session_id       varchar2,
                                      p_auth_token_flag  char,
                                      p_auth_token_sno   varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    -- v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    -- SELECT MANAGERS_CHEQUE_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO MANAGERS_CHEQUE_REQUESTS
        (REQUEST_ID,
         CORP_ID,
         ACCOUNT_NO,
         AMOUNT,
         BENEFICIARY_NAME,
         DELIVERY_OPTION_ID,
         COLLECTION_BRANCH,
         RM_EMAIL,
         PURPOSE_OF_ISSUANCE,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_AMOUNT,
         i_BENEFICIARY_NAME,
         i_DELIVERY_OPTION_ID,
         i_COLLECTION_BRANCH,
         i_RM_EMAIL,
         i_PURPOSE_OF_ISSUANCE,
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        20,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'MANAGE-CHEQUE-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createManagerChequeRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;

  FUNCTION createChequeConfirmRequest(i_REQUEST_ID          NUMBER,
                                      i_CORP_ID             number,
                                      i_ACCOUNT_NO          varchar2,
                                      i_CHEQUE_NO           varchar2,
                                      i_AMOUNT              number,
                                      i_BENEFICIARY_NAME    varchar2,
                                      i_ISSUANCE_DATE       date,
                                      i_RM_EMAIL            varchar2,
                                      i_PURPOSE_OF_ISSUANCE varchar2,
                                      i_CREATED_BY          NUMBER,
                                      i_APPROVED_BY         NUMBER,
                                      i_LAST_MODIFIED_BY    NUMBER,
                                      i_REQUEST_TYPE_ID     INTEGER,
                                      i_MENU_ID             integer,
                                      p_context_url         varchar2,
                                      p_ip_mac_address      varchar2,
                                      p_session_id          varchar2,
                                      p_auth_token_flag     char,
                                      p_auth_token_sno      varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    -- v_requestid      NUMBER;
    v_approvalstatus        VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_check_validation_flag integer := 0;
  BEGIN
    -- SELECT CHEQUE_CONFIRM_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
  
    --validate check number
  
    begin
    
      SELECT count(1)
        into v_check_validation_flag
        FROM catm_check_details ca
       WHERE account = i_ACCOUNT_NO
         AND check_no = lpad(i_CHEQUE_NO, 8, '0')
         AND record_stat = 'O'
         AND auth_stat = 'A'
         AND NOT EXISTS (SELECT 1
                FROM catm_check_details
               WHERE check_no = ca.check_no
                 AND ca.account = account
                 AND status = 'U');
      if v_check_validation_flag = 0 then
        return '99~Cheque Number does not exist.';
      end if;
    end;
  
    --end validate check number
  
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CHEQUE_CONFIRMATION_REQUESTS
        (REQUEST_ID,
         CORP_ID,
         ACCOUNT_NO,
         CHEQUE_NO,
         AMOUNT,
         BENEFICIARY_NAME,
         ISSUANCE_DATE,
         RM_EMAIL,
         PURPOSE_OF_ISSUANCE,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_CHEQUE_NO,
         i_AMOUNT,
         i_BENEFICIARY_NAME,
         i_ISSUANCE_DATE,
         i_RM_EMAIL,
         i_PURPOSE_OF_ISSUANCE,
         
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        i_AMOUNT,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CHEQUE-CONFIRMATION-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createManagerChequeRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;

  function addTransactionScheduleDetails(p_BATCH_ID             IN VARCHAR2,
                                         p_AMOUNT               IN VARCHAR2,
                                         p_CR_ACCOUNT_NO        IN VARCHAR2,
                                         p_BENEFICIARY_ID       IN VARCHAR2,
                                         p_BANK_CODE            IN VARCHAR2,
                                         p_DR_ACCOUNT_NO        IN VARCHAR2,
                                         p_CREATED_BY           IN VARCHAR2,
                                         p_SCHEDULE_DATE        IN VARCHAR2,
                                         p_NARRATION            IN VARCHAR2,
                                         p_PAYMENT_TYPE_ID      IN VARCHAR2,
                                         p_BANK_NAME            IN VARCHAR2,
                                         p_CORP_ID              IN VARCHAR2,
                                         p_PAYMENT_CHANNEL_ID   IN VARCHAR2,
                                         p_MOBILE_NETWORK_ID    IN VARCHAR2,
                                         p_MOBILE_NUMBER        IN VARCHAR2,
                                         p_BILLER_CATEGORY      IN VARCHAR2,
                                         p_BENEFICIARY_EMAIL    IN VARCHAR2,
                                         p_BILLER_NAME          IN VARCHAR2,
                                         p_CHARGE_AMOUNT        IN VARCHAR2,
                                         p_beneficiary_name     varchar2, --#sprint2
                                         p_uploadbatchid        varchar2, --correct
                                         p_nameenquiry_name     varchar2, --correct
                                         p_bvn                  varchar2,
                                         p_sessioid             varchar2,
                                         p_kyclevel             varchar2,
                                         p_namevalidationstatus varchar2)
    return varchar2 IS
  
    v_err_message         VARCHAR2(3000);
    v_response_code       varchar2(300);
    v_isinterbanktransfer VARCHAR2(100);
    v_paymentcode         VARCHAR2(100);
    --v_feeAmt  VARCHAR2(100);
    v_suspense_account VARCHAR2(100);
    v_fee              VARCHAR2(100);
    v_incomeaccount    VARCHAR2(100);
    v_bank_code        VARCHAR2(100);
    v_neresponsecode   VARCHAR2(100);
    v_feereturnval     VARCHAR2(100);
    v_maintableid      NUMBER;
    v_chargeamt        NUMBER;
    v_tranamt          NUMBER;
    v_reqid            NUMBER;
    v_approvalstatus   VARCHAR2(2);
    v_found_flag       int := 0;
  
    v_neftnapsfeeExist NUMBER;
    v_neftnapscharge   NUMBER;
  BEGIN
    v_isinterbanktransfer := 'N';
    v_neresponsecode      := '99';
    v_bank_code           := p_BANK_CODE;
    begin
      if (to_number(NVL(p_CHARGE_AMOUNT, '0')) < 0) then
        v_response_code := 'INVALID FEE FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
      
      end if;
    EXCEPTION
      WHEN VALUE_ERROR THEN
        --v_response_code := '16';
        v_response_code := 'INVALID FEE FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
    end;
  
    -- p_CHARGE_AMOUNT := NVL( p_CHARGE_AMOUNT, '0' );
    --- amount validation
    begin
      if (to_number(p_AMOUNT) <= 0) then
        v_response_code := 'INVALID AMOUNT FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
      
      end if;
    EXCEPTION
      WHEN VALUE_ERROR THEN
        --v_response_code := '16';
        v_response_code := 'INVALID AMOUNT FOR CR ACCOUNT/CUSTOM FIELD ' ||
                           p_CR_ACCOUNT_NO;
    end;
  
    v_chargeamt := NVL(p_CHARGE_AMOUNT, '0');
  
    IF ((p_PAYMENT_CHANNEL_ID in ('2', '3'))) then
      --neft/naps
    
      select count(1)
        into v_neftnapsfeeExist
        from apps.ONEFT_COMMISSION_SETUP
       where p_AMOUNT >= MIN_AMOUNT
         and p_AMOUNT <= MAX_AMOUNT;
      if (v_neftnapsfeeExist > 0) then
        select COMMISSION
          into v_neftnapscharge
          from apps.ONEFT_COMMISSION_SETUP
         where p_AMOUNT >= MIN_AMOUNT
           and p_AMOUNT <= MAX_AMOUNT;
        v_chargeamt := v_chargeamt + v_neftnapscharge;
      else
        v_response_code := 'Amount out of range for Neft/Naps fee';
        return v_response_code;
      end if;
    end if;
    --insert into IDVALID values(p_PAYMENT_CHANNEL_ID,p_PAYMENT_CHANNEL_ID);
    IF ((p_PAYMENT_CHANNEL_ID in ('1', '4', '5')) and
       (p_BANK_CODE not in ('032', '000018'))) THEN
      --UIP,QUICKTELLER ,REMITTA
      select CHANNEL_CODE
        into v_paymentcode
        from REF_PAYMENT_CHANNELS
       where CHANNEL_ID = p_PAYMENT_CHANNEL_ID;
    
      v_feereturnval := PAYMENTS.mdw_ibank_posting_pkg.get_fee_and_susp_nib(v_paymentcode,
                                                                            p_AMOUNT,
                                                                            v_suspense_account,
                                                                            v_fee,
                                                                            
                                                                            v_incomeaccount);
    
      IF (p_PAYMENT_CHANNEL_ID in ('1')) THEN
        v_chargeamt := v_chargeamt + v_fee;
      END IF;
    
      -- v_chargeamt    := v_chargeamt + v_fee;
    END IF;
    --- series of validation should go in here
    if (p_BANK_CODE is null or trim(p_BANK_CODE) = '' or
       length(p_bank_code) not in (3, 6)) then
      --v_response_code := '16';
      v_response_code := 'INVALID BANK CODE FOR CR ACCOUNT ' ||
                         p_CR_ACCOUNT_NO;
      -- o_response_message:='Invalid Bank Code';
      return v_response_code;
    else
    
      IF (p_BANK_CODE not in ('032', '000018')) THEN
        v_isinterbanktransfer := 'Y';
      END IF;
    
      -- if(length(p_bank_code) in(3)) then
      if ((length(p_bank_code) in (3)) and (p_bank_code not in ('N/A'))) then
        --corretion
        select NIBSSCODE
          into v_bank_code
          from newibank.RIB_BANKS_LIST
        
         WHERE DEL_FLG = 'N'
           and BNK_CODE = p_bank_code;
      end if;
      /* if (v_isinterbanktransfer = 'N') then
        v_response_code := validateAccount(p_CR_ACCOUNT_NO);
        if (v_response_code <> '00') then
          return v_response_code;
        end if
      else*/
      if p_CR_ACCOUNT_NO = null or p_CR_ACCOUNT_NO = '' --or length(p_CR_ACCOUNT_NO) <> 10 
       then
        --v_response_code := '07';
        v_response_code := 'INVALID CR ACCOUNT / CUSTOM FIELD ';
        return v_response_code;
      end if;
      -- end if;
    
    end if;
    --- validation ends here
    if ((v_neresponsecode is not null) and length(v_neresponsecode) > 1) then
      v_neresponsecode := '00';
    end if;
    --THREAD_ID_SEQ
    -- begin
    INSERT INTO TRANSACTION_SCHEDULE_DETAIL
      (CREATED_DATE,
       THREAD_ID,
       BATCH_ID,
       AMOUNT,
       CR_ACCOUNT_NO,
       BENEFICIARY_ID,
       BANK_CODE,
       DR_ACCOUNT_NO,
       CREATED_BY,
       SCHEDULE_DATE,
       NARRATION,
       PROCESSING_STATUS,
       APPROVAL_STATUS_ID,
       PAYMENT_TYPE_ID,
       BANK_NAME,
       ISINTERBANK_TRANSFER,
       CORP_ID,
       PAYMENT_CHANNEL_ID,
       biller_product_type,
       MOBILE_NUMBER,
       BILLER_CATEGORY,
       BENEFICIARY_EMAIL,
       BILLER_NAME,
       BILLER_CUSTOM_FIELD_VALUE,
       CHARGE_AMOUNT,
       beneficiary_name,
       NE_BVN_NO,
       NE_CUST_NAME,
       NE_RESPONSE_CODE,
       NE_SESSION_ID,
       NE_KYCLEVEL,
       NAME_VALIDATION_MATCH_STATUS
       
       )
    VALUES
      (SYSDATE,
       THREAD_ID_SEQ.NEXTVAL,
       p_BATCH_ID,
       p_AMOUNT,
       p_CR_ACCOUNT_NO,
       p_BENEFICIARY_ID,
       v_bank_code,
       p_DR_ACCOUNT_NO,
       p_CREATED_BY,
       TO_DATE(p_SCHEDULE_DATE, 'DD-MM-YYYY'),
       p_NARRATION,
       21,
       1,
       p_PAYMENT_TYPE_ID,
       p_BANK_NAME,
       v_isinterbanktransfer,
       p_CORP_ID,
       p_PAYMENT_CHANNEL_ID,
       p_MOBILE_NETWORK_ID,
       p_MOBILE_NUMBER,
       p_BILLER_CATEGORY,
       p_BENEFICIARY_EMAIL,
       p_BILLER_NAME,
       p_CR_ACCOUNT_NO,
       v_chargeamt,
       p_beneficiary_name,
       p_bvn,
       p_nameenquiry_name,
       v_neresponsecode,
       p_sessioid,
       p_kyclevel,
       p_namevalidationstatus);
  
    if ((p_uploadbatchid is not null) and length(p_uploadbatchid) > 2) then
      --CORRECT
      update TRANSACTION_UPLOAD_DETAIL
         set TRANSACTION_INITIATED = 'Y',
             LAST_MODIFIED_BY      = p_CREATED_BY,
             LAST_MODIFIED_DATE    = SYSDATE
       WHERE BATCH_DETAIL_ID = p_uploadbatchid;
    
    end if;
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.TRANSACTION_SCHEDULE_DETAIL');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  FUNCTION addTransactionScheduleSummary(p_DR_ACCOUNT         IN VARCHAR2,
                                         p_CREATED_BY         IN VARCHAR2,
                                         p_CORP_ID            IN VARCHAR2,
                                         p_BATCH_ID           IN VARCHAR2,
                                         p_SCHEDULE_DATE      IN VARCHAR2,
                                         p_NO_OF_RECORD       IN VARCHAR2,
                                         p_TOTAL_AMOUNT       IN VARCHAR2,
                                         p_PAYMENT_TYPE_ID    IN VARCHAR2,
                                         p_MENU_ID            IN VARCHAR2,
                                         p_CHARGE_OPTION_ID   IN VARCHAR2,
                                         p_BATCH_DESCRIPTION  IN VARCHAR2,
                                         p_POSTING_OPTIONID   IN VARCHAR2,
                                         p_payment_channel_id varchar2,
                                         
                                         p_upload_filename     varchar2, --#sprint2
                                         p_auth_token_flag     char,
                                         p_auth_token_sno      varchar2,
                                         p_context_url         varchar2,
                                         p_ip_mac_address      varchar2,
                                         p_session_id          varchar2,
                                         p_schedule_type_id    varchar2,
                                         p_schedule_option_id  varchar2,
                                         p_schedule_start_date varchar2,
                                         p_schedule_end_date   varchar2,
                                         p_sweep_variable      varchar2,
                                         p_sweep_option_id     varchar2)
    RETURN VARCHAR2 IS
    v_err_message             VARCHAR2(3000);
    v_response                VARCHAR2(100);
    v_recordstatus            VARCHAR2(2);
    v_maintableid             NUMBER;
    v_reqid                   NUMBER;
    v_approvalstatus          VARCHAR2(2);
    v_branchcode              VARCHAR2(10);
    v_holdingacctid           VARCHAR2(15);
    v_holdingacctno           VARCHAR2(15);
    v_holdingacctbranchcode   VARCHAR2(15);
    v_holdingacctcurrencycode VARCHAR2(15);
    v_holdingaccttype         VARCHAR2(15);
    v_postingoption           VARCHAR2(10);
    v_acctCurrency            VARCHAR2(10);
    v_transitpostref          VARCHAR2(200);
    --TRANSIT_POSTREF
    v_chargeapply               VARCHAR2(2);
    v_validatetoken             NUMBER;
    v_istokenused               VARCHAR2(20);
    v_chargeamt                 NUMBER;
    v_totalchargeamt            NUMBER;
    v_endate                    DATE;
    v_chargediscountexist       NUMBER;
    v_chargediscountpercent     NUMBER;
    v_chargediscountamt         NUMBER;
    v_quicktellercount          NUMBER;
    v_holdingacctexist          NUMBER;
    v_corporate_limit           corporate_limits%rowtype;
    v_actual_daily_limit_amount number;
    --multidebit
    v_recordid           VARCHAR2(20);
    v_threadid           NUMBER;
    v_pendinguploadexist NUMBER;
  BEGIN
    IF (p_schedule_end_date is null) then
      v_endate := null;
    else
      v_endate := TO_DATE(p_schedule_end_date, 'DD-MM-YYYY');
    end if;
    v_istokenused   := 'N';
    v_response      := validateAccount(p_DR_ACCOUNT);
    v_postingoption := p_POSTING_OPTIONID;
  
    if (p_payment_channel_id in ('2', '3')) then
      --neft/naps
      v_postingoption := '2';
    end if;
    begin
      v_corporate_limit := getCorporateLimitSetup(p_CORP_ID);
    exception
      when no_Data_found then
      
        return '99~~No limit found for the corporate and no default limit maintained';
      
    end;
  
    /*select sum(a.total_tran_amount)
     into v_actual_daily_limit_amount
     from TRANSACTION_SCHEDULE_SUMMARY a
    where a.corp_id = p_CORP_ID
      and trunc(a.created_date) = trunc(sysdate);*/
  
    if (p_TOTAL_AMOUNT > v_corporate_limit.transaction_limit_amount) then
    
      return '99~~Transaction Limit exceed by ' ||(p_TOTAL_AMOUNT -
                                                   v_corporate_limit.transaction_limit_amount);
    
      -- elsif ((v_actual_daily_limit_amount + p_TOTAL_AMOUNT) >
    elsif ((p_TOTAL_AMOUNT) > v_corporate_limit.daily_limit_amount) then
      /*return '99~~Daily Limit exceed by ' ||((v_actual_daily_limit_amount +
      p_TOTAL_AMOUNT) -
      v_corporate_limit.daily_limit_amount);*/
      return '99~~Daily Limit exceed by ' ||((p_TOTAL_AMOUNT) -
                                             v_corporate_limit.daily_limit_amount);
    elsif (v_response is null or v_response = '' or v_response <> '00') then
      return v_response;
    end if;
    -- SET TRANSACTION READ WRITE;
    --v_transitpostref :='';
    --DR_ACCOUNT_CURRENCY_CODE
    -- v_chargeamt :=0.0;
    --v_chargediscountamt :=0.0;
    select BRANCH_CODE, CCY
      into v_branchcode, v_acctCurrency
      from sttm_cust_account
     where cust_ac_no = p_DR_ACCOUNT
       and auth_stat = 'A'
       and record_stat = 'O';
    select NVL(HOLDING_ACCOUNT_ID, '0')
      into v_holdingacctid
      from CORPORATE_PROFILE
     where corp_id = p_CORP_ID;
    --#sprint2
    IF (v_holdingacctid = '0') THEN
      SELECT COUNT(1)
        INTO v_holdingacctexist
        FROM HOLDING_ACCOUNTS
       WHERE IS_DEFAULT_HOLDING_ACCT = 'Y'
         AND ROWNUM < 2;
      IF (v_holdingacctexist > 0) THEN
        SELECT ACCOUNT_NO, ACCOUNT_TYPE, BRANCH_CODE, CURRENCY_CODE
          INTO v_holdingacctno,
               v_holdingaccttype,
               v_holdingacctbranchcode,
               v_holdingacctcurrencycode
          FROM HOLDING_ACCOUNTS
         WHERE IS_DEFAULT_HOLDING_ACCT = 'Y'
           AND ROWNUM < 2;
      ELSE
        return 'HOLDING ACCOUNT NOT YET MAINTAINED FOR LUMPSUM DEBIT. PLEASE CONTACT THE UNION BANK CONTACT CENTER';
      END IF;
    ELSE
      SELECT COUNT(1)
        INTO v_holdingacctexist
        FROM HOLDING_ACCOUNTS
       WHERE HOLDING_ACCOUNT_ID = v_holdingacctid;
      IF (v_holdingacctexist > 0) THEN
        SELECT ACCOUNT_NO, ACCOUNT_TYPE, BRANCH_CODE, CURRENCY_CODE
          INTO v_holdingacctno,
               v_holdingaccttype,
               v_holdingacctbranchcode,
               v_holdingacctcurrencycode
          FROM HOLDING_ACCOUNTS
         WHERE HOLDING_ACCOUNT_ID = v_holdingacctid;
      
      ELSE
        return 'HOLDING ACCOUNT NOT YET MAINTAINED FOR LUMPSUM DEBIT. PLEASE CONTACT THE UNION BANK CONTACT CENTER';
      
      END IF;
    END IF;
  
    IF (v_postingoption = '2') THEN
      --v_holdingacctexist
      --#sprint2
    
      v_transitpostref := 'CIB' || p_BATCH_ID;
    END IF;
  
    if (p_auth_token_sno is not null and length(p_auth_token_sno) > 0) then
      select count(1)
        into v_validatetoken
        from TOKEN_VALIDATION_LOG
       where VALIDATION_REF = p_auth_token_sno
         and RESPONSE_CODE = '1'
         and ((sysdate - CREATED_DATE) * 24 * 60 * 60) < 120;
      if (v_validatetoken = 0) then
        v_response := '99~~Token has expired or invalid. Kindly use another token and try again.'; --INVALID APPROVAL OPTION
        RETURN v_response;
      else
        v_istokenused := 'Y';
      end if;
    end if;
    --multidebit
  
    select THREAD_ID_SEQ.NEXTVAL into v_threadid from dual;
  
    IF (v_postingoption = '1') THEN
      Select count(1)
        into v_pendinguploadexist
        from TRANSACTION_SCHEDULE_SUMMARY
       where CORP_ID = p_CORP_ID
         and DR_ACCOUNT = p_DR_ACCOUNT
         and POSTING_OPTION_ID = 1
         and PROCESSING_STATUS = '22';
      if (v_pendinguploadexist > 0) then
        select thread_id
          into v_threadid
          from TRANSACTION_SCHEDULE_SUMMARY
         where CORP_ID = p_CORP_ID
           and DR_ACCOUNT = p_DR_ACCOUNT
           and POSTING_OPTION_ID = 1
           and PROCESSING_STATUS = '22'
           and rownum < 2;
      end if;
    
    END IF;
  
    INSERT INTO TRANSACTION_SCHEDULE_SUMMARY
      (HOLDING_ACCT_BRANCH_CODE,
       HOLDING_ACCT_CURRENCY_CODE,
       HOLDING_ACCT_TYPE,
       HOLDING_ACCT_NO,
       POSTING_OPTION_ID,
       DR_ACCOUNT,
       CREATED_BY,
       CREATED_DATE,
       CORP_ID,
       APPROVAL_STATUS_ID,
       BATCH_ID,
       SCHEDULE_DATE,
       NO_OF_RECORD,
       TOTAL_TRAN_AMOUNT,
       PAYMENT_TYPE_ID,
       DR_ACCOUNT_BRANCH_CODE,
       DR_ACCOUNT_CURRENCY_CODE,
       THREAD_ID,
       TRANSIT_POSTREF,
       BATCH_DESCRIPTION,
       original_total_tran_amount,
       payment_channel_id,
       upload_filename, --#sprint2
       auth_token_flag,
       auth_token_sno,
       SCHEDULE_TYPE_ID,
       SCHEDULE_OPTION_ID,
       SCHEDULE_START_DATE,
       SCHEDULE_END_DATE,
       SWEEP_VARIABLE,
       SWEEP_OPTION_ID)
    VALUES
      (v_holdingacctbranchcode,
       v_holdingacctcurrencycode,
       v_holdingaccttype,
       v_holdingacctno,
       v_postingoption,
       p_DR_ACCOUNT,
       p_CREATED_BY,
       SYSDATE,
       p_CORP_ID,
       1,
       p_BATCH_ID,
       --TO_DATE( SUBSTR(p_SCHEDULE_DATE, 0, 10), 'YYYY-MM-DD'),
       TO_DATE(p_SCHEDULE_DATE, 'DD-MM-YYYY'),
       p_NO_OF_RECORD,
       p_TOTAL_AMOUNT,
       p_PAYMENT_TYPE_ID,
       v_branchcode,
       v_acctCurrency,
       v_threadid,
       -- THREAD_ID_SEQ.NEXTVAL,
       v_transitpostref,
       p_BATCH_DESCRIPTION,
       p_TOTAL_AMOUNT,
       p_payment_channel_id,
       p_upload_filename, --#sprint2
       v_istokenused,
       p_auth_token_sno,
       p_schedule_type_id,
       p_schedule_option_id,
       
       TO_DATE(p_schedule_start_date, 'DD-MM-YYYY'),
       v_endate,
       p_sweep_variable,
       p_sweep_option_id);
  
    select TRAN_SCHED_SUMMARY_REQ_SEQ.NEXTVAL into v_recordid from dual;
  
    insert INTO TRANSACTION_SCHED_SUMMARY_REQ
      (CORP_ID,
       CREATED_BY,
       LAST_MODIFIED_BY,
       CREATED_DATE,
       LAST_MODIFIED_DATE,
       REQUEST_TABLE_ID,
       APPROVAL_STATUS_ID,
       REQUEST_TYPE_ID,
       
       PARENT_TABLE_ID,
       auth_token_flag,
       AUTH_TOKEN_SNO)
    VALUES
      (p_CORP_ID,
       p_CREATED_BY,
       p_CREATED_BY,
       sysdate,
       sysdate,
       v_recordid,
       '1',
       '1',
       
       p_BATCH_ID,
       v_istokenused,
       p_auth_token_sno);
  
    IF (v_postingoption = '1') THEN
      update TRANSACTION_SCHEDULE_DETAIL
         set THREAD_ID = v_threadid
       where BATCH_ID = p_BATCH_ID;
    END IF;
  
    if ((p_upload_filename is not null) and length(p_upload_filename) > 1) then
      update TRANSACTION_UPLOAD_SUMMARY
         set TRANSACTION_INITIATED = 'Y',
             LAST_MODIFIED_BY      = p_CREATED_BY,
             LAST_MODIFIED_DATE    = SYSDATE
       WHERE BATCH_ID = p_upload_filename;
    
    end if;
    select count(1)
      into v_quicktellercount
      from TRANSACTION_SCHEDULE_DETAIL
     where BATCH_ID = p_BATCH_ID
       and PAYMENT_CHANNEL_ID = 4; --quick teller
  
    IF (v_quicktellercount > 0) THEN
    
      update TRANSACTION_SCHEDULE_DETAIL
         set POST_REF_NO = 'CIBQT' || (TO_CHAR(SYSDATE, 'YYMMDDHH24MMSS')) ||
                           LPAD(PAYMENTS.bills_pay_ref_id_seq.NEXTVAL,
                                12,
                                '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
         AND PAYMENT_CHANNEL_ID = 4; --quick teller
    END IF;
    IF (v_postingoption = '2') THEN
      --SINGLE DEBIT
      UPDATE TRANSACTION_SCHEDULE_DETAIL
         SET DR_ACCOUNT_NO = v_holdingacctno,
             --POST_REF_NO   = 'B/' || BATCH_DETAIL_ID || '/' || p_BATCH_ID
             POST_REF_NO = 'CIB' || BATCH_DETAIL_ID
       WHERE BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'N';
    
      update TRANSACTION_SCHEDULE_DETAIL
         set DR_ACCOUNT_NO = v_holdingacctno,
             POST_REF_NO   = 'CIB000018' || TO_CHAR(SYSDATE, 'YYMMDDHHMMSS') ||
                             LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL,
                                  12,
                                  -- '0') || '/' || p_BATCH_ID
                                  '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
         AND PAYMENT_CHANNEL_ID in (1, 2, 3); --NIP,NEFT,NAPS --#sprint2
    
    ELSIF (v_postingoption = '1') THEN
      --MULTIPLE DEBIT
      UPDATE TRANSACTION_SCHEDULE_DETAIL
         SET POST_REF_NO = 'CIB' || BATCH_DETAIL_ID
       WHERE BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'N';
    
      update TRANSACTION_SCHEDULE_DETAIL
         set POST_REF_NO = 'CIB000018' || TO_CHAR(SYSDATE, 'YYMMDDHHMMSS') ||
                           LPAD(PAYMENTS.nibbs_sessionid_seq.NEXTVAL,
                                12,
                                '0')
       where BATCH_ID = p_BATCH_ID
         AND ISINTERBANK_TRANSFER = 'Y'
         AND PAYMENT_CHANNEL_ID in (1, 2, 3); --NIP,NEFT,NAPS --#sprint2
    END IF;
    --v_holdingacctno
  
    select CHARGE_APPLY, CHARGE_AMOUNT
      into v_chargeapply, v_chargeamt
      from REF_PAYMENT_TYPES
     where PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID;
    --IF (v_chargeapply = 'Y') THEN
    select count(1)
      into v_chargediscountexist
      from CORPORATE_DISCOUNTS
     where CORP_ID = p_CORP_ID
       and PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID
       AND RECORD_STATUS_ID = 2
       AND APPROVAL_STATUS_ID = 2;
    IF (v_chargediscountexist > 0) THEN
      select PERCENTAGE_DISCOUNT
        into v_chargediscountpercent
        from CORPORATE_DISCOUNTS
       where CORP_ID = p_CORP_ID
         and PAYMENT_TYPE_ID = p_PAYMENT_TYPE_ID
         AND RECORD_STATUS_ID = 2
         AND APPROVAL_STATUS_ID = 2;
      v_chargediscountamt := ((v_chargediscountpercent / 100) * v_chargeamt);
      v_chargeamt         := (v_chargeamt - v_chargediscountamt);
    END IF;
    IF (p_CHARGE_OPTION_ID = '1') THEN
      --SENDER TO PAY
      UPDATE TRANSACTION_SCHEDULE_DETAIL
         SET CHARGE_AMOUNT =
             (CHARGE_AMOUNT + v_chargeamt)
       WHERE BATCH_ID = p_BATCH_ID;
    ELSIF (p_CHARGE_OPTION_ID = '2') THEN
      -- BENEFICIARY TO PAY
      UPDATE TRANSACTION_SCHEDULE_DETAIL
         SET CHARGE_AMOUNT =
             (CHARGE_AMOUNT + v_chargeamt),
             AMOUNT       =
             (AMOUNT - (CHARGE_AMOUNT + v_chargeamt))
       WHERE BATCH_ID = p_BATCH_ID;
    END IF;
    SELECT SUM(CHARGE_AMOUNT)
      into v_totalchargeamt
      FROM TRANSACTION_SCHEDULE_DETAIL
     WHERE BATCH_ID = p_BATCH_ID;
  
    IF (p_CHARGE_OPTION_ID = '1') THEN
      --SENDER TO PAY
      UPDATE TRANSACTION_SCHEDULE_SUMMARY a
         SET TOTAL_CHARGE_AMT            = v_totalchargeamt,
             a.original_total_charge_amt = v_totalchargeamt,
             CUMULATIVE_AMOUNT          =
             (v_totalchargeamt + TOTAL_TRAN_AMOUNT),
             original_CUMULATIVE_AMOUNT =
             (v_totalchargeamt + TOTAL_TRAN_AMOUNT)
       WHERE BATCH_ID = p_BATCH_ID;
    ELSIF (p_CHARGE_OPTION_ID = '2') THEN
      -- BENEFICIARY TO PAY
      UPDATE TRANSACTION_SCHEDULE_SUMMARY a
         SET TOTAL_CHARGE_AMT             = v_totalchargeamt,
             a.original_total_charge_amt  = v_totalchargeamt,
             TOTAL_TRAN_AMOUNT           =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             a.original_total_tran_amount =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             CUMULATIVE_AMOUNT           =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt),
             original_CUMULATIVE_AMOUNT  =
             (TOTAL_TRAN_AMOUNT - v_totalchargeamt)
       WHERE BATCH_ID = p_BATCH_ID;
    END IF;
  
    -- END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest(p_DR_ACCOUNT,
                                                        p_CREATED_BY,
                                                        '122',
                                                        '1',
                                                        v_recordid,
                                                        p_TOTAL_AMOUNT,
                                                        p_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'TRANSACTION', --event category
                   'batchid~' || p_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   p_MENU_ID,
                   1,
                   v_response,
                   p_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      INSERT INTO rib_sr_error_log
        (error_date, error_msg, error_point)
      VALUES
        (SYSDATE,
         DBMS_UTILITY.format_error_backtrace || v_err_message,
         'CIBANK.TRANSACTION_SCHEDULE_SUMMARY');
    
      COMMIT;
      v_response := getFriendlyExceptionMessage(v_err_message, p_MENU_ID);
      RETURN v_response;
  END;

  function addTransactionScheduleCalendar(
                                          
                                          p_SCHEDULE_SECOND    IN VARCHAR2,
                                          p_SCHEDULE_YEAR      IN VARCHAR2,
                                          p_SCHEDULE_HOUR      IN VARCHAR2,
                                          p_SCHEDULE_MINUTE    IN VARCHAR2,
                                          p_SCHEDULE_DAY       IN VARCHAR2,
                                          p_SCHEDULE_MONTH     IN VARCHAR2,
                                          p_SCHEDULE_TIME      IN VARCHAR2,
                                          p_CORP_ID            IN VARCHAR2,
                                          p_BATCH_ID           IN VARCHAR2,
                                          p_SCHEDULE_OPTION_ID IN VARCHAR2)
    return varchar2 IS
  
    v_err_message     VARCHAR2(3000);
    v_response_code   varchar2(300);
    v_SCHEDULE_SECOND varchar2(50);
    v_SCHEDULE_YEAR   varchar2(50);
    v_SCHEDULE_MINUTE varchar2(50);
    v_SCHEDULE_DAY    varchar2(50);
    v_SCHEDULE_MONTH  varchar2(50);
  BEGIN
  
    v_SCHEDULE_SECOND := p_SCHEDULE_SECOND;
    v_SCHEDULE_YEAR   := p_SCHEDULE_YEAR;
    v_SCHEDULE_MINUTE := p_SCHEDULE_MINUTE;
    v_SCHEDULE_DAY    := p_SCHEDULE_DAY;
    v_SCHEDULE_MONTH  := p_SCHEDULE_MONTH;
    if (p_SCHEDULE_SECOND = '0') then
      v_SCHEDULE_SECOND := null;
    end if;
    if (p_SCHEDULE_YEAR = '0') then
      v_SCHEDULE_YEAR := null;
    end if;
    if (p_SCHEDULE_MINUTE = '0') then
      v_SCHEDULE_MINUTE := null;
    end if;
    if (p_SCHEDULE_DAY = '0') then
      v_SCHEDULE_DAY := null;
    end if;
    if (p_SCHEDULE_MONTH = '0') then
      v_SCHEDULE_MONTH := null;
    end if;
    INSERT INTO TRANSACTION_SCHEDULE_CALENDAR
      (SCHEDULE_SECOND,
       SCHEDULE_YEAR,
       SCHEDULE_HOUR,
       SCHEDULE_MINUTE,
       SCHEDULE_DAY,
       SCHEDULE_MONTH,
       SCHEDULE_TIME,
       CORP_ID,
       BATCH_ID,
       SCHEDULE_OPTION_ID)
    VALUES
      (v_SCHEDULE_SECOND,
       v_SCHEDULE_YEAR,
       p_SCHEDULE_HOUR,
       v_SCHEDULE_MINUTE,
       v_SCHEDULE_DAY,
       v_SCHEDULE_MONTH,
       p_SCHEDULE_TIME,
       p_CORP_ID,
       p_BATCH_ID,
       p_SCHEDULE_OPTION_ID);
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.TRANSACTION_SCHEDULE_CALENDAR');
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  function getDeliveryOptions return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    open c_result for
      select * from ref_delivery_options;
    return c_result;
  
  end getDeliveryOptions;

  function getServiceRequestStatus return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    open c_result for
    
      select 0 id, 'ALL' name, 'ALL' description
        from dual
      union all
      select *
        from Ref_Service_Request_Status;
    return c_result;
  
  end getServiceRequestStatus;

  function getServiceRequests(p_corp_id           number,
                              p_service_status_id number,
                              p_start_date        date,
                              p_end_date          date) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select x.request_id,
             m.short_name Request_Type,
             y.name corporate_name,
             z.name request_status,
             x.request_details,
             x.approval_date,
             x.service_request_type_id,
             '<a href ="javascript:void(0)" class="quick-view-btn" data-rtype="' ||
              service_request_type_id || '" data-id="' || request_id || '~' ||
              service_request_type_id || '" id ="btn' || request_id ||
              '"> Action</a>
                                                    <img id="quikloadeux' ||
              request_id ||
             --ui changed menu to detail
              '" src="${pageContext.request.contextPath}/img/loader.gif" style="display:none;position:relative;width:30px;height:30px"/>' Detail
      
        from (select 27                  service_request_type_id,
                     a.request_id,
                     a.corp_id,
                     a.account_no        request_details,
                     a.approval_date,
                     a.request_status_id
                from cheque_book_requests a
               where a.approval_status_id = 2
                 and (a.corp_id = p_corp_id or p_corp_id = 0)
                 and (a.request_status_id = p_service_status_id or
                     p_service_status_id = 0)
              union all
              select 30                  service_request_type_id,
                     a.request_id,
                     a.corp_id,
                     a.account_no        request_details,
                     a.approval_date,
                     a.request_status_id
                from cheque_confirmation_requests a
               where a.approval_status_id = 2
                 and (a.corp_id = p_corp_id or p_corp_id = 0)
                 and (a.request_status_id = p_service_status_id or
                     p_service_status_id = 0)
              union all
              select 28                  service_request_type_id,
                     a.request_id,
                     a.corp_id,
                     a.account_no        request_details,
                     a.approval_date,
                     a.request_status_id
                from managers_cheque_requests a
               where a.approval_status_id = 2
                 and (a.corp_id = p_corp_id or p_corp_id = 0)
                 and (a.request_status_id = p_service_status_id or
                     p_service_status_id = 0)
              union all
              select 33 service_request_type_id,
                     a.service_request_id request_id,
                     a.corp_id,
                     a.card_type || ' ' || a.card_pan || ' ' ||
                     a.status_flag request_details,
                     a.approval_date,
                     a.request_status_id
                from change_card_Status_requests a
               where a.approval_status_id = 2
                 and (a.corp_id = p_corp_id or p_corp_id = 0)
                 and (a.request_status_id = p_service_status_id or
                     p_service_status_id = 0)
              union all
              select 34 service_request_type_id,
                     a.service_request_id request_id,
                     a.corp_id,
                     a.card_type || ' ' || a.card_pan || ' ' || a.limit_type request_details,
                     a.approval_date,
                     a.request_status_id
                from set_card_limit_requests a
               where a.approval_status_id = 2
                 and (a.corp_id = p_corp_id or p_corp_id = 0)
                 and (a.request_status_id = p_service_status_id or
                     p_service_status_id = 0)
              
              union all
              select 40 service_request_type_id,
                     a.fx_trf_request_id request_id,
                     a.corp_id,
                     a.transfer_amount || ' ' || a.purpose_of_payment || ' ' ||
                     a.beneficiary_name request_details,
                     a.approval_date,
                     a.request_status_id
                from intl_FX_TRANSFER_REQUESTS a
               where a.approval_status_id = 2
                 and (a.corp_id = p_corp_id or p_corp_id = 0)
                 and (a.request_status_id = p_service_status_id or
                     p_service_status_id = 0)
              
              ) x,
             corporate_profile y,
             ref_service_request_status z,
             REF_TRANSACTION_TYPE m
       where x.corp_id = y.corp_id
         and x.request_status_id = z.id
         and x.service_request_type_id = m.transaction_type_id;
    return c_result;
  
  end;

  function getServiceRequestsByCorpId(p_corp_id           number,
                                      p_service_status_id number,
                                      p_start_date        date,
                                      p_end_date          date)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    if (p_corp_id = 0) then
      return null;
    else
      return getServiceRequests(p_corp_id,
                                
                                p_service_status_id,
                                p_start_date,
                                p_end_date);
    end if;
  
  end;

  function updateServiceRequestStatus(p_request_id              number,
                                      p_service_request_type_id number,
                                      p_request_status_id       number,
                                      p_actioned_by             varchar2,
                                      p_remarks                 varchar2)
    return varchar2 as
  begin
  
    if (p_request_status_id = 0) then
      return '96~~OPERATION FAILED';
    else
      --cheque book request
      if (p_service_request_type_id = 27) then
        update cheque_book_requests a
           set a.request_status_id = p_request_status_id,
               a.actioned_by       = p_actioned_by,
               a.date_actioned     = sysdate,
               a.comments          = p_remarks
         where a.request_id = p_request_id;
         
           elsif (p_service_request_type_id = 45) then
        update CARD_REQUESTS a
           set a.request_status_id = p_request_status_id,
               a.actioned_by       = p_actioned_by,
               a.date_actioned     = sysdate,
               a.comments          = p_remarks
         where a.CARD_REQUEST_ID = p_request_id;
		 
		 elsif (p_service_request_type_id = 46) then
        update STOP_CHEQUE_REQUESTS a
           set a.request_status_id = p_request_status_id,
               a.actioned_by       = p_actioned_by,
               a.date_actioned     = sysdate,
               a.comments          = p_remarks
         where a.REQUEST_ID = p_request_id;
		 
		 elsif (p_service_request_type_id = 47) then
        update EXPENSE_CARD_REQUESTS a
           set a.request_status_id = p_request_status_id,
               a.actioned_by       = p_actioned_by,
               a.date_actioned     = sysdate,
               a.comments          = p_remarks
         where a.CARD_REQUEST_ID = p_request_id;
		 elsif (p_service_request_type_id = 48) then
        update HR_QUICK_RESPONSE a
           set a.request_status_id = p_request_status_id,
               a.actioned_by       = p_actioned_by,
               a.date_actioned     = sysdate,
               a.comments          = p_remarks
         where a.REQUEST_ID = p_request_id;
        --manager's cheque
      elsif (p_service_request_type_id = 28) then
        update managers_cheque_requests a
           set a.request_status_id = p_request_status_id,
               a.actioned_by       = p_actioned_by,
               a.date_actioned     = sysdate,
               a.comments          = p_remarks
         where a.request_id = p_request_id;
        --cheque confirmation
      elsif (p_service_request_type_id = 30) then
        update cheque_confirmation_requests a
           set a.request_status_id = p_request_status_id,
               a.actioned_by       = p_actioned_by,
               a.date_actioned     = sysdate,
               a.comments          = p_remarks
         where a.request_id = p_request_id;
      end if;
      commit;
      return '00~~OPERATION SUCCESSFUL';
    end if;
  end updateServiceRequestStatus;


  function getServiceRequestDetailsById(p_service_request_type_id number,
                                        p_request_id              number)
    return sys_refcursor as
    o_refcursor sys_refcursor;
  begin
  
    if (p_service_request_type_id = '27') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.NO_OF_LEAFLETS Number_Of_Leaflets,
               a.NO_OF_BOOKLETS No_Of_Booklets,
               a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from cheque_book_requests a,
               corporate_profile    b,
               user_profile         maker
         where a.request_id = p_request_id
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
      
      elsif (p_service_request_type_id = '45') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from CARD_REQUESTS a,
               corporate_profile    b,
               user_profile         maker
         where a.card_request_id = p_request_id
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
	  
	  elsif (p_service_request_type_id = '45') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
              a.START_CHEQUE_NUMBER,
			  a.END_CHEQUE_NUMBER,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from STOP_CHEQUE_REQUESTS a,
               corporate_profile    b,
               user_profile         maker
         where a.request_id = p_request_id
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
      
     
    elsif (p_service_request_type_id = '28') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.AMOUNT Amount,
               a.BENEFICIARY_NAME Beneficiary_Name,
               a.DELIVERY_OPTION_ID Delivery_Mode,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from MANAGERS_CHEQUE_REQUESTS a,
               corporate_profile        b,
               user_profile             maker
         where a.request_id = p_request_id
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (p_service_request_type_id = '30') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.AMOUNT Amount,
               a.ISSUANCE_DATE issuance_date,
               a.BENEFICIARY_NAME Beneficiary_Name,
               a.PURPOSE_OF_ISSUANCE Purpose_Of_Issuance,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from CHEQUE_CONFIRMATION_REQUESTS a,
               corporate_profile            b,
               user_profile                 maker
         where a.request_id = p_request_id
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (p_service_request_type_id = '33') then
      open o_refcursor for
        select b.name       Corporate_Name,
               a.ACCOUNT_NO Account_Number,
               a.card_type  Amount,
               a.card_type  card_type,
               -- a.BENEFICIARY_NAME Beneficiary_Name,
               --a.PURPOSE_OF_ISSUANCE Purpose_Of_Issuance,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from change_card_status_requests a,
               corporate_profile           b,
               user_profile                maker
         where a.service_request_id = p_request_id
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (p_service_request_type_id = '34') then
      open o_refcursor for
        select b.name        Corporate_Name,
               a.ACCOUNT_NO  Account_Number,
               a.card_type   Card_Type,
               a.limit_type  limit_type,
               a.limit_value limit_value,
               -- a.PURPOSE_OF_ISSUANCE Purpose_Of_Issuance,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from set_card_limit_requests a,
               corporate_profile       b,
               user_profile            maker
         where a.service_request_id = p_request_id
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    elsif (p_service_request_type_id = '40') then
      open o_refcursor for
        select b.name Corporate_Name,
               a.ACCOUNT_NUMBER Account_Number,
               a.TRANSFER_AMOUNT Amount,
               a.BENEFICIARY_NAME Beneficiary_Name,
               a.BENEFICIARY_BANK_NAME Beneficiary_Bank_Name,
               a.INT_BANK_ACCOUNT_NUMBER Int_Bank_Account_Number,
               a.INT_BANK_IBAN_CODE Iint_Bank_Iban_Code,
               a.REMITTERADDRESS Remitter_Address,
               maker.first_name || ' ' || maker.last_name CreatedBy,
               to_char(a.created_date, 'DD-MON-RRRR HH:MI:SS AM') Date_Created
          from INTL_FX_TRANSFER_REQUESTS a,
               corporate_profile         b,
               user_profile              maker
         where a.FX_TRF_REQUEST_ID = p_request_id
           and a.corp_id = b.corp_id
           and a.created_by = maker.user_id;
      return o_refcursor;
    
    END IF;
  
  end getServiceRequestDetailsById;

  function getTransactionSchedules(p_batch_id varchar2) return varchar2 as
    v_startdate        varchar2(50);
    v_enddate          varchar2(50);
    v_sweepvariable    varchar2(50);
    v_scheduletypeid   varchar2(50);
    v_scheduleoptionid varchar2(50);
    v_month            varchar2(50);
    v_days             varchar2(100);
    v_scheduletime     varchar2(100);
    v_daysofmonth      varchar2(200);
    v_schedules        varchar2(500) := ' ';
  begin
  
    select SCHEDULE_START_DATE,
           SCHEDULE_END_DATE,
           SWEEP_VARIABLE,
           a.SCHEDULE_TYPE_ID,
           a.SCHEDULE_OPTION_ID
      into v_startdate,
           v_enddate,
           v_sweepvariable,
           v_scheduletypeid,
           v_scheduleoptionid
      from TRANSACTION_SCHEDULE_SUMMARY a
    
     Where a.batch_id = p_batch_id;
    v_schedules := ' START DATE: ' || v_startdate;
    IF (v_enddate = NULL) THEN
      v_enddate := 'INDEFINITE';
    END IF;
  
    v_schedules := v_schedules || ' END DATE: ' || v_enddate;
  
    if (v_scheduleoptionid = '1') THEN
      SELECT TO_CHAR(TO_DATE(SCHEDULE_MONTH, 'MM'), 'MONTH')
        into v_month
        from TRANSACTION_SCHEDULE_CALENDAR
       where batch_id = p_batch_id;
      select SCHEDULE_DAY || ' ' || v_month || ',' || SCHEDULE_YEAR,
             SCHEDULE_TIME
        into v_days, v_scheduletime
        from TRANSACTION_SCHEDULE_CALENDAR
       where batch_id = p_batch_id;
    
      v_schedules := v_schedules || ' ' || v_month || ' ' || v_days || ' ' ||
                     v_scheduletime;
    elsif (v_scheduleoptionid = '2') THEN
      select 'MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY',
             SCHEDULE_TIME
        into v_days, v_scheduletime
        from TRANSACTION_SCHEDULE_CALENDAR
       where batch_id = p_batch_id;
      v_schedules := v_schedules || ' ' || v_days || ' ' || v_scheduletime;
    elsif (v_scheduleoptionid = '3') THEN
      select listagg(SCHEDULE_DAY, ', ') within group(order by SCHEDULE_DAY)
        INTO v_days
        from TRANSACTION_SCHEDULE_CALENDAR
       where batch_id = p_batch_id;
      SELECT SCHEDULE_TIME
        INTO v_scheduletime
        from TRANSACTION_SCHEDULE_CALENDAR
       where batch_id = p_batch_id
         AND ROWNUM < 2;
      v_schedules := v_schedules || v_days || ' ' || v_scheduletime;
    elsif (v_scheduleoptionid = '4') THEN
    
      v_month := '';
      FOR item IN (SELECT DISTINCT (SCHEDULE_MONTH)
                     FROM TRANSACTION_SCHEDULE_CALENDAR
                    where batch_id = p_batch_id) LOOP
        BEGIN
          v_month := v_month || ',' ||
                     TO_CHAR(TO_DATE(item.SCHEDULE_MONTH, 'MM'), 'MONTH');
        END;
      END LOOP;
      SELECT SUBSTR(v_month, 2, LENGTH(v_month)) INTO v_month FROM DUAL;
      v_daysofmonth := '';
      FOR item IN (SELECT DISTINCT (SCHEDULE_DAY)
                     FROM TRANSACTION_SCHEDULE_CALENDAR
                    where batch_id = p_batch_id) LOOP
        BEGIN
          v_daysofmonth := v_daysofmonth || ',' || item.SCHEDULE_DAY;
        END;
      END LOOP;
      --select listagg(TO_CHAR(TO_DATE(SCHEDULE_MONTH, 'MM'), 'MONTH'), ', ') within group(order by SCHEDULE_MONTH) INTO v_month from TRANSACTION_SCHEDULE_CALENDAR where batch_id=v_parenttableid;
      --select listagg(SCHEDULE_DAY, ', ') within group(order by SCHEDULE_DAY) INTO v_daysofmonth from TRANSACTION_SCHEDULE_CALENDAR where batch_id=v_parenttableid;
      SELECT SCHEDULE_TIME
        INTO v_scheduletime
        from TRANSACTION_SCHEDULE_CALENDAR
       where batch_id = p_batch_id
         AND ROWNUM < 2;
    
      select v_month || ' on day(s) ' || v_daysofmonth
        INTO v_days
        from dual;
      v_schedules := v_schedules || v_month || ' on day(s) ' ||
                     v_daysofmonth || ' ' || v_scheduletime;
    end if;
    return v_schedules;
  end;

  function getScheduledTxnSummaryByUserId(p_user_id    varchar2,
                                          p_start_date date,
                                          p_end_date   date)
    return sys_refcursor as
    c_result sys_refcursor;
    v_corpid Integer;
  begin
    select corp_id
      into v_corpid
      from USER_PROFILE
     where user_id = p_user_id;
    open c_result for
      select a.batch_id,
             a.batch_description,
             a.schedule_date,
             a.created_date,
             a.total_tran_amount,
             a.total_charge_amt,
             --a.TOTAL_TRAN_AMT_SUCCESSFUL,
             --a.total_charge_amt_successful,
             --a.total_tran_amt_failed,
             -- a.total_charge_amt_failed,
             --a.total_tran_amt_unknown_status,
             -- a.total_charge_unknown_status,
             --a.reversed_total_amount,
             -- a.reversed_total_charge,
             a.dr_account,
             b.NAME as STATUS,
             --b.statusdescription,
             a.no_of_record AS NO_OF_RECORDS,
             --a.no_of_records_successful      SUCCESS_ITEMS,
             --a.failure_count                 FAILED_ITEMS,
             --a.no_of_records_unknown_status  UNDECIDED_ITEMS,
             
             --a.no_of_record - a.no_of_records_successful - a.failure_count -
             --a.no_of_records_unknown_status PENDING_ITEMS,
             c.name schedule_type,
             d.name schedule_option,
             getTransactionSchedules(a.batch_id) schedules,
             '<a href ="javascript:void(0)" class="quick-view-btn" data-id="' ||
              a.batch_id || '" id ="btn' || a.batch_id ||
              '"> View Details</a>
                                                    <img id="quikloadeux' ||
              a.batch_id ||
             --ui changed menu to detail
              '" src="${pageContext.request.contextPath}/img/loader.gif" style="display:none;position:relative;width:30px;height:30px"/>' Detail,
             case
               when a.record_status_id = 2 and a.approval_status_id = 2 then
                '<a href ="javascript:void(0)" class="quick-view-btn-dis" data-id="' ||
                a.batch_id || '~4' || '" id ="btn-dis' || a.batch_id ||
                '"> Disable</a>
                                                    <img id="quikloadeux-dis' ||
                a.batch_id ||
               --ui changed menu to detail
                '" src="${pageContext.request.contextPath}/img/loader.gif" style="display:none;position:relative;width:30px;height:30px"/>'
               when a.record_status_id = 3 and a.approval_status_id = 2 then
                '<a href ="javascript:void(0)" class="quick-view-btn-act" data-id="' ||
                a.batch_id || '~5' || '" id ="btn-act' || a.batch_id ||
                '"> Enable</a>
                                                    <img id="quikloadeux-act' ||
                a.batch_id ||
               --ui changed menu to detail
                '" src="${pageContext.request.contextPath}/img/loader.gif" style="display:none;position:relative;width:30px;height:30px"/>'
               else
                ''
             end Actions,
             
             case
               when a.record_status_id = 2 and a.approval_status_id = 2 then
                '<a href ="javascript:void(0)" class="quick-view-btn-del" data-id="' ||
                a.batch_id || '~3' || '" id ="btn-del' || a.batch_id ||
                '"> Delete</a>
                                                    <img id="quikloadeux-del' ||
                a.batch_id ||
               --ui changed menu to detail
                '" src="${pageContext.request.contextPath}/img/loader.gif" style="display:none;position:relative;width:30px;height:30px"/>'
             
               when a.record_status_id = 3 and a.approval_status_id = 2 then
                '<a href ="javascript:void(0)" class="quick-view-btn-del" data-id="' ||
                a.batch_id || '~3' || '" id ="btn-act' || a.batch_id ||
                '"> Delete</a>
                                                    <img id="quikloadeux-act' ||
                a.batch_id ||
               --ui changed menu to detail
                '" src="${pageContext.request.contextPath}/img/loader.gif" style="display:none;position:relative;width:30px;height:30px"/>'
               else
                ''
             end Remove
      
        from cibank.TRANSACTION_SCHEDULE_SUMMARY a,
             REF_RECORD_STATUS                   b,
             ref_schedule_type                   c,
             ref_schedule_options                d
       where --a.processing_status = b.statuscode
       a.RECORD_STATUS_ID = b.RECORD_STATUS_ID
       and a.corp_id = v_corpid
      -- and a.created_by = p_user_id
      --and trunc(a.created_date) between trunc(p_start_date) and
      --    trunc(p_end_date)
       and a.schedule_type_id = c.schedule_type_id
       and a.schedule_option_id = d.schedule_option_id
       and a.record_status_id not in (1);
    return c_result;
  
  end getScheduledTxnSummaryByUserId;

  function getScheduledTxnDetailByBatchId(p_batch_id    varchar2,
                                          p_status_flag varchar2)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    open c_result for
      select
      
       CR_ACCOUNT_NO Beneficiary_Account,
       a.beneficiary_name Beneficiary_Name,
       c.dr_account_currency_code Currency,
       nvl(bnk_name, BANK_CODE) Destination_Bank,
       AMOUNT,
       NARRATION Transaction_Description,
       CHARGE_AMOUNT Charges,
       formatDateTime(POSTED_DATE) Posted_Date,
       
       b.statusdescription Processing_Status,
       case a.PROCESSING_STATUS
         when '00' then
          '<a href="/sec/printReceipt?id=' || a.batch_detail_id ||
          '">Download</a>'
       
         else
          ''
       end Receipt --ui
      
        from TRANSACTION_SCHEDULE_SUMMARY c,
             TRANSACTION_SCHEDULE_DETAIL  a,
             ref_processingstatus         b,
             /*( select bnk_code, bnk_name from 
             ribank.RIB_BANKS_LIST 
             where length(bnk_code)=3
             union all
              select nibsscode, bnk_name from 
             ribank.RIB_BANKS_LIST) k*/
             newibank.RIB_BANKS_LIST k
       where a.batch_id = c.batch_id
         and a.processing_status = b.statuscode
         and a.batch_id = p_batch_id
         and a.bank_code = k.nibsscode(+);
    /*and (p_status_flag is null or
    ((a.processing_status = '00' and p_status_flag = 'SUCCESS') or
    (a.processing_status = '07' and p_status_flag = 'FAILED') or
    (coalesce(a.processing_status, '') not in ('00', '07') and
    p_status_flag = 'PENDING')));*/
  
    return c_result;
  end getScheduledTxnDetailByBatchId;

  FUNCTION deleteDisableEnableSI(p_REQUEST_TYPE_ID IN VARCHAR2,
                                 p_CREATED_BY      IN VARCHAR2,
                                 p_BATCH_ID        IN VARCHAR2,
                                 p_auth_token_flag char,
                                 p_auth_token_sno  varchar2,
                                 p_context_url     varchar2,
                                 p_ip_mac_address  varchar2,
                                 p_session_id      varchar2) RETURN VARCHAR2 IS
    v_err_message             VARCHAR2(3000);
    v_response                VARCHAR2(100);
    v_recordstatus            VARCHAR2(2);
    v_maintableid             NUMBER;
    v_reqid                   NUMBER;
    v_approvalstatus          VARCHAR2(2);
    v_branchcode              VARCHAR2(10);
    v_holdingacctid           VARCHAR2(15);
    v_holdingacctno           VARCHAR2(15);
    v_holdingacctbranchcode   VARCHAR2(15);
    v_holdingacctcurrencycode VARCHAR2(15);
    v_holdingaccttype         VARCHAR2(15);
    v_postingoption           VARCHAR2(10);
    v_acctCurrency            VARCHAR2(10);
    v_transitpostref          VARCHAR2(200);
    --TRANSIT_POSTREF
    v_chargeapply   VARCHAR2(2);
    v_validatetoken NUMBER;
    -- v_istokenused               VARCHAR2(20);
    v_chargeamt                 NUMBER;
    v_totalchargeamt            NUMBER;
    v_endate                    DATE;
    v_chargediscountexist       NUMBER;
    v_chargediscountpercent     NUMBER;
    v_chargediscountamt         NUMBER;
    v_quicktellercount          NUMBER;
    v_holdingacctexist          NUMBER;
    v_corporate_limit           corporate_limits%rowtype;
    v_actual_daily_limit_amount number;
    --multidebit
    v_threadid           NUMBER;
    v_pendinguploadexist NUMBER;
  
    v_dr_account   VARCHAR2(20);
    v_total_amount VARCHAR2(30);
    v_istokenused  VARCHAR2(20);
    v_corpid       NUMBER;
    v_recordid     NUMBER;
  BEGIN
    v_istokenused := 'N';
    select corp_id
      into v_corpid
      from USER_PROFILE
     where user_id = p_CREATED_BY;
  
    if (p_auth_token_sno is not null and length(p_auth_token_sno) > 0) then
      select count(1)
        into v_validatetoken
        from TOKEN_VALIDATION_LOG
       where VALIDATION_REF = p_auth_token_sno
         and RESPONSE_CODE = '1'
         and ((sysdate - CREATED_DATE) * 24 * 60 * 60) < 120;
      if (v_validatetoken = 0) then
        v_response := '99~~Token has expired or invalid. Kindly use another token and try again.'; --INVALID APPROVAL OPTION
        RETURN v_response;
      else
        v_istokenused := 'Y';
      end if;
    end if;
    --multidebit
  
    select TRAN_SCHED_SUMMARY_REQ_SEQ.NEXTVAL into v_recordid from dual;
  
    insert INTO TRANSACTION_SCHED_SUMMARY_REQ
      (CORP_ID,
       CREATED_BY,
       LAST_MODIFIED_BY,
       CREATED_DATE,
       LAST_MODIFIED_DATE,
       REQUEST_TABLE_ID,
       APPROVAL_STATUS_ID,
       REQUEST_TYPE_ID,
       
       PARENT_TABLE_ID,
       auth_token_flag,
       AUTH_TOKEN_SNO)
    VALUES
      (v_corpid,
       p_CREATED_BY,
       p_CREATED_BY,
       sysdate,
       sysdate,
       v_recordid,
       '1',
       p_REQUEST_TYPE_ID,
       
       p_BATCH_ID,
       v_istokenused,
       p_auth_token_sno);
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest(v_dr_account,
                                                        p_CREATED_BY,
                                                        '122',
                                                        p_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        v_total_amount,
                                                        v_corpid,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    --v_response := '00';
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'TRANSACTION', --event category
                   'batchid~' || p_BATCH_ID, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   '122',
                   1,
                   v_response,
                   p_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      INSERT INTO rib_sr_error_log
        (error_date, error_msg, error_point)
      VALUES
        (SYSDATE,
         DBMS_UTILITY.format_error_backtrace || v_err_message,
         'CIBANK.TRANSACTION_SCHEDULE_SUMMARY');
    
      COMMIT;
      v_response := getFriendlyExceptionMessage(v_err_message, '122');
      RETURN v_response;
  END;

  function getCorporateCreditAccByUserId(i_corp_id integer,
                                         p_user_id varchar)
    RETURN SYS_REFCURSOR as
    c_refcursor SYS_REFCURSOR;
  begin
    open c_refcursor for
      select x.cust_no,
             x.branch_code,
             x.ac_desc,
             x.cust_no,
             'CR_NGN_000000010' cust_ac_no,
             x.ccy,
             x.cheque_book_facility,
             case x.account_type
               when 'U' then
                'Current'
               when 'S' then
                'Savings'
               when 'N' then
                'Nostro'
             end acctType,
             0 approval_limit,
             'VIEW' account_rights,
             y.description account_class,
             0 available_balance, --balance will be fetched from the card provider (EMP)
             'Y' view_balance
        from sttm_cust_account x, sttm_account_class y
       where x.account_class = 'CA_033'
         and x.auth_stat = 'A'
         and x.record_stat = 'O'
         and x.account_class = y.account_class
         and cust_no in (select c.cust_no
                         
                           from user_account_access a,
                                corporate_account   b,
                                sttm_cust_account   c,
                                user_profile        d
                          where c.cust_ac_no = b.account_number
                            and (b.corp_acct_id = a.corp_acct_id and
                                d.has_global_acct_access = 'N')
                            and a.user_id = p_user_id
                            and b.corp_id = i_corp_id
                            and b.corp_id = a.corp_id
                            and a.user_id = d.user_id
                            and a.record_status_id in (1, 2)
                            and c.auth_stat = 'A'
                            and c.record_stat = 'O'
                         union
                         select c.cust_no
                           from corporate_account b,
                                sttm_cust_account c,
                                user_profile      d
                          where c.cust_ac_no = b.account_number
                            and d.has_global_acct_access = 'Y'
                            and d.user_id = p_user_id
                            and b.corp_id = i_corp_id
                            and c.auth_stat = 'A'
                            and c.record_stat = 'O'
                         --and b.corp_id=a.corp_id         
                         -- and c.account_class = e.account_class;
                         --and a.record_status_id in (1, 2)
                         );
    return c_refcursor;
  
  end getCorporateCreditAccByUserId;

  
  FUNCTION createHRquickResponse(i_REQUEST_ID           NUMBER,
                             i_CORP_ID              NUMBER,
                            -- i_STATUS             VARCHAR2,
                             i_CHANNEL            VARCHAR2,
                             i_STAFF_MOBILE_NUMBER        VARCHAR2,
                             i_STAFF_NUMBER   NUMBER,
                             i_SMS_CONTENT             VARCHAR2,
                             i_STAFF_EMAIL        VARCHAR2,
                             i_MESSAGE_SUBJECT VARCHAR2,
                             i_MESSAGE_CATEGORY        VARCHAR2,
                             i_STAFF_BRANCH_CODE              VARCHAR2,
                             i_STAFF_NAME           VARCHAR2,
                             i_MESSAGE_CONTENT            VARCHAR2,
                             i_CREATED_BY           NUMBER,
                             i_APPROVED_BY          NUMBER,
                             i_LAST_MODIFIED_BY     NUMBER,
                             i_REQUEST_TYPE_ID      INTEGER,
                             i_MENU_ID              integer,
                             p_context_url          varchar2,
                             p_ip_mac_address       varchar2,
                             p_session_id           varchar2,
                             p_auth_token_flag      char,
                             p_auth_token_sno       varchar2,
							 p_state varchar2,
							 p_lga varchar2,
							 
							 p_incidenttype varchar2,
							 
							 p_searchoption varchar2,
							 
							 p_emailgroup varchar2,
							 p_group varchar2,
							 p_otheraction varchar2
                             
                             
                             ) RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO HR_QUICK_RESPONSE
        (
      
         REQUEST_ID,
         CORP_ID,
         CHANNEL,
        -- STATUS,
         STAFF_NAME,
		 SMS_CONTENT,
		 STAFF_EMAIL,
		 MESSAGE_CONTENT,
		 STAFF_NUMBER,
		 MESSAGE_CATEGORY,
		 MESSAGE_SUBJECT,
		 STAFF_MOBILE,
		 STAFF_BRANCH_CODE,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID,
		 STATE,
		 LGA,
		 INCIDENT_TYPE,
		 SEARCH_OPTION,
		 EMAIL_GROUP,
		 GROUPS,
		 OTHER_ACTION
		 )
      VALUES
        (v_recordid,
         
         i_CORP_ID,
          i_CHANNEL,
		  
         --i_STATUS,
		 i_STAFF_NAME,
		 
          i_SMS_CONTENT,
		  
           i_STAFF_EMAIL,
		   
           i_MESSAGE_CONTENT,
          i_STAFF_NUMBER,
		  
          i_MESSAGE_CATEGORY,
		  
          i_MESSAGE_SUBJECT,
           i_STAFF_MOBILE_NUMBER,
          i_STAFF_BRANCH_CODE,
         
         i_CREATED_BY,
         SYSDATE, 
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID,
		 p_state,
		p_lga,
		 p_incidenttype,
		 p_searchoption,
		p_emailgroup,
		p_group,
		p_otheraction
		 );
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
    
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CREATE-CARD-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createChequeRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;
  
  FUNCTION createCardRequest(i_REQUEST_ID           NUMBER,
                             i_CORP_ID              NUMBER,
                             i_ACCOUNT_NO           VARCHAR2,
                             i_CARD_PAN             VARCHAR2,
                             i_CARD_TYPE            VARCHAR2,
                             i_CARD_SUB_TYPE        VARCHAR2,
                             i_DELIVERY_OPTION_ID   NUMBER,
                             i_PHONE_NO             VARCHAR2,
                             i_EMAIL_ADDRESS        VARCHAR2,
                             i_RELATIONSHIP_MANAGER VARCHAR2,
                             i_PICKUP_BRANCH        VARCHAR2,
                             i_COUNTRY              VARCHAR2,
                             i_START_DATE           VARCHAR2,
                             i_END_DATE             VARCHAR2,
                             i_CREATED_BY           NUMBER,
                             i_APPROVED_BY          NUMBER,
                             i_LAST_MODIFIED_BY     NUMBER,
                             i_REQUEST_TYPE_ID      INTEGER,
                             i_MENU_ID              integer,
                             p_context_url          varchar2,
                             p_ip_mac_address       varchar2,
                             p_session_id           varchar2,
                             p_auth_token_flag      char,
                             p_auth_token_sno       varchar2,
                             i_CARD_QUANTITY VARCHAR2, 
                             
                              i_CARD_SPEND_LIMIT VARCHAR2, 
                              i_CLEAN_UP_CYCLE VARCHAR2, 
                              i_NAME_ON_CARD VARCHAR2, 
                              i_AUTO_RENEW VARCHAR2, 
                              i_DELIVERY_ADDRESS VARCHAR2
                             ) RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO card_requests
        (
         
         CARD_REQUEST_ID,
         CORP_ID,
         ACCOUNT_NO,
         CARD_PAN,
         CARD_TYPE,
         --DEL_FLG,
         --SUMMARY_REQUEST_ID,
         CARD_SUB_TYPE,
         DELIVERY_OPTION_ID,
         PHONE_NO,
         EMAIL_ADDRESS,
         RELATIONSHIP_MANAGER,
         PICKUP_BRANCH,
         COUNTRY,
         START_DATE,
         END_DATE,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID,
        
CARD_QUANTITY,
CARD_SPEND_LIMIT,
CLEAN_UP_CYCLE,
NAME_ON_CARD,
AUTO_RENEW,
DELIVERY_ADDRESS)
      VALUES
        (v_recordid,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_CARD_PAN,
         i_CARD_TYPE,
         -- i_DEL_FLG,
         --  i_SUMMARY_REQUEST_ID,
         i_CARD_SUB_TYPE,
         i_DELIVERY_OPTION_ID,
         i_PHONE_NO,
         i_EMAIL_ADDRESS,
         i_RELATIONSHIP_MANAGER,
         i_PICKUP_BRANCH,
         i_COUNTRY,
         i_START_DATE,
         i_END_DATE,
         
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID,
         i_CARD_QUANTITY,
         i_CARD_SPEND_LIMIT,
i_CLEAN_UP_CYCLE,
i_NAME_ON_CARD,
i_AUTO_RENEW,
i_DELIVERY_ADDRESS);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
    
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CREATE-CARD-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createChequeRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;

  FUNCTION changeCardStatusRequest(i_REQUEST_ID           NUMBER,
                                   i_CORP_ID              NUMBER,
                                   i_ACCOUNT_NO           VARCHAR2,
                                   i_card_pan             VARCHAR2,
                                   i_card_type            VARCHAR2,
                                   i_status_flag          CHAR,
                                   i_PHONE_NO             VARCHAR2,
                                   i_EMAIL_ADDRESS        VARCHAR2,
                                   i_RELATIONSHIP_MANAGER VARCHAR2,
                                   i_CREATED_BY           NUMBER,
                                   i_APPROVED_BY          NUMBER,
                                   i_LAST_MODIFIED_BY     NUMBER,
                                   i_REQUEST_TYPE_ID      INTEGER,
                                   i_MENU_ID              integer,
                                   p_context_url          varchar2,
                                   p_ip_mac_address       varchar2,
                                   p_session_id           varchar2,
                                   p_auth_token_flag      char,
                                   p_auth_token_sno       varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO CHANGE_CARD_STATUS_REQUESTS
        (
         
         service_REQUEST_ID,
         CORP_ID,
         ACCOUNT_NO,
         card_pan,
         card_type,
         status_flag,
         PHONE_NO,
         EMAIL_ADDRESS,
         RELATIONSHIP_MANAGER,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_card_pan,
         i_card_type,
         i_status_flag,
         i_PHONE_NO,
         i_EMAIL_ADDRESS,
         i_RELATIONSHIP_MANAGER,
         
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CHANGE-CARD-STATUS-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.changeCardStatusRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;

  FUNCTION changeCardLimitsRequest(i_REQUEST_ID           NUMBER,
                                   i_CORP_ID              NUMBER,
                                   i_ACCOUNT_NO           VARCHAR2,
                                   i_card_pan             VARCHAR2,
                                   i_card_type            VARCHAR2,
                                   i_limit_type           varchar2,
                                   i_limit_value          number,
                                   i_PHONE_NO             VARCHAR2,
                                   i_EMAIL_ADDRESS        VARCHAR2,
                                   i_RELATIONSHIP_MANAGER VARCHAR2,
                                   i_CREATED_BY           NUMBER,
                                   i_APPROVED_BY          NUMBER,
                                   i_LAST_MODIFIED_BY     NUMBER,
                                   i_REQUEST_TYPE_ID      INTEGER,
                                   i_MENU_ID              integer,
                                   p_context_url          varchar2,
                                   p_ip_mac_address       varchar2,
                                   p_session_id           varchar2,
                                   p_auth_token_flag      char,
                                   p_auth_token_sno       varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO set_CARD_limit_REQUESTS
        (
         
         service_REQUEST_ID,THREAD_ID,
         CORP_ID,
         ACCOUNT_NO,
         card_pan,
         card_type,
         limit_type,
         limit_value,
         PHONE_NO,
         EMAIL_ADDRESS,
         RELATIONSHIP_MANAGER,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,THREAD_ID_SEQ.NEXTVAL,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_card_pan,
         i_card_type,
         i_limit_type,
         i_limit_value,
         i_PHONE_NO,
         i_EMAIL_ADDRESS,
         i_RELATIONSHIP_MANAGER,
         
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CHANGE-CARD-LIMITS-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.changeCardLimitsRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;

  function addFIRSRemitDetailsTemp(p_PAYMENTMETHOD   IN varchar2,
                                   p_PAYERNAME       IN varchar2,
                                   p_PAYERTIN        IN varchar2,
                                   p_BANK            IN varchar2,
                                   p_TAXTYPE         IN varchar2,
                                   p_ADDRESS         IN varchar2,
                                   p_TAXOFFICE       IN varchar2,
                                   p_BATCH_DETAIL_ID IN varchar2,
                                   p_PAYPERIODFROM   IN varchar2,
                                   p_PAYREF          IN varchar2,
                                   p_PAYPERIODTO     IN varchar2,
                                   p_CREATEDBY       IN varchar2,
                                   p_CORP_ID         IN varchar2,
                                   p_noofrecord      IN varchar2,
                                   p_totalamt        IN varchar2)
    return varchar2 IS
  
    v_err_message   VARCHAR2(3000);
    v_response_code varchar2(300);
  
  BEGIN
  
    INSERT INTO FIRS_REMIT_DETAILS_TEMP
      (PAYMENTMETHOD,
       PAYERNAME,
       PAYERTIN,
       BANK,
       TAXTYPE,
       ADDRESS,
       TAXOFFICE,
       BATCH_DETAIL_ID,
       PAYPERIODFROM,
       PAYREF,
       PAYPERIODTO,
       CORP_ID,
       CREATED_BY,
       TOTAL_AMOUNT,
       NOOFRECORDS,
       THREAD_ID)
    VALUES
      (p_PAYMENTMETHOD,
       p_PAYERNAME,
       p_PAYERTIN,
       p_BANK,
       p_TAXTYPE,
       p_ADDRESS,
       p_TAXOFFICE,
       p_BATCH_DETAIL_ID,
       to_date(p_PAYPERIODFROM, 'DD-MM-YYYY'),
       p_PAYREF,
       to_date(p_PAYPERIODTO, 'DD-MM-YYYY'),
       p_CORP_ID,
       p_CREATEDBY,
       p_totalamt,
       p_noofrecord,
       THREAD_ID_SEQ.NEXTVAL);
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.FIRS_REMITTANCE_DETAILS');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;
  function addCollectionDetails(p_CUSTOM_VALUE_4  IN varchar2,
                                p_CUSTOM_VALUE_5  IN varchar2,
                                p_CUSTOM_VALUE_6  IN varchar2,
                                p_CUSTOM_VALUE_7  IN varchar2,
                                p_CUSTOM_VALUE_8  IN varchar2,
                                p_CUSTOM_VALUE_9  IN varchar2,
                                p_CUSTOM_VALUE_10 IN varchar2,
                                p_BATCH_ID        IN varchar2,
                                p_REQUEST_ID      IN varchar2,
                                p_CUSTOM_VALUE_1  IN varchar2,
                                p_CUSTOM_VALUE_2  IN varchar2,
                                p_CUSTOM_VALUE_3  IN varchar2,
                                p_COLLECTION_ID   IN varchar2,
                                p_CORP_ID         IN varchar2,
                                p_CREATED_BY      IN varchar2)
    return varchar2 IS
  
    v_err_message      VARCHAR2(3000);
    v_response_code    varchar2(300);
    v_batch_detail_id  VARCHAR2(200);
    v_fee_amount       NUMBER(18, 2);
    p_returnval        VARCHAR2(300);
    p_abbr             VARCHAR2(200);
    p_fee              NUMBER(18, 2);
    p_vat_applied      VARCHAR2(200);
    p_response_code    VARCHAR2(200);
    p_response_message VARCHAR2(200);
    p_response_amount  NUMBER(18, 2);
    v_totalfee         NUMBER(18, 2);
    v_commission       NUMBER(18, 2);
    v_vat              NUMBER(18, 2);
    v_cracct           VARCHAR2(200);
    r_collectioninfo   PAYMENTS.RR_COLLECTIONS%rowtype;
    v_amount           NUMBER(18, 2);
  BEGIN
    select *
      into r_collectioninfo
      from PAYMENTS.RR_COLLECTIONS
     where collection_id = p_COLLECTION_ID;
    --v_fee_amount :=r_collectioninfo.FEE;
    v_vat        := 0.0;
    v_commission := 0.0;
    v_totalfee   := 0.0;
    select BATCH_DETAIL_ID
      into v_batch_detail_id
      from TRANSACTION_BATCH_DETAIL
     where batch_id = p_BATCH_ID
       and rownum < 2;
    select amount
      into v_amount
      from TRANSACTION_BATCH_DETAIL
     where BATCH_DETAIL_ID = v_batch_detail_id;
    PAYMENTS.bas_rr_fees_package.calculatefee(p_COLLECTION_ID,
                                              v_amount,
                                              p_CUSTOM_VALUE_1,
                                              p_abbr,
                                              p_fee,
                                              p_vat_applied,
                                              p_response_code,
                                              p_response_message,
                                              
                                              p_response_amount);
  
    v_totalfee   := p_response_amount;
    v_commission := p_fee;
  
    if (p_vat_applied = 'Y') THEN
      v_vat        := v_commission * 0.05;
      v_commission := v_commission - v_vat;
    
    END IF;
    v_totalfee := v_totalfee + v_commission;
    INSERT INTO COLLECTION_DETAILS
      (CUSTOM_VALUE_4,
       CUSTOM_VALUE_5,
       CUSTOM_VALUE_6,
       CUSTOM_VALUE_7,
       CUSTOM_VALUE_8,
       CUSTOM_VALUE_9,
       CUSTOM_VALUE_10,
       BATCH_DETAIL_ID,
       --REQUEST_ID ,
       CUSTOM_VALUE_1,
       CUSTOM_VALUE_2,
       CUSTOM_VALUE_3,
       COLLECTION_ID,
       CORP_ID,
       CREATED_BY)
    VALUES
      (p_CUSTOM_VALUE_4,
       p_CUSTOM_VALUE_5,
       p_CUSTOM_VALUE_6,
       p_CUSTOM_VALUE_7,
       p_CUSTOM_VALUE_8,
       p_CUSTOM_VALUE_9,
       p_CUSTOM_VALUE_10,
       v_batch_detail_id,
       --  p_REQUEST_ID ,
       p_CUSTOM_VALUE_1,
       p_CUSTOM_VALUE_2,
       p_CUSTOM_VALUE_3,
       p_COLLECTION_ID,
       p_CORP_ID,
       p_CREATED_BY);
    select ACCOUNT
      into v_cracct
      from PAYMENTS.RR_COLLECTIONS
     where collection_id = p_COLLECTION_ID;
  
    update TRANSACTION_BATCH_DETAIL
       set CR_ACCOUNT_NO = v_cracct, CHARGE_AMOUNT = v_totalfee
     where BATCH_DETAIL_ID = v_batch_detail_id;
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.COLLECTION_DETAILS');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  function addFIRSRemitDetailsPayeTemp(p_NHIS               IN varchar2,
                                       p_BASICSALARY        IN varchar2,
                                       p_RATE               IN varchar2,
                                       p_LIFEASSURANCE      IN varchar2,
                                       p_BATCH_DETAIL_ID    IN varchar2,
                                       p_PENSION            IN varchar2,
                                       p_NHF                IN varchar2,
                                       p_PAYABLEPERANNUM    IN varchar2,
                                       p_TAXAMOUNT          IN varchar2,
                                       p_ALLOWANCE          IN varchar2,
                                       p_GRATUITY           IN varchar2,
                                       p_CRA                IN varchar2,
                                       p_MINPAYABLEPERANNUM IN varchar2,
                                       p_STAFFNUMBER        IN varchar2,
                                       
                                       p_SN                       IN varchar2,
                                       p_BENEFICIARYNAME          IN varchar2,
                                       p_STATUTORYPAYABLEPERANNUM IN varchar2,
                                       p_BENEFICIARYTIN           IN varchar2,
                                       p_GROSSPAY                 IN varchar2,
                                       p_TAXAUTHORITY             IN varchar2,
                                       
                                       p_BENEFICIARYDESIGNATION IN varchar2,
                                       p_CREATEDBY              IN varchar2,
                                       p_CORP_ID                IN varchar2,
                                       p_BEN_EMAIL              IN varchar2)
    return varchar2 IS
  
    v_err_message   VARCHAR2(3000);
    v_response_code varchar2(300);
  
  BEGIN
  
    INSERT INTO FIRS_REMIT_DETAILS_PAYE_TEMP
      (NHIS,
       BASICSALARY,
       RATE,
       LIFEASSURANCE,
       BATCH_DETAIL_ID,
       PENSION,
       NHF,
       PAYABLEPERANNUM,
       TAXAMOUNT,
       ALLOWANCE,
       GRATUITY,
       CRA,
       MINPAYABLEPERANNUM,
       STAFFNUMBER,
       
       SN,
       BENEFICIARYNAME,
       STATUTORYPAYABLEPERANNUM,
       BENEFICIARYTIN,
       GROSSPAY,
       TAXAUTHORITY,
       
       BENEFICIARYDESIGNATION,
       CORP_ID,
       CREATED_BY,
       THREAD_ID,
       BENEFICIARY_EMAIL)
    VALUES
      (p_NHIS,
       p_BASICSALARY,
       p_RATE,
       p_LIFEASSURANCE,
       p_BATCH_DETAIL_ID,
       p_PENSION,
       p_NHF,
       p_PAYABLEPERANNUM,
       p_TAXAMOUNT,
       p_ALLOWANCE,
       p_GRATUITY,
       p_CRA,
       p_MINPAYABLEPERANNUM,
       p_STAFFNUMBER,
       
       p_SN,
       p_BENEFICIARYNAME,
       p_STATUTORYPAYABLEPERANNUM,
       p_BENEFICIARYTIN,
       p_GROSSPAY,
       p_TAXAUTHORITY,
       
       p_BENEFICIARYDESIGNATION,
       p_CORP_ID,
       p_CREATEDBY,
       THREAD_ID_SEQ.NEXTVAL,
       p_BEN_EMAIL);
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.FIRS_REMITTANCE_DETAILS_PAYE');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  function addFIRSRemittanceDetails(p_PAYMENTMETHOD       IN varchar2,
                                    p_PAYERNAME           IN varchar2,
                                    p_PAYERTIN            IN varchar2,
                                    p_BANK                IN varchar2,
                                    p_TAXTYPE             IN varchar2,
                                    p_ADDRESS             IN varchar2,
                                    p_TAXOFFICE           IN varchar2,
                                    p_BATCH_DETAIL_ID     IN varchar2,
                                    p_PAYPERIODFROM       IN varchar2,
                                    p_PAYREF              IN varchar2,
                                    p_PAYPERIODTO         IN varchar2,
                                    p_CREATEDBY           IN varchar2,
                                    p_CORP_ID             IN varchar2,
                                    p_TAXTYPE_DESCRIPTION IN varchar2)
    return varchar2 IS
  
    v_err_message     VARCHAR2(3000);
    v_response_code   varchar2(300);
    v_batch_detail_id varchar2(300);
  
  BEGIN
    --select BATCH_DETAIL_ID into v_batch_detail_id from TRANSACTION_BATCH_DETAIL where BATCH_ID=p_BATCH_DETAIL_ID and rownum<2;
  
    INSERT INTO FIRS_REMITTANCE_DETAILS
      (PAYMENTMETHOD,
       PAYERNAME,
       PAYERTIN,
       BANK,
       TAXTYPE,
       ADDRESS,
       TAXOFFICE,
       BATCH_DETAIL_ID,
       PAYPERIODFROM,
       PAYREF,
       PAYPERIODTO,
       CORP_ID,
       CREATED_BY,
       TAXTYPE_DESCRIPTION)
    VALUES
      (p_PAYMENTMETHOD,
       p_PAYERNAME,
       p_PAYERTIN,
       p_BANK,
       p_TAXTYPE,
       p_ADDRESS,
       p_TAXOFFICE,
       p_BATCH_DETAIL_ID, --v_batch_detail_id
       to_date(p_PAYPERIODFROM, 'DD-MM-YYYY'),
       p_PAYREF,
       to_date(p_PAYPERIODTO, 'DD-MM-YYYY'),
       p_CORP_ID,
       p_CREATEDBY,
       p_TAXTYPE_DESCRIPTION);
  
    if (p_TAXTYPE in ('WHT', 'PAYE')) THEN
      UPDATE FIRS_REMIT_DETAILS_TEMP
         SET TRANSACTION_INITIATED = 'Y'
       WHERE CREATED_BY = p_CREATEDBY
         AND TRANSACTION_INITIATED = 'N';
    
    END IF;
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.FIRS_REMITTANCE_DETAILS');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  function addFIRSRemittanceDetailsPaye(p_NHIS               IN varchar2,
                                        p_BASICSALARY        IN varchar2,
                                        p_RATE               IN varchar2,
                                        p_LIFEASSURANCE      IN varchar2,
                                        p_BATCH_DETAIL_ID    IN varchar2,
                                        p_PENSION            IN varchar2,
                                        p_NHF                IN varchar2,
                                        p_PAYABLEPERANNUM    IN varchar2,
                                        p_TAXAMOUNT          IN varchar2,
                                        p_ALLOWANCE          IN varchar2,
                                        p_GRATUITY           IN varchar2,
                                        p_CRA                IN varchar2,
                                        p_MINPAYABLEPERANNUM IN varchar2,
                                        p_STAFFNUMBER        IN varchar2,
                                        
                                        p_SN                       IN varchar2,
                                        p_BENEFICIARYNAME          IN varchar2,
                                        p_STATUTORYPAYABLEPERANNUM IN varchar2,
                                        p_BENEFICIARYTIN           IN varchar2,
                                        p_GROSSPAY                 IN varchar2,
                                        p_TAXAUTHORITY             IN varchar2,
                                        
                                        p_BENEFICIARYDESIGNATION IN varchar2,
                                        p_CREATEDBY              IN varchar2,
                                        p_CORP_ID                IN varchar2,
                                        p_NameValidationStatus   IN varchar2,
                                        p_NE_CUST_NAME           IN varchar2,
                                        p_BEN_EMAIL              IN varchar2)
    return varchar2 IS
  
    v_err_message   VARCHAR2(3000);
    v_response_code varchar2(300);
  
  BEGIN
  
    INSERT INTO FIRS_REMITTANCE_DETAILS_PAYE
      (NHIS,
       BASICSALARY,
       RATE,
       LIFEASSURANCE,
       BATCH_DETAIL_ID,
       PENSION,
       NHF,
       PAYABLEPERANNUM,
       TAXAMOUNT,
       ALLOWANCE,
       GRATUITY,
       CRA,
       MINPAYABLEPERANNUM,
       STAFFNUMBER,
       
       SN,
       BENEFICIARYNAME,
       STATUTORYPAYABLEPERANNUM,
       BENEFICIARYTIN,
       GROSSPAY,
       TAXAUTHORITY,
       
       BENEFICIARYDESIGNATION,
       CORP_ID,
       CREATED_BY,
       NameValidationStatus,
       NE_CUST_NAME,
       BENEFICIARY_EMAIL)
    VALUES
      (p_NHIS,
       p_BASICSALARY,
       p_RATE,
       p_LIFEASSURANCE,
       p_BATCH_DETAIL_ID,
       p_PENSION,
       p_NHF,
       p_PAYABLEPERANNUM,
       p_TAXAMOUNT,
       p_ALLOWANCE,
       p_GRATUITY,
       p_CRA,
       p_MINPAYABLEPERANNUM,
       p_STAFFNUMBER,
       
       p_SN,
       p_BENEFICIARYNAME,
       p_STATUTORYPAYABLEPERANNUM,
       p_BENEFICIARYTIN,
       p_GROSSPAY,
       p_TAXAUTHORITY,
       
       p_BENEFICIARYDESIGNATION,
       p_CORP_ID,
       p_CREATEDBY,
       p_NameValidationStatus,
       p_NE_CUST_NAME,
       p_BEN_EMAIL);
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.FIRS_REMITTANCE_DETAILS_PAYE');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  function addFIRSRemittanceDetailsWHT(p_BENEFICIARYADDRESS IN varchar2,
                                       p_RATE               IN varchar2,
                                       
                                       p_BATCH_DETAIL_ID      IN varchar2,
                                       p_CONTRACTDATE         IN varchar2,
                                       p_INVOICENUMBER        IN varchar2,
                                       p_TAXAMOUNT            IN varchar2,
                                       p_DESCRIPTION          IN varchar2,
                                       p_CONTRACTAMOUNT       IN varchar2,
                                       p_CONTRACTTYPE         IN varchar2,
                                       p_BENEFICIARYNAME      IN varchar2,
                                       p_BENEFICIARYTIN       IN varchar2,
                                       p_TAXAUTHORITY         IN varchar2,
                                       p_CREATEDBY            IN varchar2,
                                       p_CORP_ID              IN varchar2,
                                       p_NameValidationStatus IN varchar2,
                                       p_NE_CUST_NAME         IN varchar2,
                                       p_BEN_EMAIL            IN varchar2)
    return varchar2 IS
  
    v_err_message    VARCHAR2(3000);
    v_response_code  varchar2(300);
    v_email_template varchar2(1000);
  
  BEGIN
    v_email_template := '<p>Dear #FNAME#,</p><p>This is to inform you that your WHT remittance has been initiated for the contract details below:</p><ul><li>DESCRIPTION: #Desc#</li><li>INVOICE NUMBER: #INVOICENUMBER#</li><li>CONTRACT TYPE: #CONTRACTTYPE#</li><li>CONTRACT AMOUNT: #CONTRACTAMOUNT#</li><li>TAX AMOUNT: #TAXAMOUNT#</li></ul></p>';
  
    INSERT INTO FIRS_REMITTANCE_DETAILS_WHT
      (BENEFICIARYADDRESS,
       RATE,
       
       BATCH_DETAIL_ID,
       CONTRACTDATE,
       INVOICENUMBER,
       TAXAMOUNT,
       DESCRIPTION,
       CONTRACTAMOUNT,
       CONTRACTTYPE,
       BENEFICIARYNAME,
       BENEFICIARYTIN,
       TAXAUTHORITY,
       CORP_ID,
       CREATED_BY,
       NameValidationStatus,
       NE_CUST_NAME,
       BENEFICIARY_EMAIL)
    VALUES
      (p_BENEFICIARYADDRESS,
       p_RATE,
       
       p_BATCH_DETAIL_ID,
       to_date(p_CONTRACTDATE, 'DD-MM-YYYY'),
       p_INVOICENUMBER,
       p_TAXAMOUNT,
       p_DESCRIPTION,
       p_CONTRACTAMOUNT,
       p_CONTRACTTYPE,
       p_BENEFICIARYNAME,
       p_BENEFICIARYTIN,
       p_TAXAUTHORITY,
       p_CORP_ID,
       p_CREATEDBY,
       p_NameValidationStatus,
       p_NE_CUST_NAME,
       p_BEN_EMAIL);
  
    v_email_template := replace(v_email_template,
                                '#FNAME#',
                                p_BENEFICIARYNAME);
    v_email_template := replace(v_email_template, '#Desc#', p_DESCRIPTION);
    v_email_template := replace(v_email_template,
                                '#INVOICENUMBER#',
                                p_INVOICENUMBER);
    v_email_template := replace(v_email_template,
                                '#CONTRACTTYPE#',
                                p_CONTRACTTYPE);
    v_email_template := replace(v_email_template,
                                '#CONTRACTAMOUNT#',
                                p_CONTRACTAMOUNT);
    v_email_template := replace(v_email_template,
                                '#TAXAMOUNT#',
                                p_TAXAMOUNT);
  
    INSERT INTO EMAIL_SCHEDULES
      (CREATED_BY,
       SCHEDULE_ID,
       EMAIL_SUBJECT,
       CREATED_DATE,
       TO_ADDRESS,
       EMAIL_BODY,
       cc_address)
    VALUES
      ('SYSTEM',
       EMAIL_SCHEDULES_SEQ.NEXTVAL,
       'FIRS WHT Remittance for Invoice ' || p_INVOICENUMBER,
       sysdate,
       p_BEN_EMAIL,
       v_email_template,
       'union360@unionbankng.com'
       
       );
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.FIRS_REMITTANCE_DETAILS_PAYE');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;

  FUNCTION getPendingFIRSNotice(p_THREAD_id IN VARCHAR2) RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id,
             j. PAYERNAME,
             j.PAYERTIN,
             j.BANK,
             j.TAXOFFICE,
             j.PAYREF,
             j.PAYPERIODTO,
             j.PAYMENTMETHOD,
             j.TAXTYPE_DESCRIPTION,
             j.TAXTYPE,
             j.ADDRESS,
             j.PAYPERIODFROM
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join corporate_profile k
          on b.corp_id = k.corp_id
        join FIRS_REMITTANCE_DETAILS j
          on j.BATCH_DETAIL_ID = a.BATCH_DETAIL_ID
       WHERE a.THREAD_ID = p_THREAD_id
         and a.PAYMENT_CHANNEL_ID = 1 --NIP
         AND (a.PROCESSING_STATUS = '04' or
             (a.PROCESSING_STATUS = '-04' and a.NEXT_TRIAL_TIME <= sysdate))
            
         AND a.ISINTERBANK_TRANSFER = 'N'
         AND a.PAYMENT_TYPE_ID = '7'; -- AND j.TAXTYPE not in('WHT','PAYE');
  
    RETURN o_refcursor;
  END;

  FUNCTION getFIRSWhtDetailsByTranRef(p_TranRef IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    v_batch_detail_id VARCHAR2(200);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    select BATCH_DETAIL_ID
      into v_batch_detail_id
      from TRANSACTION_BATCH_DETAIL
     where POST_REF_NO = p_TranRef;
    OPEN o_refcursor FOR
      SELECT *
        FROM FIRS_REMITTANCE_DETAILS_WHT
       where BATCH_DETAIL_ID = v_batch_detail_id;
  
    RETURN o_refcursor;
  END;

  FUNCTION getFIRSPayeDetailsByTranRef(p_TranRef IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    v_batch_detail_id VARCHAR2(200);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    select BATCH_DETAIL_ID
      into v_batch_detail_id
      from TRANSACTION_BATCH_DETAIL
     where POST_REF_NO = p_TranRef;
    OPEN o_refcursor FOR
      SELECT *
        FROM FIRS_REMITTANCE_DETAILS_PAYE
       where BATCH_DETAIL_ID = v_batch_detail_id;
  
    RETURN o_refcursor;
  END;

  FUNCTION getPendingRevpayNotice(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id,
             j.CUSTOM_VALUE_4,
             j.CUSTOM_VALUE_5,
             j.CUSTOM_VALUE_6,
             j.CUSTOM_VALUE_7,
             j.CUSTOM_VALUE_8,
             j.CUSTOM_VALUE_9,
             j.CUSTOM_VALUE_10,
             j.REQUEST_ID,
             j.CUSTOM_VALUE_1,
             j.CUSTOM_VALUE_2,
             j.CUSTOM_VALUE_3,
             j.COLLECTION_ID
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join corporate_profile k
          on b.corp_id = k.corp_id
        join COLLECTION_DETAILS j
          on j.BATCH_DETAIL_ID = a.BATCH_DETAIL_ID
       WHERE a.THREAD_ID = p_THREAD_id
         and a.PAYMENT_CHANNEL_ID = 1 --NIP
         AND (a.PROCESSING_STATUS = '04' or
             (a.PROCESSING_STATUS = '-04' and a.NEXT_TRIAL_TIME <= sysdate))
            
         AND a.ISINTERBANK_TRANSFER = 'N'
         AND a.PAYMENT_TYPE_ID = '8'
         and j.COLLECTION_ID in ('286', '287'); -- AND j.TAXTYPE not in('WHT','PAYE');
  
    RETURN o_refcursor;
  END;

  FUNCTION getPendingAkwaIbomNotice(p_THREAD_id IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id,
             j.CUSTOM_VALUE_4,
             j.CUSTOM_VALUE_5,
             j.CUSTOM_VALUE_6,
             j.CUSTOM_VALUE_7,
             j.CUSTOM_VALUE_8,
             j.CUSTOM_VALUE_9,
             j.CUSTOM_VALUE_10,
             j.REQUEST_ID,
             j.CUSTOM_VALUE_1,
             j.CUSTOM_VALUE_2,
             j.CUSTOM_VALUE_3,
             j.COLLECTION_ID
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join corporate_profile k
          on b.corp_id = k.corp_id
        join COLLECTION_DETAILS j
          on j.BATCH_DETAIL_ID = a.BATCH_DETAIL_ID
       WHERE a.THREAD_ID = p_THREAD_id
         and a.PAYMENT_CHANNEL_ID = 1 --NIP
         AND (a.PROCESSING_STATUS = '04' or
             (a.PROCESSING_STATUS = '-04' and a.NEXT_TRIAL_TIME <= sysdate))
            
         AND a.ISINTERBANK_TRANSFER = 'N'
         AND a.PAYMENT_TYPE_ID = '8'
         and j.COLLECTION_ID in ('331'); -- AND j.TAXTYPE not in('WHT','PAYE');
  
    RETURN o_refcursor;
  END;

  function addFIRSRemitDetailsWHTTemp(p_BENEFICIARYADDRESS IN varchar2,
                                      p_RATE               IN varchar2,
                                      
                                      p_BATCH_DETAIL_ID IN varchar2,
                                      p_CONTRACTDATE    IN varchar2,
                                      p_INVOICENUMBER   IN varchar2,
                                      p_TAXAMOUNT       IN varchar2,
                                      p_DESCRIPTION     IN varchar2,
                                      p_CONTRACTAMOUNT  IN varchar2,
                                      p_CONTRACTTYPE    IN varchar2,
                                      p_BENEFICIARYNAME IN varchar2,
                                      p_BENEFICIARYTIN  IN varchar2,
                                      p_TAXAUTHORITY    IN varchar2,
                                      p_CREATEDBY       IN varchar2,
                                      p_CORP_ID         IN varchar2,
                                      p_BEN_EMAIL       IN varchar2)
    return varchar2 IS
  
    v_err_message   VARCHAR2(3000);
    v_response_code varchar2(300);
  
  BEGIN
  
    INSERT INTO FIRS_REMIT_DETAILS_WHT_TEMP
      (BENEFICIARYADDRESS,
       RATE,
       
       BATCH_DETAIL_ID,
       CONTRACTDATE,
       INVOICENUMBER,
       TAXAMOUNT,
       DESCRIPTION,
       CONTRACTAMOUNT,
       CONTRACTTYPE,
       BENEFICIARYNAME,
       BENEFICIARYTIN,
       TAXAUTHORITY,
       CORP_ID,
       CREATED_BY,
       THREAD_ID,
       BENEFICIARY_EMAIL)
    VALUES
      (p_BENEFICIARYADDRESS,
       p_RATE,
       
       p_BATCH_DETAIL_ID,
       to_date(p_CONTRACTDATE, 'DD-MM-YYYY'),
       p_INVOICENUMBER,
       p_TAXAMOUNT,
       p_DESCRIPTION,
       p_CONTRACTAMOUNT,
       p_CONTRACTTYPE,
       p_BENEFICIARYNAME,
       p_BENEFICIARYTIN,
       p_TAXAUTHORITY,
       p_CORP_ID,
       p_CREATEDBY,
       THREAD_ID_SEQ.NEXTVAL,
       p_BEN_EMAIL);
  
    v_response_code := '00';
    return v_response_code;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response_code := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message   := SQLERRM;
      v_response_code := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.FIRS_REMITTANCE_DETAILS_PAYE');
      
        COMMIT;
        --end;
      end;
      return v_response_code;
  END;
  FUNCTION selectPendingFIRSValidation(p_userid  IN VARCHAR2,
                                       p_taxtype IN VARCHAR2)
    RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.*,
             b.NHIS,
             b.BASICSALARY,
             b.RATE,
             b.LIFEASSURANCE,
             b.PROCESSING_STATUS        as PROCESSING_STATUS1,
             b.PENSION,
             b.NHF,
             b.PAYABLEPERANNUM,
             b.GRATUITY,
             b.STAFFNUMBER,
             b.BENEFICIARYTIN,
             b.GROSSPAY,
             b.TAXAUTHORITY,
             b.BENEFICIARYDESIGNATION,
             b.NE_CUST_NAME             as NE_BENEFICIARYNAME1,
             b.CORP_ID,
             b.TAXAMOUNT,
             b.ALLOWANCE,
             b.CRA,
             b.MINPAYABLEPERANNUM,
             b.BENEFICIARYNAME,
             b.STATUTORYPAYABLEPERANNUM,
             b.PAYE_DETAIL_ID,
             b.BENEFICIARY_EMAIL        as BENEFICIARY_EMAIL1,
             
             c.BENEFICIARYADDRESS,
             
             c.RATE as RATE2,
             
             c.WHT_DETAIL_ID,
             c.NE_CUST_NAME as NE_BENEFICIARYNAME2,
             c.CONTRACTDATE,
             c.INVOICENUMBER,
             c.TAXAMOUNT AS TAXAMOUNT2,
             c.DESCRIPTION,
             c.CONTRACTAMOUNT,
             c.PROCESSING_STATUS as PROCESSING_STATUS2,
             c.CONTRACTTYPE,
             c.BENEFICIARYNAME AS BENEFICIARYNAME2,
             c.BENEFICIARYTIN AS BENEFICIARYTIN2,
             c.BENEFICIARY_EMAIL as BENEFICIARY_EMAIL2,
             c.TAXAUTHORITY AS TAXAUTHORITY2,
             case a.PROCESSING_STATUS
               when '21' then
                'PENDING'
               when '22' then
                'IN_PROGRESS'
               when '00' then
                'COMPLETED'
               when '07' then
                'COMPLETED'
               when '06' then
                'COMPLETED'
             end SUMMARY_PROCESSING_STATUS
      
        FROM FIRS_REMIT_DETAILS_temp a
        left join FIRS_REMIT_DETAILS_PAYE_temp b
          on b.BATCH_DETAIL_ID = a.BATCH_DETAIL_ID
        left join FIRS_REMIT_DETAILS_WHT_temp c
          on c.BATCH_DETAIL_ID = a.BATCH_DETAIL_ID
       WHERE a.created_by = p_userid
            --AND a.SCHEDULE_DATE <= sysdate
         AND a.PROCESSING_STATUS IN ('21', '00', '07', '22', '06')
         and a.TAXTYPE = p_taxtype
         AND a.TRANSACTION_INITIATED = 'N';
  
    RETURN o_refcursor;
  END;

  FUNCTION updateTinValidationSummary(p_THREAD_id IN VARCHAR2)
    RETURN VARCHAR2 IS
    v_batchid               VARCHAR2(200);
    v_processingstatus      VARCHAR2(100);
    v_pendingcount          INTEGER;
    v_trancount             INTEGER;
    v_reversalamt           NUMBER(18, 2);
    v_totalamt              NUMBER(18, 2);
    v_totalcharge           NUMBER(18, 2);
    v_postingoption         INTEGER;
    v_failurecount          INTEGER;
    v_processedcount        INTEGER;
    v_noofrecords           INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
  
    v_email_template varchar2(1000);
    --v_batchid            varchar2(200);
    v_fname              varchar2(200);
    v_user_email_address varchar2(100);
    v_payment_type       varchar2(200);
    --v_noofrecords varchar2(100);
    v_amount      varchar2(100);
    v_tranremarks varchar2(500);
  
    v_corporate_email_address varchar2(200);
    v_app_url                 varchar2(300);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
  BEGIN
    SET TRANSACTION READ WRITE;
    v_reversalamt := 0.0;
  
    FOR item IN (SELECT a.BATCH_DETAIL_ID,
                        a.TAXTYPE,
                        a.CREATED_BY,
                        a.TOTAL_AMOUNT,
                        a.NOOFRECORDS
                 
                   FROM FIRS_REMIT_DETAILS_TEMP a
                  WHERE a.PROCESSING_STATUS = '22'
                    and a.THREAD_ID = p_THREAD_id) LOOP
    
      -- BEGIN
    
      v_trancount   := 0;
      v_totalamt    := 0.0;
      v_totalcharge := 0.0;
    
      if (item.TAXTYPE = 'WHT') THEN
        select count(1)
          into v_pendingcount
          from FIRS_REMIT_DETAILS_WHT_TEMP
         where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
              -- and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '07';
      
      ELSIF (item.TAXTYPE = 'PAYE') THEN
      
        select count(1)
          into v_pendingcount
          from FIRS_REMIT_DETAILS_PAYE_TEMP
         where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
              -- and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '07';
      END IF;
    
      IF (v_pendingcount > 0) THEN
      
        if (item.TAXTYPE = 'WHT') THEN
          UPDATE FIRS_REMIT_DETAILS_WHT_TEMP
             SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'N'
             AND PROCESSING_STATUS = '07';
          select count(1)
            into v_trancount
            from FIRS_REMIT_DETAILS_WHT_TEMP
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --  and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '07';
        
        ELSIF (item.TAXTYPE = 'PAYE') THEN
        
          UPDATE FIRS_REMIT_DETAILS_PAYE_TEMP
             SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'N'
             AND PROCESSING_STATUS = '07';
          select count(1)
            into v_trancount
            from FIRS_REMIT_DETAILS_PAYE_TEMP
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --  and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '07';
        
        END IF;
      
        UPDATE FIRS_REMIT_DETAILS_TEMP
           SET PROCESSEDRECORDCOUNT =
               (PROCESSEDRECORDCOUNT + v_trancount),
               FAILURE_COUNT       =
               (FAILURE_COUNT + v_trancount)
         WHERE BATCH_DETAIL_ID = item.BATCH_DETAIL_ID;
      
        if (item.TAXTYPE = 'WHT') THEN
          UPDATE FIRS_REMIT_DETAILS_WHT_TEMP
             SET IS_SUMMARY_TABLE_UPDATED = 'Y'
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '07';
        ELSIF (item.TAXTYPE = 'PAYE') THEN
        
          UPDATE FIRS_REMIT_DETAILS_PAYE_TEMP
             SET IS_SUMMARY_TABLE_UPDATED = 'Y'
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '07';
        
        END IF;
      
        v_trancount    := 0;
        v_totalamt     := 0.0;
        v_totalcharge  := 0.0;
        v_pendingcount := 0;
      END IF;
    
      if (item.TAXTYPE = 'WHT') THEN
        select count(1)
          into v_pendingcount
          from FIRS_REMIT_DETAILS_WHT_TEMP
         where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
              -- and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '00';
      
      ELSIF (item.TAXTYPE = 'PAYE') THEN
      
        select count(1)
          into v_pendingcount
          from FIRS_REMIT_DETAILS_PAYE_TEMP
         where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
              -- and TRANSACTION_STATUS = 'FAILED'
           AND IS_SUMMARY_TABLE_UPDATED = 'N'
           AND PROCESSING_STATUS = '00';
      END IF;
    
      IF (v_pendingcount > 0) THEN
      
        if (item.TAXTYPE = 'WHT') THEN
          UPDATE FIRS_REMIT_DETAILS_WHT_TEMP
             SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'N'
             AND PROCESSING_STATUS = '00';
          select count(1)
            into v_trancount
            from FIRS_REMIT_DETAILS_WHT_TEMP
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --  and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '00';
        
        ELSIF (item.TAXTYPE = 'PAYE') THEN
        
          UPDATE FIRS_REMIT_DETAILS_PAYE_TEMP
             SET IS_SUMMARY_TABLE_UPDATED = 'TEMP'
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'N'
             AND PROCESSING_STATUS = '00';
          select count(1)
            into v_trancount
            from FIRS_REMIT_DETAILS_PAYE_TEMP
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --  and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '00';
        
        END IF;
      
        UPDATE FIRS_REMIT_DETAILS_TEMP
           SET PROCESSEDRECORDCOUNT =
               (PROCESSEDRECORDCOUNT + v_trancount)
         WHERE BATCH_DETAIL_ID = item.BATCH_DETAIL_ID;
      
        if (item.TAXTYPE = 'WHT') THEN
          UPDATE FIRS_REMIT_DETAILS_WHT_TEMP
             SET IS_SUMMARY_TABLE_UPDATED = 'Y'
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '00';
        ELSIF (item.TAXTYPE = 'PAYE') THEN
        
          UPDATE FIRS_REMIT_DETAILS_PAYE_TEMP
             SET IS_SUMMARY_TABLE_UPDATED = 'Y'
           where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID
                --and TRANSACTION_STATUS = 'FAILED'
             AND IS_SUMMARY_TABLE_UPDATED = 'TEMP'
             AND PROCESSING_STATUS = '00';
        
        END IF;
      
        v_trancount    := 0;
        v_totalamt     := 0.0;
        v_totalcharge  := 0.0;
        v_pendingcount := 0;
      END IF;
    
      select NOOFRECORDS,
             FAILURE_COUNT,
             PROCESSEDRECORDCOUNT,
             'FIRS -' || item.TAXTYPE
        into v_noofrecords,
             v_failurecount,
             v_processedcount,
             v_payment_type
        from FIRS_REMIT_DETAILS_TEMP a
      
       where BATCH_DETAIL_ID = item.BATCH_DETAIL_ID;
    
      IF (v_noofrecords = v_processedcount) THEN
        --PROCESSING_STATUS
        --v_processingstatus
        select FIRST_NAME, EMAIL
          into v_fname, v_user_email_address
          from USER_PROFILE
         where USER_ID = item.CREATED_BY;
        select EMAIL
          into v_corporate_email_address
          from CORPORATE_PROFILE
         where corp_id = (select corp_id
                            from USER_PROFILE
                           where user_id = item.CREATED_BY);
        select a.p_value
          into v_email_template
          from cib_proc_properties a
         where a.p_key_name =
               'P_UPLOAD_ACCOUNT_VALIDATION_COMPLETION_EMAIL';
        select a.p_value
          into v_app_url
          from cib_proc_properties a
         where a.p_key_name = 'P_APP_URL';
      
        v_email_template := replace(v_email_template, '#FNAME#', v_fname);
        v_email_template := replace(v_email_template,
                                    '#BATCH_ID#',
                                    item.BATCH_DETAIL_ID);
        v_email_template := replace(v_email_template,
                                    '#PAYMENT_TYPE#',
                                    v_payment_type);
      
        v_email_template := replace(v_email_template,
                                    '#P_APP_URL#',
                                    v_app_url);
      
        select TO_CHAR(item.TOTAL_AMOUNT, '999,999,999,999')
          into v_amount
          from dual;
      
        v_email_template := replace(v_email_template,
                                    '#TOTAL_AMOUNT#',
                                    v_amount);
        v_email_template := replace(v_email_template,
                                    '#NO_OF_RECORDS#',
                                    v_noofrecords);
        v_email_template := replace(v_email_template,
                                    '#TRAN_REMARKS#',
                                    'FIRS - ' || item.TAXTYPE ||
                                    ' Payment TIN Validation Request');
        IF (v_failurecount = v_noofrecords) THEN
          v_processingstatus := '07';
        ELSIF (v_failurecount > 0 AND v_failurecount < v_noofrecords) THEN
          v_processingstatus := '06';
        ELSIF (v_failurecount = 0) THEN
          v_processingstatus := '00';
        END IF;
        UPDATE FIRS_REMIT_DETAILS_TEMP
           SET PROCESSING_STATUS = v_processingstatus
         WHERE BATCH_DETAIL_ID = item.BATCH_DETAIL_ID;
      
        INSERT INTO EMAIL_SCHEDULES
          (CREATED_BY,
           SCHEDULE_ID,
           EMAIL_SUBJECT,
           CREATED_DATE,
           TO_ADDRESS,
           EMAIL_BODY,
           cc_address)
        VALUES
          ('SYSTEM',
           EMAIL_SCHEDULES_SEQ.NEXTVAL,
           'FIRS TIN Upload Validation Completed for Batch ' ||
           item.BATCH_DETAIL_ID,
           sysdate,
           v_user_email_address,
           v_email_template,
           v_corporate_email_address
           
           );
      
      END IF;
    
    --END;
    END LOOP;
    --select * from RIA_INVOICES
  
    -- END;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  ------Added For Sprint Three Managers Cheque Upload----
  function addManagersChequeUploadTemp(
                                       
                                       p_CORP_ID             IN VARCHAR2,
                                       p_ACCOUNT_NO          IN VARCHAR2,
                                       p_AMOUNT              IN VARCHAR2,
                                       p_BENEFICIARY_NAME    IN VARCHAR2,
                                       p_DELIVERY_OPTION_ID  IN VARCHAR2,
                                       p_COLLECTION_BRANCH   IN VARCHAR2,
                                       p_PURPOSE_OF_ISSUANCE IN VARCHAR2,
                                       p_CREATED_BY          IN VARCHAR2,
                                       --p_APPROVAL_STATUS_ID IN VARCHAR2,
                                       p_REQUEST_TYPE_ID IN VARCHAR2,
                                       
                                       --p_RECORD_STATUS_ID IN VARCHAR2,
                                       p_NO_OF_RECORD    IN VARCHAR2,
                                       p_UPLOAD_FILENAME IN VARCHAR2,
                                       i_MENU_ID         IN VARCHAR2,
                                       p_auth_token_flag IN VARCHAR2,
                                       p_auth_token_sno  IN VARCHAR2,
                                       p_session_id      IN VARCHAR2,
                                       p_context_url     IN VARCHAR2,
                                       p_ip_mac_address  IN VARCHAR2,
                                       p_BATCH_ID        IN VARCHAR2)
    return varchar2 IS
    v_istokenused    VARCHAR2(20);
    v_validatetoken  NUMBER;
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_response_code  varchar2(300);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(p_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(p_REQUEST_TYPE_ID);
  BEGIN
    v_istokenused := 'N';
  
    if (p_auth_token_sno is not null and length(p_auth_token_sno) > 0) then
      select count(1)
        into v_validatetoken
        from TOKEN_VALIDATION_LOG
       where VALIDATION_REF = p_auth_token_sno
         and RESPONSE_CODE = '1'
         and ((sysdate - CREATED_DATE) * 24 * 60 * 60) < 120;
      if (v_validatetoken = 0) then
        v_response := '99~~Token has expired or invalid. Kindly use another token and try again.'; --INVALID APPROVAL OPTION
        RETURN v_response;
      else
        v_istokenused := 'Y';
      end if;
    end if;
  
    IF (p_REQUEST_TYPE_ID = '1') -- NEW
     THEN
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO MANAGERS_CHEQUE_REQUESTS_TEMP
        (REQUEST_ID,
         CORP_ID,
         ACCOUNT_NO,
         AMOUNT,
         BENEFICIARY_NAME,
         DELIVERY_OPTION_ID,
         COLLECTION_BRANCH,
         PURPOSE_OF_ISSUANCE,
         CREATED_BY,
         CREATED_DATE,
         
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID,
         RECORD_STATUS_ID,
         NO_OF_RECORD,
         UPLOAD_FILENAME,
         BATCH_ID,
         AUTH_TOKEN_FLAG,
         AUTH_TOKEN_SNO)
      VALUES
        (v_recordid,
         p_CORP_ID,
         p_ACCOUNT_NO,
         p_AMOUNT,
         p_BENEFICIARY_NAME,
         p_DELIVERY_OPTION_ID,
         p_COLLECTION_BRANCH,
         p_PURPOSE_OF_ISSUANCE,
         p_CREATED_BY,
         SYSDATE,
         v_approvalstatus,
         p_REQUEST_TYPE_ID,
         v_recordstatus,
         p_NO_OF_RECORD,
         p_UPLOAD_FILENAME,
         p_BATCH_ID,
         v_istokenused,
         p_auth_token_sno);
    
    ELSE
      v_recordid := p_REQUEST_TYPE_ID;
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        p_CREATED_BY,
                                                        i_MENU_ID,
                                                        p_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        p_AMOUNT,
                                                        p_CORP_ID,
                                                        v_istokenused,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    /* if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;*/
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'CREATE-MANAGERS_CHEQUE_REQUESTS_UPLOAD', --event category
                   'recordid~' || p_BATCH_ID || '~~requestid~' ||
                   p_BATCH_ID, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   p_BATCH_ID);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response    := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message := SQLERRM;
      v_response    := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.MANAGERS_CHEQUE_UPLOAD_TEMP');
      
        COMMIT;
        --end;
      end;
      return v_response;
  END;

  function addManagersChequeUploadDetail(
                                         
                                         p_CORP_ID             IN VARCHAR2,
                                         p_ACCOUNT_NO          IN VARCHAR2,
                                         p_AMOUNT              IN VARCHAR2,
                                         p_BENEFICIARY_NAME    IN VARCHAR2,
                                         p_DELIVERY_OPTION_ID  IN VARCHAR2,
                                         p_COLLECTION_BRANCH   IN VARCHAR2,
                                         p_PURPOSE_OF_ISSUANCE IN VARCHAR2,
                                         p_CREATED_BY          IN VARCHAR2,
                                         --p_APPROVAL_STATUS_ID IN VARCHAR2,
                                         p_REQUEST_TYPE_ID IN VARCHAR2,
                                         
                                         --p_RECORD_STATUS_ID IN VARCHAR2,
                                         p_NO_OF_RECORD    IN VARCHAR2,
                                         p_UPLOAD_FILENAME IN VARCHAR2,
                                         i_MENU_ID         IN VARCHAR2,
                                         p_auth_token_flag IN VARCHAR2,
                                         p_auth_token_sno  IN VARCHAR2,
                                         p_session_id      IN VARCHAR2,
                                         p_context_url     IN VARCHAR2,
                                         p_ip_mac_address  IN VARCHAR2,
                                         p_BATCH_ID        IN VARCHAR2)
    return varchar2 IS
  
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_response_code  varchar2(300);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(p_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(p_REQUEST_TYPE_ID);
  BEGIN
    IF (p_REQUEST_TYPE_ID = '1') -- NEW
     THEN
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO MANAGERS_CHEQUE_REQUESTS
        (REQUEST_ID,
         
         CORP_ID,
         ACCOUNT_NO,
         AMOUNT,
         BENEFICIARY_NAME,
         DELIVERY_OPTION_ID,
         COLLECTION_BRANCH,
         PURPOSE_OF_ISSUANCE,
         CREATED_BY,
         CREATED_DATE,
         
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID,
         RECORD_STATUS_ID,
         NO_OF_RECORD,
         UPLOAD_FILENAME,
         BATCH_ID)
      VALUES
        (v_recordid,
         p_CORP_ID,
         p_ACCOUNT_NO,
         p_AMOUNT,
         p_BENEFICIARY_NAME,
         p_DELIVERY_OPTION_ID,
         p_COLLECTION_BRANCH,
         p_PURPOSE_OF_ISSUANCE,
         p_CREATED_BY,
         SYSDATE,
         v_approvalstatus,
         p_REQUEST_TYPE_ID,
         v_recordstatus,
         p_NO_OF_RECORD,
         p_UPLOAD_FILENAME,
         p_BATCH_ID);
    
    ELSE
      v_recordid := p_REQUEST_TYPE_ID;
    END IF;
  
    createAuditLog(p_CREATED_BY,
                   p_session_id,
                   'CREATE-MANAGERS_CHEQUE_REQUESTS_UPLOAD', --event category
                   'recordid~' || p_BATCH_ID || '~~requestid~' ||
                   p_BATCH_ID, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   p_REQUEST_TYPE_ID,
                   v_response,
                   p_BATCH_ID);
    return '00~~Record Added successfully';
  EXCEPTION
    WHEN OTHERS THEN
      --v_response_code := '99';
      v_response    := 'TRANSACTION PROCESSING FAILED. PLEASE TRY AGAIN LATER';
      v_err_message := SQLERRM;
      v_response    := getFriendlyExceptionMessage(v_err_message, 1);
      PRAGMA AUTONOMOUS_TRANSACTION;
      begin
        INSERT INTO rib_sr_error_log
          (error_date, error_msg, error_point)
        VALUES
          (SYSDATE,
           DBMS_UTILITY.format_error_backtrace || v_err_message,
           'CIBANK.MANAGERS_CHEQUE_UPLOAD_TEMP');
      
        COMMIT;
        --end;
      end;
      return v_response;
  END;

  FUNCTION create_fx_transfer_request(i_REQUEST_ID               NUMBER,
                                      i_CORP_ID                  NUMBER,
                                      i_account_number           VARCHAR2,
                                      i_account_currency         VARCHAR2,
                                      i_transfer_amount          NUMBER,
                                      i_charge_option            VARCHAR2,
                                      i_beneficiary_name         VARCHAR2,
                                      i_beneficiary_address      VARCHAR2,
                                      i_beneficiary_bank_name    VARCHAR2,
                                      i_beneficiary_bank_address VARCHAR2,
                                      i_iban_code                VARCHAR2,
                                      i_swift_code               VARCHAR2,
                                      i_purpose_of_payment       VARCHAR2,
                                      i_sort_code                VARCHAR2,
                                      i_int_bank_account_number  VARCHAR2,
                                      i_int_bank_iban_code       VARCHAR2,
                                      i_int_bank_swift_code      VARCHAR2,
                                      i_int_bank_sort_code       VARCHAR2,
                                      i_CREATED_BY               NUMBER,
                                      i_APPROVED_BY              NUMBER,
                                      i_LAST_MODIFIED_BY         NUMBER,
                                      i_REQUEST_TYPE_ID          INTEGER,
                                      i_MENU_ID                  integer,
                                      p_context_url              varchar2,
                                      p_ip_mac_address           varchar2,
                                      p_session_id               varchar2,
                                      p_auth_token_flag          char,
                                      p_auth_token_sno           varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO intl_FX_TRANSFER_REQUESTS
        (
         
         fx_trf_request_id,
         CORP_ID,
         
         account_number,
         account_currency,
         transfer_amount,
         charge_option,
         beneficiary_name,
         beneficiary_address,
         beneficiary_bank_name,
         beneficiary_bank_address,
         iban_code,
         swift_code,
         purpose_of_payment,
         sort_code,
         int_bank_account_number,
         int_bank_iban_code,
         int_bank_swift_code,
         int_bank_sort_code,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,
         
         i_CORP_ID,
         i_account_number,
         i_account_currency,
         i_transfer_amount,
         i_charge_option,
         i_beneficiary_name,
         i_beneficiary_address,
         i_beneficiary_bank_name,
         i_beneficiary_bank_address,
         i_iban_code,
         i_swift_code,
         i_purpose_of_payment,
         i_sort_code,
         i_int_bank_account_number,
         i_int_bank_iban_code,
         i_int_bank_swift_code,
         i_int_bank_sort_code,
         
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest(i_account_number,
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        i_transfer_amount,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CREATE-FX-TRANSFER-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.create_fx_transfer_request');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END create_fx_transfer_request;

  FUNCTION getFxTransferPurposes RETURN SYS_REFCURSOR IS
    c_refcursor SYS_REFCURSOR;
  BEGIN
    --  i_searchParam:=upper(i_searchParam);
    OPEN c_refcursor FOR
      select a.purpose_id id, a.name name, a.name description, '' misc1
        from REF_FX_TRANFER_PURPOSES a;
  
    RETURN c_refcursor;
  END getFxTransferPurposes;

  function save_Beneficiary_acct_group(i_group_id    number,
                                       i_corp_id     number,
                                       i_name        varchar2,
                                       i_description varchar2,
                                       
                                       i_CREATED_BY       NUMBER,
                                       i_APPROVED_BY      NUMBER,
                                       i_LAST_MODIFIED_BY NUMBER,
                                       i_REQUEST_TYPE_ID  INTEGER,
                                       i_MENU_ID          integer,
                                       p_context_url      varchar2,
                                       p_ip_mac_address   varchar2,
                                       p_session_id       varchar2,
                                       p_auth_token_flag  char,
                                       p_auth_token_sno   varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_batch_id       number;
  BEGIN
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_batch_id FROM DUAL;
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_BENEFICIARIES_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO corporate_bene_acct_group_v2
        (group_id,
         corp_id,
         name,
         description,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVED_DATE,
         APPROVED_BY,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- i_CHARGE_DISCOUNT_ID,
         
         i_corp_id,
         i_name,
         i_description,
         sysdate, --i_CREATED_DATE,
         i_CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         i_APPROVED_BY,
         i_REQUEST_TYPE_ID);
    
    else
    
      v_recordid := i_group_id;
    
      update corporate_bene_acct_group_v2
         set group_id = i_group_id,
             --p_corp_id number not null,
             name               = i_name,
             description        = i_description,
             last_modified_by   = i_APPROVED_BY,
             LAST_MODIFIED_DATE = sysdate,
             record_Status_id   = v_recordstatus,
             approval_Status_id = v_approvalstatus
       where group_id = v_recordid;
    
    END IF;
  
    /*v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
    i_CREATED_BY,
    i_MENU_ID,
    i_REQUEST_TYPE_ID,
    v_batch_id,
    0,
    i_CORP_ID);*/
  
    if (sql%rowcount > 0) then
      v_response := '00~~Beneficiary Account Group saved successfully';
    else
      v_response := '99~~Beneficiary Account Group count not be saved';
    end if;
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
  
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'SAVE_BENEFICIARY_GROUP', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveBeneficiary');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END save_Beneficiary_acct_group;

  function save_Beneficiary_detail(i_beneficiary_id   number,
                                   i_beneficiary_code VARCHAR2,
                                   i_corp_id          number,
                                   i_name             varchar2,
                                   i_address          varchar2,
                                   i_mobile_number    varchar2,
                                   i_email_address    varchar2,
                                   i_CREATED_BY       NUMBER,
                                   i_APPROVED_BY      NUMBER,
                                   i_LAST_MODIFIED_BY NUMBER,
                                   i_REQUEST_TYPE_ID  INTEGER,
                                   i_MENU_ID          integer,
                                   p_context_url      varchar2,
                                   p_ip_mac_address   varchar2,
                                   p_session_id       varchar2,
                                   p_auth_token_flag  char,
                                   p_auth_token_sno   varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_batch_id       number;
  BEGIN
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_batch_id FROM DUAL;
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_BENEFICIARIES_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO corporate_bene_details_v2
        (
         
         beneficiary_id,
         beneficiary_code,
         corp_id,
         name,
         address,
         mobile_number,
         email_address,
         
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVED_DATE,
         APPROVED_BY,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid, -- i_CHARGE_DISCOUNT_ID,
         
         i_beneficiary_code,
         i_corp_id,
         i_name,
         i_address,
         i_mobile_number,
         i_email_address,
         
         sysdate, --i_CREATED_DATE,
         i_CREATED_BY,
         --i_LAST_MODOFIED_BY,
         -- i_LAST_MODIFIED_DATE,
         v_recordstatus,
         v_approvalstatus,
         sysdate,
         i_APPROVED_BY,
         i_REQUEST_TYPE_ID);
    
    else
    
      v_recordid := i_beneficiary_id;
    
      update corporate_bene_details_v2
         set beneficiary_code   = i_beneficiary_code,
             name               = i_name,
             address            = i_address,
             mobile_number      = i_mobile_number,
             email_address      = i_email_address,
             last_modified_by   = i_APPROVED_BY,
             LAST_MODIFIED_DATE = sysdate,
             record_Status_id   = v_recordstatus,
             approval_Status_id = v_approvalstatus
       where beneficiary_id = v_recordid;
    
    END IF;
  
    /*v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
    i_CREATED_BY,
    i_MENU_ID,
    i_REQUEST_TYPE_ID,
    v_batch_id,
    0,
    i_CORP_ID);*/
  
    if (sql%rowcount > 0) then
      v_response := '00~~Beneficiary saved successfully';
    else
      v_response := '99~~Beneficiary could not be saved';
    end if;
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'SAVE_BENEFICIARY_DETAIL', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.save_Beneficiary_detail');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END save_Beneficiary_detail;

  function save_Beneficiary_account(i_account_id                 number,
                                    i_beneficiary_id             number,
                                    i_beneficiary_acct_group_id  number,
                                    i_corp_id                    NUMBER,
                                    i_preferred_name             VARCHAR2,
                                    i_destination_bank_code      VARCHAR2,
                                    i_account_name               VARCHAR2,
                                    i_acctno_phoneno_rsa_tax_tin VARCHAR2,
                                    i_product_category           VARCHAR2,
                                    i_beneficiary_acct_code      varchar2,
                                    i_CREATED_BY                 NUMBER,
                                    i_APPROVED_BY                NUMBER,
                                    i_LAST_MODIFIED_BY           NUMBER,
                                    i_REQUEST_TYPE_ID            INTEGER,
                                    i_MENU_ID                    integer,
                                    p_context_url                varchar2,
                                    p_ip_mac_address             varchar2,
                                    p_session_id                 varchar2,
                                    p_auth_token_flag            char,
                                    p_auth_token_sno             varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message    VARCHAR2(3000);
    v_response       VARCHAR2(100);
    v_recordstatus   VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid       NUMBER;
    v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
    v_batch_id       number;
  BEGIN
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_batch_id FROM DUAL;
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT CORPORATE_BENEFICIARIES_SEQ.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO corporate_bene_account_dtls_v2
        (
         
         account_id,
         beneficiary_id,
         beneficiary_acct_group_id,
         corp_id,
         preferred_name,
         destination_bank_code,
         account_name,
         acctno_phoneno_rsa_tax_tin_id,
         product_category,
         beneficiary_acct_code,
         CREATED_DATE,
         CREATED_BY,
         -- LAST_MODOFIED_BY, 
         -- LAST_MODIFIED_DATE, 
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         APPROVED_DATE,
         APPROVED_BY,
         REQUEST_TYPE_ID)
      
        select v_recordid, -- i_CHARGE_DISCOUNT_ID,
               
               i_beneficiary_id,
               i_beneficiary_acct_group_id,
               i_corp_id,
               i_preferred_name,
               i_destination_bank_code,
               i_account_name,
               i_acctno_phoneno_rsa_tax_tin,
               i_product_category,
               i_beneficiary_acct_code,
               sysdate, --i_CREATED_DATE,
               i_CREATED_BY,
               --i_LAST_MODOFIED_BY,
               -- i_LAST_MODIFIED_DATE,
               v_recordstatus,
               v_approvalstatus,
               sysdate,
               i_APPROVED_BY,
               i_REQUEST_TYPE_ID
          from dual
         where not exists (select *
                  from corporate_bene_account_dtls_v2
                 where acctno_phoneno_rsa_tax_tin_id =
                       i_acctno_phoneno_rsa_tax_tin
                   and corp_id = i_corp_id);
    
    else
    
      v_recordid := i_account_id;
      insert into corporate_bene_accdtls_v2_hist
        select *
          from corporate_bene_account_dtls_v2
         where account_id = v_recordid;
      update corporate_bene_account_dtls_v2
         set beneficiary_acct_group_id     = i_beneficiary_acct_group_id,
             preferred_name                = i_preferred_name,
             destination_bank_code         = i_destination_bank_code,
             account_name                  = i_account_name,
             acctno_phoneno_rsa_tax_tin_id = i_acctno_phoneno_rsa_tax_tin,
             product_category              = i_product_category,
             beneficiary_acct_code         = i_beneficiary_acct_code,
             
             last_modified_by   = i_APPROVED_BY,
             LAST_MODIFIED_DATE = sysdate,
             record_Status_id   = v_recordstatus,
             approval_Status_id = v_approvalstatus
       where account_id = v_recordid;
    
    END IF;
  
    /*v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
    i_CREATED_BY,
    i_MENU_ID,
    i_REQUEST_TYPE_ID,
    v_batch_id,
    0,
    i_CORP_ID);*/
  
    if (sql%rowcount > 0) then
      v_response := '00~~Beneficiary account saved successfully';
    else
      v_response := '99~~Beneficiary account could not be saved';
    end if;
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'SAVE_BENEFICIARY_GROUP', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveBeneficiary');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
  END save_Beneficiary_account;

  function get_corp_beneacctgrp_by_corpid(p_corp_id number)
    return Sys_Refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      /*select *
        from cibank.corporate_bene_acct_group_v2 a
       where a.corp_id = p_corp_id
          or a.corp_id = 1*/

select a.CREATED_BY ,
        a.LAST_MODIFIED_BY ,
        a.CREATED_DATE ,
        a.RECORD_STATUS_ID ,
        p_corp_id CORP_ID ,
        a.LAST_MODIFIED_DATE ,
        a.APPROVAL_STATUS_ID ,
        a.REQUEST_TABLE_ID ,
        a.BATCH_ID ,
        a.APPROVED_DATE ,
        a.GROUP_ID ,
        a.NAME ,
        a.DESCRIPTION ,
        a.REQUEST_TYPE_ID ,
        a.APPROVAL_COMMENT ,
        a.APPROVED_BY from cibank.corporate_bene_acct_group_v2 a
       where a.corp_id = p_corp_id
          or a.corp_id = 1 /*add all system/default groups to the list*/
      ;
      --p_corp_id
    return c_Result;
  end get_corp_beneacctgrp_by_corpid;

  function get_corp_beneficiary_by_corpid(p_corp_id number)
    return Sys_Refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from cibank.corporate_bene_details_v2 a
       where a.corp_id = p_corp_id and record_status_id not in ('4','3');
    return c_Result;
  end get_corp_beneficiary_by_corpid;

  function get_corp_bene_acct_by_beneid(p_beneficiary_id number)
    return Sys_Refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select --b.beneficiary_code || '~' || a.account_id beneficiary_acct_code,
       a.*, BNK_CODE cbn_bank_code
        from cibank.corporate_bene_account_dtls_v2 a,
             cibank.corporate_bene_details_v2      b,
             newibank.RIB_BANKS_LIST               c
       where a.beneficiary_id = b.beneficiary_id
         and a.beneficiary_id = p_beneficiary_id
         and a.destination_bank_code = c.NIBSSCODE(+);
    return c_Result;
  end get_corp_bene_acct_by_beneid;

  function get_corp_bene_acct_by_catid(p_corp        number,
                                       p_category_id varchar2)
    return sys_refcursor as
    c_result Sys_Refcursor;
  begin
    open c_result for
      select --b.beneficiary_code || '~' || a.account_id beneficiary_acct_code,
       a.*, BNK_CODE cbn_bank_code, BNK_NAME cbn_bank_name
        from cibank.corporate_bene_account_dtls_v2 a,
             cibank.corporate_bene_details_v2      b,
             newibank.RIB_BANKS_LIST               c
       where a.beneficiary_id = b.beneficiary_id
         and a.corp_id = p_corp
         and b.record_status_id not in ('3','4')
         and a.product_category = p_category_id
         and a.destination_bank_code = c.NIBSSCODE(+);
    return c_Result;
  end get_corp_bene_acct_by_catid;

  function get_corp_bene_acct_by_catgrpid(p_corp        number,
                                          p_group_id    varchar2,
                                          p_category_id varchar2)
    return sys_refcursor as
    c_result Sys_Refcursor;
  begin
    open c_result for
      select --b.beneficiary_code || '~' || a.account_id beneficiary_acct_code,
       a.*, BNK_CODE cbn_bank_code, BNK_NAME cbn_bank_name
        from cibank.corporate_bene_account_dtls_v2 a,
             cibank.corporate_bene_details_v2      b,
             newibank.RIB_BANKS_LIST               c
       where a.beneficiary_id = b.beneficiary_id
         and a.corp_id = p_corp
         and a.beneficiary_acct_group_id = p_group_id
         and b.record_status_id not in ('3','4')
         and a.product_category = p_category_id
         and a.destination_bank_code = c.NIBSSCODE(+);
    return c_Result;
  end get_corp_bene_acct_by_catgrpid;

  FUNCTION create_upload_batch_master(i_batch_id         VARCHAR2,
                                      i_corp_id          NUMBER,
                                      i_description      varchar2,
                                      i_total_count      number,
                                      i_total_amount     number,
                                      i_file_name        varchar2,
                                      i_file_content     clob,
                                      i_file_ext         varchar2,
                                      i_file_size        number,
                                      i_CREATED_BY       NUMBER,
                                      i_APPROVED_BY      NUMBER,
                                      i_LAST_MODIFIED_BY NUMBER,
                                      i_REQUEST_TYPE_ID  INTEGER,
                                      i_MENU_ID          integer,
                                      p_context_url      varchar2,
                                      p_ip_mac_address   varchar2,
                                      p_session_id       varchar2,
                                      p_auth_token_flag  char,
                                      p_auth_token_sno   varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    --v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      --SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO upload_batch_master
        (batch_id,
         corp_id,
         description,
         total_count,
         total_amount,
         file_name,
         file_content,
         file_ext,
         file_size,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (i_batch_id,
         
         i_corp_id,
         i_description,
         i_total_count,
         i_total_amount,
         i_file_name,
         i_file_content,
         i_file_ext,
         i_file_size,
         
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID);
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        i_batch_id,
                                                        i_total_amount,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CREATE-MANDATE-REQUEST', --event category
                   'recordid~' || i_batch_id || '~~requestid~' ||
                   i_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   i_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'cibank.create_mandate_request');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END create_upload_batch_master;

  /*function get_corp_bene_acct_by_beneid(p_beneficiary_id number)
    return Sys_Refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select *
        from cibank.corporate_bene_account_dtls_v2 a
       where a.beneficiary_id = p_beneficiary_id;
    return c_Result;
  end get_corp_bene_acct_by_beneid;*/

  function get_corp_bene_acct_by_acctcode(p_corp_id               number,
                                          p_beneficiary_acct_code varchar2)
    return Sys_Refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select --b.beneficiary_code || '~' || a.account_id beneficiary_acct_code,
       a.*, BNK_CODE cbn_bank_code
        from cibank.corporate_bene_account_dtls_v2 a,
             cibank.corporate_bene_details_v2      b,
             newibank.RIB_BANKS_LIST               c
       where a.beneficiary_id = b.beneficiary_id
         and a.beneficiary_acct_code = p_beneficiary_acct_code
         and a.corp_id = p_corp_id
         and a.destination_bank_code = c.NIBSSCODE(+);
    return c_Result;
  end get_corp_bene_acct_by_acctcode;

  FUNCTION selectpendingRTGS(p_THREAD_id IN VARCHAR2) RETURN sys_refcursor IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    o_refcursor sys_refcursor;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
    OPEN o_refcursor FOR
      SELECT a.CHARGE_AMOUNT,
             a.NAME_VALIDATION_MATCH_STATUS,
             a.CREATED_DATE,
             a.MOBILE_NUMBER,
             a.IS_SUMMARY_TABLE_UPDATED,
             a.POSTED_DATE,
             a.NE_DATE,
             a.BATCH_DETAIL_ID,
             a.THREAD_ID,
             a.ERROR_PROCESSING_STATUS,
             a.FLEXCUBECUSTOMERID,
             a.REVERSAL_REF_NO,
             a.AMOUNT,
             a.BENEFICIARY_NAME,
             a.CUSTOM_RECEIPT_URL,
             a.REVERSAL_DATE,
             a.BILLER_NAME,
             d.SHORTNAME,
d.SWIFT_CODE,
d.SWIFT_BIC_NUBAN,
             a.CR_ACCOUNT_NO,
             a.APPROVED_BY,
             a.BENEFICIARY_EMAIL,
             --DR_ACCOUNT_NO ,
             a.CREATED_BY,
             a.ERROR_TRIAL_COUNT,
             a.FLEXCUBETRANID,
             a.MANUAL_SETTLEMENT_ADVISED,
             a.NE_SESSION_ID,
             a.LAST_MODIFIED_DATE,
             a.CR_ACCOUNT_CURRENCY_CODE,
             a.SCHEDULE_DATE,
             a.BILLER_CUSTOM_FIELD_VALUE,
             a.THIRDPARTY_RESPONSE_DATE,
             a.PROCESSING_STATUS,
             a.REJECTED_DATE,
             a.REJECTED_BY,
             a.ISPOSTING_REVERSED,
             a.CUSTOM_RECEIPT_GENERATED,
             a.PAYMENT_TYPE_ID,
             a.ISINTERBANK_TRANSFER,
             a.POSTINGUIDS,
             a.POSTING_LOCK_COUNT,
             a.RESPONSE_CODE,
             a.BILLER_CATEGORY,
             a.THIRDPARTY_RESPONSE_MESSAGE,
             a.LAST_MODIFIED_BY,
             a.CUSTOMER_BVN,
             a.REVERSALPOSTINGUIDS,
             a.BATCH_ID,
             a.APPROVED_DATE,
             a.TRANSACTION_STATUS,
             a.REVERSAL_RESPONSE_MESSAGE,
             a.NEXT_TRIAL_TIME,
             a.FLEXCUBEACCOUNTVALIDATIONFLG,
             a.NE_BVN_NO,
             a.BILLER_RECHARGE_PIN,
             a.CR_ACCOUNT_BRANCH_CODE,
             a.BANK_CODE,
             a.BENEFICIARY_ID,
             a.FLEXCUBERESPONSECODE,
             a.NE_CUST_NAME,
             a.ISFT_SUCCESSFUL,
             a.FLEXCUBERESPONSEDESCRIPTION,
             a.THIRDPARTY_RESPONSE_CODE,
             a.RECORD_STATUS_ID,
             a.CORP_ID,
             a.POSTEDFLG,
             a.APPROVAL_STATUS_ID,
             a.PAYMENT_CHANNEL_ID,
             a.ISNE_SUCCESSFUL,
             a.NE_RESPONSE_CODE,
             a.NARRATION,
             a.NE_KYCLEVEL,
             a.POST_REF_NO,
             a.THIRDPARTY_GUID,
             a.NE_RESPONSE_MESSAGE,
             a.THIRDPARTY_SESSION_ID,
             a.REVERSAL_RESPONSE_CODE,
             a.BILLER_PRODUCT_TYPE,
             a.BANK_NAME,
             b.DR_ACCOUNT_BRANCH_CODE,
             b.DR_ACCOUNT_CURRENCY_CODE,
             b.DR_ACCOUNT as DR_ACCOUNT_NO,
             b.TRANSIT_POSTREF,
             b.TRANSIT_POST_DATE,
             b.HOLDING_ACCT_TYPE,
             b.TRANSIT_REVERSAL_POSTREF,
             b.CUMULATIVE_AMOUNT,
             b.POSTING_OPTION_ID,
             b.TRANSIT_REVERSAL_TRAN_AMT,
             b.HOLDING_ACCT_NO,
             b.TRANSIT_POSTFLG,
             b.TRANSIT_REVERSAL_GUID,
             b.NO_OF_RECORD,
             b.FAILURE_COUNT,
             b.TRANSIT_POST_GUID,
             b.HOLDING_ACCT_CURRENCY_CODE,
             b.TOTAL_CHARGE_AMT,
             b.HOLDING_ACCT_BRANCH_CODE,
             b.TRANSIT_REVERSAL_CHARGE_AMT,
             b.TRANSIT_REVERSAL_DATE,
             b.TRANSIT_REVERSALFLG,
             b.CHARGE_OPTION_ID,
             b.TOTAL_TRAN_AMOUNT,
             c.CHANNEL_CODE,
             k.narration_option_id
        FROM TRANSACTION_BATCH_DETAIL a
        join TRANSACTION_BATCH_SUMMARY b
          on b.batch_id = a.batch_id
           join newibank.RIB_BANKS_LIST d
          on d.NIBSSCODE = a.BANK_CODE
        join REF_PAYMENT_CHANNELS c
          on c.CHANNEL_ID = a.PAYMENT_CHANNEL_ID
        join corporate_profile k
          on b.corp_id = k.corp_id
       WHERE a.THREAD_ID = p_THREAD_id
         and a.PAYMENT_CHANNEL_ID = 5 --RTGS
         AND (a.PROCESSING_STATUS = '04' or a.PROCESSING_STATUS= '102' or
             (a.PROCESSING_STATUS = '-04' and a.NEXT_TRIAL_TIME <= sysdate))
            
         AND a.ISINTERBANK_TRANSFER = 'Y';
  
    RETURN o_refcursor;
  END;

  function save_beneficiaries_v2(p_corporate_beneficiaries_v2 corporate_beneficiaries_v2_typ,
                                 p_context_url                varchar2,
                                 p_ip_mac_address             varchar2,
                                 p_session_id                 varchar2)
    RETURN VARCHAR2
  
   IS
    v_err_message              VARCHAR2(3000);
    v_response                 VARCHAR2(100);
     v_product_category                 VARCHAR2(100);
    v_recordstatus             VARCHAR2(2);
    v_recordid_detail          NUMBER;
    v_recordid_acct            NUMBER;
    v_requestid                NUMBER;
    v_counter                  integer;
    v_approvalstatus           VARCHAR2(2);
    v_batch_id                 number;
    v_existing_beneficiary_id  number := 0;
    v_existing_account_id      number := 0;
    v_corporate_beneficiary_v2 corporate_beneficiary_v2_typ := NEW
                                                               corporate_beneficiary_v2_typ(0,
                                                                                            '',
                                                                                            0,
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            0,
                                                                                            0,
                                                                                            0,
                                                                                            0,
                                                                                            '',
                                                                                            -- =======================================================================
                                                                                            0,
                                                                                            0,
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            0);
  BEGIN
  
    SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_batch_id FROM DUAL;
  
    FOR i IN p_corporate_beneficiaries_v2.FIRST .. p_corporate_beneficiaries_v2.LAST LOOP
      SELECT CORPORATE_BENE_REQ_SEQ.nextval INTO v_requestid FROM DUAL;
    
      v_counter                  := v_counter + 1;
      v_corporate_beneficiary_v2 := p_corporate_beneficiaries_v2(i);
      v_recordstatus             := getRecordStatusId(v_corporate_beneficiary_v2.REQUEST_TYPE_ID);
      v_approvalstatus           := getApprovalStatusId(v_corporate_beneficiary_v2.REQUEST_TYPE_ID);
    
    begin
          select beneficiary_id, account_id
            into v_existing_beneficiary_id, v_existing_account_id
            from corporate_bene_account_dtls_v2
           where acctno_phoneno_rsa_tax_tin_id =
                 v_corporate_beneficiary_v2.acctno_phoneno_rsa_tax_tin_id
             and corp_id = v_corporate_beneficiary_v2.corp_id;
        exception
          when no_data_found then
          
            v_existing_beneficiary_id := 0;
            v_existing_account_id     := 0;
        end;
        
      IF (v_corporate_beneficiary_v2.REQUEST_TYPE_ID = '1' OR v_existing_account_id=0) -- NEW
       THEN
      
        
      
        if (v_existing_beneficiary_id = 0) then
          SELECT CORPORATE_BENEFICIARIES_SEQ.NEXTVAL
            INTO v_recordid_detail
            FROM DUAL;
            if( v_corporate_beneficiary_v2.beneficiary_acct_group_id = 5  ) then
            v_product_category:='TRANSFER';
            else
            v_product_category:='Airtime';
            end if;
          INSERT INTO corporate_bene_details_v2
            (beneficiary_id,
             beneficiary_code,
             corp_id,
             name,
             address,
             mobile_number,
             email_address,
             
             CREATED_DATE,
             CREATED_BY,
             -- LAST_MODOFIED_BY, 
             -- LAST_MODIFIED_DATE, 
             RECORD_STATUS_ID,
             APPROVAL_STATUS_ID,
             APPROVED_DATE,
             APPROVED_BY,
             REQUEST_TYPE_ID)
          
          values
            (v_recordid_detail, -- i_CHARGE_DISCOUNT_ID,
             
             v_corporate_beneficiary_v2.beneficiary_code,
             v_corporate_beneficiary_v2.corp_id,
             v_corporate_beneficiary_v2.name,
             v_corporate_beneficiary_v2.address,
             v_corporate_beneficiary_v2.mobile_number,
             v_corporate_beneficiary_v2.email_address,
             
             sysdate, --i_CREATED_DATE,
             v_corporate_beneficiary_v2.CREATED_BY,
             --i_LAST_MODOFIED_BY,
             -- i_LAST_MODIFIED_DATE,
             v_recordstatus,
             v_approvalstatus,
             sysdate,
             v_corporate_beneficiary_v2.APPROVED_BY,
             v_corporate_beneficiary_v2.REQUEST_TYPE_ID);
        
          SELECT CORPORATE_BENEFICIARIES_SEQ.NEXTVAL
            INTO v_recordid_acct
            FROM DUAL;
          INSERT INTO corporate_bene_account_dtls_v2
            (account_id,
             beneficiary_id,
             beneficiary_acct_group_id,
             corp_id,
             preferred_name,
             destination_bank_code,
             account_name,
             acctno_phoneno_rsa_tax_tin_id,
             product_category,
             beneficiary_acct_code,
             CREATED_DATE,
             CREATED_BY,
             -- LAST_MODOFIED_BY, 
             -- LAST_MODIFIED_DATE, 
             RECORD_STATUS_ID,
             APPROVAL_STATUS_ID,
             APPROVED_DATE,
             APPROVED_BY,
             REQUEST_TYPE_ID)
          
            select v_recordid_acct, -- i_CHARGE_DISCOUNT_ID,
                   
                   v_recordid_detail,
                  -- v_corporate_beneficiary_v2.beneficiary_acct_group_id,
                  1,
                   v_corporate_beneficiary_v2.corp_id,
                   v_corporate_beneficiary_v2.preferred_name,
                   v_corporate_beneficiary_v2.destination_bank_code,
                   v_corporate_beneficiary_v2.account_name,
                   v_corporate_beneficiary_v2.acctno_phoneno_rsa_tax_tin_id,
                   
                  v_product_category,
                   v_corporate_beneficiary_v2.beneficiary_acct_code,
                   sysdate, --i_CREATED_DATE,
                   v_corporate_beneficiary_v2.CREATED_BY,
                   --i_LAST_MODOFIED_BY,
                   -- i_LAST_MODIFIED_DATE,
                   v_recordstatus,
                   v_approvalstatus,
                   sysdate,
                   v_corporate_beneficiary_v2.APPROVED_BY,
                   v_corporate_beneficiary_v2.REQUEST_TYPE_ID
              from dual
             where not exists
             (select *
                      from corporate_bene_account_dtls_v2
                     where acctno_phoneno_rsa_tax_tin_id =
                           v_corporate_beneficiary_v2.acctno_phoneno_rsa_tax_tin_id
                       and corp_id = v_corporate_beneficiary_v2.corp_id);
        end if;
      else
      
        update corporate_bene_details_v2
           set beneficiary_code   = v_corporate_beneficiary_v2.beneficiary_code,
               name               = v_corporate_beneficiary_v2.name,
               address            = v_corporate_beneficiary_v2.address,
               mobile_number      = v_corporate_beneficiary_v2.mobile_number,
               email_address      = v_corporate_beneficiary_v2.email_address,
               last_modified_by   = v_corporate_beneficiary_v2.APPROVED_BY,
               LAST_MODIFIED_DATE = sysdate,
               record_Status_id   = v_recordstatus,
               approval_Status_id = v_approvalstatus
         where beneficiary_id = v_existing_beneficiary_id;
      
        update corporate_bene_account_dtls_v2
           set beneficiary_acct_group_id     = v_corporate_beneficiary_v2.beneficiary_acct_group_id,
               preferred_name                = v_corporate_beneficiary_v2.preferred_name,
               destination_bank_code         = v_corporate_beneficiary_v2.destination_bank_code,
               account_name                  = v_corporate_beneficiary_v2.account_name,
               acctno_phoneno_rsa_tax_tin_id = v_corporate_beneficiary_v2.acctno_phoneno_rsa_tax_tin_id,
               product_category              = v_corporate_beneficiary_v2.product_category,
               beneficiary_acct_code         = v_corporate_beneficiary_v2.beneficiary_acct_code,
               
               last_modified_by   = v_corporate_beneficiary_v2.APPROVED_BY,
               LAST_MODIFIED_DATE = sysdate,
               record_Status_id   = v_recordstatus,
               approval_Status_id = v_approvalstatus
         where account_id = v_existing_account_id;
      
      END IF;
    
    end loop;
  
  if (sql%rowcount>0) then
    v_response := '00~~Beneficiary Added/Updated successfully';
    else
      v_response := '21~~No action taken';
    end if;
  
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(v_corporate_beneficiary_v2.CREATED_BY,
                   p_session_id,
                   'BENEFICIARIES_V2', --event category
                   'recordid~' || v_batch_id, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   v_corporate_beneficiary_v2.MENU_ID,
                   v_corporate_beneficiary_v2.REQUEST_TYPE_ID,
                   v_response,
                   v_batch_id);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.saveBeneficiariesV2');
    
      --COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message,
                                         v_corporate_beneficiary_v2.MENU_ID);
    
  END save_beneficiaries_v2;

  FUNCTION updatertgsfundtransferresponse(uids            IN VARCHAR2,
                                          responsecode    IN VARCHAR2,
                                          responsemessage IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    v_uids                  VARCHAR2(300);
    v_responsecode          VARCHAR2(100);
    v_recordid              VARCHAR2(100);
    v_sessionid             VARCHAR2(100);
    v_reversalamt           NUMBER(18, 2);
    v_responsemsg           VARCHAR2(400);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_initiate_reversal     INTEGER;
    v_retry                 INTEGER;
    v_batchid               VARCHAR2(200);
  BEGIN
    SET TRANSACTION READ WRITE;
    v_uids         := uids;
    v_responsecode := responsecode;
    v_responsemsg  := responsemessage;
    v_reversalamt  := 0.0;
    SELECT BATCH_DETAIL_ID
      INTO v_recordid
      FROM rtgs_fundtransfer
     WHERE uids = v_uids;
  
    UPDATE rtgs_fundtransfer
       SET TRANSMIT_RESPONSECODE    = v_responsecode,
           TRANSMIT_RESPONSEMESSAGE = v_responsemsg,
           TRANSMIT_RESPONSETIME    = SYSDATE
     WHERE uids = v_uids;
  
    /*IF (((v_responsecode = '00') AND
    (v_responsemsg = 'Approved or completed successfully')) or ((v_responsecode = '94') AND
    (v_responsemsg = 'Duplicate transaction at Beneficiary Bank'))) THEN*/
    -- IF (v_responsecode in ('00','94')) THEN
    IF (v_responsecode in ('100')) THEN
      UPDATE TRANSACTION_BATCH_DETAIL
         SET PROCESSING_STATUS = '100',
             --THIRDPARTY_SESSION_ID = v_sessionid,
             ERROR_TRIAL_COUNT  = 0,
             TRANSACTION_STATUS = 'SUCCESSFUL',
             --riaresponsecode = '00',
             --riaresponsedesciption = 'PAID',
             THIRDPARTY_RESPONSE_CODE    = v_responsecode,
             THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
             THIRDPARTY_guid             = v_uids
       WHERE BATCH_DETAIL_ID = v_recordid;
    
    ELSE
      --Update RIA_INVOICES set PROCESSINGSTATUS='13',  NIBBS_FTRESPONSECODE=v_responsecode,NIBBS_FTRESPONSEXML=v_responsemsg,NIBBS_FTGUID=v_uids where INVOICEID=v_invoiceid;
      SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
        INTO v_defaulttrialcount, v_defaulttrialintervals
        FROM REF_ERROR_TRIAL_COUNT_INTERVAL
       WHERE ROWNUM < 2;
      select count(1)
        into v_retry
        from PAYMENTS.REF_RESPONSE_CODES
       where RESPONSE_CODE = v_responsecode
         AND RETRY = 'Y'
         and CHANNEL_CODE = 'RTGS';
    
      select ERROR_TRIAL_COUNT, BATCH_ID, (AMOUNT + CHARGE_AMOUNT)
        into v_trialcount, v_batchid, v_reversalamt
        from TRANSACTION_BATCH_DETAIL
       where BATCH_DETAIL_ID = v_recordid;
      --v_retry := 1;
      IF ((v_trialcount < v_defaulttrialcount) and v_retry > 0) THEN
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS = '-04',
               --THIRDPARTY_SESSION_ID = v_sessionid,
               ERROR_TRIAL_COUNT =
               (ERROR_TRIAL_COUNT + 1),
               NEXT_TRIAL_TIME  =
               (sysdate + (1 / 1440 * v_defaulttrialintervals)),
               --riaresponsecode = '00',
               --riaresponsedesciption = 'PAID',
               THIRDPARTY_RESPONSE_CODE    = v_responsecode,
               THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
               THIRDPARTY_guid             = v_uids
         WHERE BATCH_DETAIL_ID = v_recordid;
      ELSE
      
        select count(1)
          into v_initiate_reversal
          from PAYMENTS.REF_RESPONSE_CODES
         where RESPONSE_CODE = v_responsecode
           AND REVERSE = 'Y'
           and CHANNEL_CODE = 'RTGS';
        IF (v_initiate_reversal > 0) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS       = '13',
                 ERROR_TRIAL_COUNT       = 0,
                 ERROR_PROCESSING_STATUS = '103',
                 TRANSACTION_STATUS      = 'FAILED',
                 --THIRDPARTY_SESSION_ID    = v_sessionid,
                 THIRDPARTY_RESPONSE_DATE = SYSDATE,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = 'Swift Message Transmission Failed',
                 THIRDPARTY_guid             = v_uids,
                 FAILURE_REASON              = 'Swift Message Transmission Failed'
           WHERE BATCH_DETAIL_ID = v_recordid;
        ELSE
        
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS  = '14',
                 ERROR_TRIAL_COUNT  = 0,
                 TRANSACTION_STATUS = 'UNKNOWN',
                 
                 MANUAL_SETTLEMENT_ADVISED = 'Y',
                 --THIRDPARTY_SESSION_ID     = v_sessionid,
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                 THIRDPARTY_RESPONSE_MESSAGE = 'Swift Message Transmission Status Unknown',
                 THIRDPARTY_guid             = v_uids,
                 THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                 ERROR_PROCESSING_STATUS     = '10',
                 FAILURE_REASON              = 'Swift Message Transmission Status Unknown'
          -- customer_bvn = bvn,
          
          -- WHERE INVOICEID = v_invoiceid;
           WHERE BATCH_DETAIL_ID = v_recordid;
        END IF;
      
      END IF;
    
    END IF;
  
    COMMIT;
    RETURN 'SUCCESS';
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;

  FUNCTION add_rtgsfundtransfer(p_GENERATE_RESPONSECODE        IN VARCHAR2,
                                p_GENERATED_MESSAGE            IN VARCHAR2,
                                p_VALUE_SETTLED_AMOUNT         IN VARCHAR2,
                                p_BENEFICIARY_CUSTOMER_ACCOUNT IN VARCHAR2,
                                p_TRANSACTION_TYPE_CODE        IN VARCHAR2,
                                p_UIDS                         IN VARCHAR2,
                                p_BENEFICIARY_CUSTOMER_ADDRESS IN VARCHAR2,
                                p_BENEFICIARY_CUSTOMER_NAME    IN VARCHAR2,
                                p_REMITTANCE_VALUE_DATE        IN VARCHAR2,
                                p_BATCH_DETAIL_ID              IN VARCHAR2,
                                p_ORDERING_CUSTOMER_ACCOUNT    IN VARCHAR2,
                                p_ORDERING_CUSTOMER_NAME       IN VARCHAR2,
                                p_VALUE_DATE                   IN VARCHAR2,
                                p_ACCT_WITH_INSTITUTE_CODE     IN VARCHAR2,
                                p_REMITTANCE_CODE              IN VARCHAR2,
                                
                                p_ACCT_WITH_INSTITUTE IN VARCHAR2,
                                
                                p_REMITTANCE_NARRATION      IN VARCHAR2,
                                p_ORDERING_CUSTOMER_ADDRESS IN VARCHAR2,
                                p_GENERATE_RESPONSE_MESSAGE IN VARCHAR2)
    RETURN VARCHAR2 IS
    -- v_err                 VARCHAR2 (3000);
    /* v_batch_id            VARCHAR2 (100);
    v_batch_count         INTEGER;*/
    v_uids                  VARCHAR2(300);
    v_responsecode          VARCHAR2(100);
    v_recordid              VARCHAR2(100);
    v_sessionid             VARCHAR2(100);
    v_reversalamt           NUMBER(18, 2);
    v_responsemsg           VARCHAR2(400);
    v_processingstatus      VARCHAR2(100);
    v_trialcount            INTEGER;
    v_postingoption         INTEGER;
    v_defaulttrialcount     INTEGER;
    v_defaulttrialintervals INTEGER;
    v_initiate_reversal     INTEGER;
    v_retry                 INTEGER;
    v_batchid               VARCHAR2(200);
    v_count                 INTEGER;
  BEGIN
    SET TRANSACTION READ WRITE;
  
    --v_sessionid := sessionid;
    v_count := 0;
    -- SELECT COUNT(1) into v_count FROM nip_fundtransfer WHERE SESSIONID=v_sessionid AND ((RESPONSECODE IN('00')) OR (RESPONSECODE IS NULL AND CREATEDTIME between sysdate-(5/1440) and sysdate));
    SELECT COUNT(1)
      into v_count
      FROM rtgs_fundtransfer
     WHERE BATCH_DETAIL_ID = p_BATCH_DETAIL_ID
       AND (TRANSMIT_RESPONSECODE = '100');
  
    --select * from RIA_INVOICES
    if (v_count = 0) then
    
      INSERT INTO RTGS_FUNDTRANSFER
        (GENERATE_RESPONSECODE,
         GENERATED_MESSAGE,
         VALUE_SETTLED_AMOUNT,
         BENEFICIARY_CUSTOMER_ACCOUNT,
         TRANSACTION_TYPE_CODE,
         UIDS,
         BENEFICIARY_CUSTOMER_ADDRESS,
         BENEFICIARY_CUSTOMER_NAME,
         REMITTANCE_VALUE_DATE,
         BATCH_DETAIL_ID,
         ORDERING_CUSTOMER_ACCOUNT,
         ORDERING_CUSTOMER_NAME,
         VALUE_DATE,
         ACCT_WITH_INSTITUTE_CODE,
         REMITTANCE_CODE,
         
         ACCT_WITH_INSTITUTE,
         REMITTANCE_NARRATION,
         ORDERING_CUSTOMER_ADDRESS,
         GENERATE_RESPONSEMESSAGE)
      VALUES
        (p_GENERATE_RESPONSECODE,
         p_GENERATED_MESSAGE,
         p_VALUE_SETTLED_AMOUNT,
         p_BENEFICIARY_CUSTOMER_ACCOUNT,
         p_TRANSACTION_TYPE_CODE,
         p_UIDS,
         p_BENEFICIARY_CUSTOMER_ADDRESS,
         p_BENEFICIARY_CUSTOMER_NAME,
         p_REMITTANCE_VALUE_DATE,
         p_BATCH_DETAIL_ID,
         p_ORDERING_CUSTOMER_ACCOUNT,
         p_ORDERING_CUSTOMER_NAME,
         p_VALUE_DATE,
         p_ACCT_WITH_INSTITUTE_CODE,
         p_REMITTANCE_CODE,
         
         p_ACCT_WITH_INSTITUTE,
         
         p_REMITTANCE_NARRATION,
         p_ORDERING_CUSTOMER_ADDRESS,
         p_GENERATE_RESPONSE_MESSAGE);
    
      if (p_GENERATE_RESPONSECODE = 'SUCCESS') then
      
        UPDATE TRANSACTION_BATCH_DETAIL
           SET PROCESSING_STATUS = '102', ERROR_TRIAL_COUNT = 0
        
         WHERE BATCH_DETAIL_ID = p_BATCH_DETAIL_ID;
      else
      
        SELECT TRIAL_COUNT, TRIAL_INTERVAL_IN_MINUTES
          INTO v_defaulttrialcount, v_defaulttrialintervals
          FROM REF_ERROR_TRIAL_COUNT_INTERVAL
         WHERE ROWNUM < 2;
      
        select ERROR_TRIAL_COUNT, BATCH_ID, (AMOUNT + CHARGE_AMOUNT)
          into v_trialcount, v_batchid, v_reversalamt
          from TRANSACTION_BATCH_DETAIL
         where BATCH_DETAIL_ID = p_BATCH_DETAIL_ID;
      
        v_retry := 1;
      
        IF ((v_trialcount < v_defaulttrialcount) and v_retry > 0) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS = '-04',
                 -- THIRDPARTY_SESSION_ID = v_sessionid,
                 ERROR_TRIAL_COUNT =
                 (ERROR_TRIAL_COUNT + 1),
                 NEXT_TRIAL_TIME  =
                 (sysdate + (1 / 1440 * v_defaulttrialintervals)),
                 --riaresponsecode = '00',
                 --riaresponsedesciption = 'PAID',
                 THIRDPARTY_RESPONSE_CODE    = '101',
                 THIRDPARTY_RESPONSE_MESSAGE = 'Swift Message Generation Failed',
                 THIRDPARTY_guid             = p_UIDS
           WHERE BATCH_DETAIL_ID = p_BATCH_DETAIL_ID;
        ELSE
        
          v_initiate_reversal := 1;
          -- IF (v_initiate_reversal > 0) THEN
          UPDATE TRANSACTION_BATCH_DETAIL
             SET PROCESSING_STATUS       = '13',
                 ERROR_TRIAL_COUNT       = 0,
                 ERROR_PROCESSING_STATUS = '101',
                 TRANSACTION_STATUS      = 'FAILED',
                 --THIRDPARTY_SESSION_ID    = v_sessionid,
                 THIRDPARTY_RESPONSE_DATE = SYSDATE,
                 
                 THIRDPARTY_RESPONSE_CODE    = '101',
                 THIRDPARTY_RESPONSE_MESSAGE = 'Swift Message Generation Failed',
                 THIRDPARTY_guid             = p_UIDS,
                 FAILURE_REASON              = 'Swift Message Generation Failed'
           WHERE BATCH_DETAIL_ID = p_BATCH_DETAIL_ID;
          /* ELSE
          
            UPDATE TRANSACTION_BATCH_DETAIL
               SET PROCESSING_STATUS  = '14',
                   ERROR_TRIAL_COUNT  = 0,
                   TRANSACTION_STATUS = 'UNKNOWN',
                   
                   MANUAL_SETTLEMENT_ADVISED = 'Y',
                   THIRDPARTY_SESSION_ID     = v_sessionid,
                   --riaresponsecode = '00',
                   --riaresponsedesciption = 'PAID',
                   THIRDPARTY_RESPONSE_CODE    = v_responsecode,
                   THIRDPARTY_RESPONSE_MESSAGE = v_responsemsg,
                   THIRDPARTY_guid             = v_uids,
                   THIRDPARTY_RESPONSE_DATE    = SYSDATE,
                   ERROR_PROCESSING_STATUS     = '10',
                   FAILURE_REASON              = v_responsemsg
            -- customer_bvn = bvn,
            
            -- WHERE INVOICEID = v_invoiceid;
             WHERE BATCH_DETAIL_ID = v_recordid;
          END IF;*/
        
        END IF;
      
      end if;
    
      COMMIT;
      RETURN 'SUCCESS';
    else
      update TRANSACTION_BATCH_DETAIL
         set PROCESSING_STATUS = '100'
       where BATCH_DETAIL_ID = p_BATCH_DETAIL_ID;
      commit;
      RETURN 'Record Already Exist for payment BATCH_DETAIL_ID ' || p_BATCH_DETAIL_ID;
    end if;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      --  RETURN 'COULD_NOT_SAVE';
      RETURN SQLERRM;
      --  v_err := SQLERRM;
  END;
  
  
  FUNCTION UPDATE_FEP_LOG(
   p_ID IN VARCHAR2,
   p_RESPONSE_CODE  IN VARCHAR2,
   p_RESPONSE_MSG IN VARCHAR2)
   RETURN VARCHAR2 AS 
    BEGIN
     UPDATE FEP_LOG 
     SET  RESPONSE_MSG = p_RESPONSE_MSG,
          RESPONSE_CODE = p_RESPONSE_CODE,
          RESPONSE_TIME = sysdate()
	 WHERE ID = p_ID;
     COMMIT;
    RETURN '00';
      EXCEPTION
        WHEN OTHERS THEN
          RETURN '02';
    END UPDATE_FEP_LOG;
    
    FUNCTION getAccountDetailsByAcctNo(ACCTNO IN VARCHAR2) RETURN SYS_REFCURSOR IS
    -- transactionDescr                           VARCHAR2 (50);
    -- v_value                           VARCHAR2 (500);
    O_REFCURSOR SYS_REFCURSOR;
  BEGIN
    --v_option := SearchOption;
    -- v_value := SearchValue;
  
    OPEN O_REFCURSOR FOR
    
      SELECT *
        FROM STTM_CUST_ACCOUNT
       WHERE CUST_AC_NO = ACCTNO
         AND AUTH_STAT = 'A'
         AND RECORD_STAT = 'O';
  
    RETURN O_REFCURSOR;
  END;
  
  
  FUNCTION createExpenseCardRequest(i_REQUEST_ID           NUMBER,
                             i_CORP_ID              NUMBER,
                             i_ACCOUNT_NO           VARCHAR2,
                             i_CARD_PAN             VARCHAR2,
                             i_CARD_TYPE            VARCHAR2,
                             i_CARD_SUB_TYPE        VARCHAR2,
                             i_ACTION    VARCHAR2,
                             
                             i_CREATED_BY           NUMBER,
                             i_APPROVED_BY          NUMBER,
                             i_LAST_MODIFIED_BY     NUMBER,
                             i_REQUEST_TYPE_ID      INTEGER,
                             i_MENU_ID              integer,
                             p_context_url          varchar2,
                             p_ip_mac_address       varchar2,
                             p_session_id           varchar2,
                             p_auth_token_flag      char,
                             p_auth_token_sno       varchar2
                             ) RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO EXPENSE_CARD_REQUESTS
        (
         
         CARD_REQUEST_ID,THREAD_ID,
         CORP_ID,
         ACCOUNT_NO,
         CARD_PAN,
         CARD_TYPE,
         
        ACTION,
         
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,THREAD_ID_SEQ.NEXTVAL,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_CARD_PAN,
         i_CARD_TYPE,
		 i_ACTION,
         i_CREATED_BY,
         SYSDATE, 
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID
         );
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
    
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'CREATE-CARD-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createExpenseCardRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;
  
  
   function getStopChequeStatus(p_corp_id number) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
      select distinct c.corporate_id, b.ACCOUNT_NO, 
	  b.START_CHEQUE_NUMBER, b.END_CHEQUE_NUMBER ,a.STATUSDESCRIPTION  as STATUS
	  from  
	  STOP_CHEQUE_REQUESTS b, 
	  REF_PROCESSINGSTATUS a ,
	  corporate_profile c 
	  where 
	  b.corp_id=p_corp_id
	  and c.corp_id=b.corp_id
	  and b.PROCESSING_STATUS=a.STATUSCODE ;
    return c_result;
  
  end;
  
  
  
  function getStopChequeStatusByCorpId(p_corp_id   number)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    if (p_corp_id = 0) then
      return null;
    else
      return getStopChequeStatus(p_corp_id);
    end if;
  
  end;
    function getFixedDepositStatus(p_corp_id number) return sys_refcursor as
    c_result sys_refcursor;
  begin
    open c_result for
     select distinct c.corporate_id, b.AMOUNT, 
	  b.ACCOUNT_NUMBER, b.VALUE_DATE ,b.MATURITY_DATE ,a.STATUSDESCRIPTION  as STATUS
	  from REF_PROCESSINGSTATUS a , 
	  FIXED_DEPOSITS b, 
	  corporate_profile c 
	 
	  where 
	  b.corp_id=p_corp_id
	  and c.corp_id=b.corp_id
	  and b.PROCESSING_STATUS=a.STATUSCODE ;
    return c_result;
  
  end;
  
  
  
  function getFixedDepositStatusByCorpId(p_corp_id   number)
    return sys_refcursor as
    c_result sys_refcursor;
  begin
  
    if (p_corp_id = 0) then
      return null;
    else
      return getFixedDepositStatus(p_corp_id);
    end if;
  
  end;
     FUNCTION GETACCOUNTLIST(I_CUSTOMERNUMBER IN VARCHAR2) RETURN SYS_REFCURSOR IS
    O_REFCURSOR SYS_REFCURSOR;
  BEGIN
    OPEN O_REFCURSOR FOR
    
      SELECT CUSTOMEREMAIL,
             MOBILENUMBER,
             FIRSTNAME,
             LASTNAME,
             CUSTOMERNUMBER       USERNAME,
             ACCOUNTNUMBER,
             ACCOUNTSTATUS,
             A.TRANSFERLIMIT      TRANSFERLIMIT,
             ACCOUNTCURRENCY,
             ACCOUNTNAME,
             ACCRIGHT,
             CHEQUE_BOOK_FACILITY
        FROM CUSTOMERS C, CUSTOMER_ACCOUNTS A, STTM_CUST_ACCOUNT B
       WHERE C.CUSTOMERNUMBER = I_CUSTOMERNUMBER
         AND A.UIDS = C.UIDS
         AND A.ACCOUNTNUMBER = B.CUST_AC_NO
            --- #status added by oawe 29/03/2016 to ensure only whitelist status is tested
            --- and fcubs status is also considered
         AND A.ACCOUNTSTATUS = 'Authorised'
         AND B.AUTH_STAT = 'A'
         AND B.RECORD_STAT = 'O'
            
            -- exempt credit card account class
         AND B.ACCOUNT_CLASS NOT IN ('CA_033')
            --- end #status
            -- AND a.accountstatus NOT IN
            --    ('deleted', 'disabled', 'Disabled', 'DELETED', 'DISABLED')
         AND C.USERSTATUS = 'Authorised'
       ORDER BY B.AC_OPEN_DATE;
           /* SELECT CUSTOMEREMAIL,
             MOBILENUMBER,
             FIRSTNAME,
             LASTNAME,
             CUSTOMERNUMBER       USERNAME,
             '0099255610' AS ACCOUNTNUMBER,
             ACCOUNTSTATUS,
             A.TRANSFERLIMIT      TRANSFERLIMIT,
             'USD' AS ACCOUNTCURRENCY,
             ACCOUNTNAME,
             ACCRIGHT,
             CHEQUE_BOOK_FACILITY
        FROM CUSTOMERS C, CUSTOMER_ACCOUNTS A
        left join STTM_CUST_ACCOUNT B on A.ACCOUNTNUMBER = B.CUST_AC_NO
       WHERE C.CUSTOMERNUMBER = I_CUSTOMERNUMBER
         AND A.UIDS = C.UIDS
       --  AND A.ACCOUNTNUMBER = B.CUST_AC_NO
            --- #status added by oawe 29/03/2016 to ensure only whitelist status is tested
            --- and fcubs status is also considered
         AND A.ACCOUNTSTATUS = 'Authorised'
       --  AND B.AUTH_STAT = 'A'
         --AND B.RECORD_STAT = 'O'
            
            -- exempt credit card account class
         --AND B.ACCOUNT_CLASS NOT IN ('CA_033')
            --- end #status
            -- AND a.accountstatus NOT IN
            --    ('deleted', 'disabled', 'Disabled', 'DELETED', 'DISABLED')
         AND C.USERSTATUS = 'Authorised'
       --ORDER BY B.AC_OPEN_DATE
       ;*/
  
    RETURN O_REFCURSOR;
  END GETACCOUNTLIST;
    
    FUNCTION ADD_FEP_LOG1(
   p_ID IN VARCHAR2,
   p_ABBRIDGE_PAN  IN VARCHAR2,
   p_CHANNEL IN VARCHAR2,
   p_USERNAME IN VARCHAR2,
   p_REQUEST_TYPE  IN VARCHAR2,
   p_ACCOUNT_NO    IN VARCHAR2,
   p_PAN           IN VARCHAR2,
   p_OLD_VALUE     IN VARCHAR2,
   p_NEW_VALUE     IN VARCHAR2,
   p_REQUEST_XML   IN VARCHAR2,
   p_INDEMNITY   IN VARCHAR2)
   RETURN VARCHAR2 AS 
    BEGIN
     INSERT INTO FEP_LOG(ID, USERNAME, ACCOUNT_NO,PAN, ABBRIDGE_PAN, REQUEST_TYPE, CHANNEL, REQUEST_TIME, OLD_VALUE, NEW_VALUE, REQUEST_XML, INDEMNITY)
     VALUES(p_ID, p_USERNAME, p_ACCOUNT_NO, p_PAN, p_ABBRIDGE_PAN,p_REQUEST_TYPE, p_CHANNEL, sysdate(), p_OLD_VALUE, p_NEW_VALUE, p_REQUEST_XML, p_INDEMNITY);
     COMMIT;
    RETURN '00';
      EXCEPTION
        WHEN OTHERS THEN
          RETURN '02';
    END ADD_FEP_LOG1;
  
  FUNCTION ADD_FEP_LOG(
   p_ID IN VARCHAR2,
   p_ABBRIDGE_PAN  IN VARCHAR2,
   p_CHANNEL IN VARCHAR2,
   p_USERNAME IN VARCHAR2,
   p_REQUEST_TYPE  IN VARCHAR2,
   p_ACCOUNT_NO    IN VARCHAR2,
   p_PAN           IN VARCHAR2)
   RETURN VARCHAR2 AS 
    BEGIN
     INSERT INTO FEP_LOG(ID, USERNAME, ACCOUNT_NO,PAN, ABBRIDGE_PAN, REQUEST_TYPE, CHANNEL, REQUEST_TIME)
     VALUES(p_ID, p_USERNAME, p_ACCOUNT_NO, p_PAN, p_ABBRIDGE_PAN,p_REQUEST_TYPE, p_CHANNEL, sysdate());
     COMMIT;
    RETURN '00';
      EXCEPTION
        WHEN OTHERS THEN
          RETURN '02';
    END ADD_FEP_LOG;
    
    
    
    -------EMAIL INDEMITY-----
    FUNCTION saveEmailIndemnityRequest(i_REQUEST_ID         number,
                                   i_CORP_ID            number,
                                   i_ACCOUNT_NO         varchar2,
                                   i_EMAIL     varchar2,
                                   i_MOBILE     number,
                                   i_ACCOUNT_NAME varchar2,
                                   i_CREATED_BY       NUMBER,
                                   i_APPROVED_BY      NUMBER,
                                   i_LAST_MODIFIED_BY NUMBER,
                                   i_REQUEST_TYPE_ID  INTEGER,
                                   i_MENU_ID          integer,
                                   p_context_url      varchar2,
                                   p_ip_mac_address   varchar2,
                                   p_session_id       varchar2,
                                   p_auth_token_flag  char,
                                   p_auth_token_sno   varchar2)
    RETURN VARCHAR2 IS
    v_err_message  VARCHAR2(3000);
    v_response     VARCHAR2(100);
    v_recordstatus VARCHAR2(2) := getRecordStatusId(i_REQUEST_TYPE_ID);
    v_recordid     NUMBER;
    --v_requestid      NUMBER;
    v_approvalstatus VARCHAR2(2) := getApprovalStatusId(i_REQUEST_TYPE_ID);
  BEGIN
    --SELECT CHEQUE_BOOK_REQUESTS_seq.nextval INTO v_requestid FROM DUAL;
    IF (i_REQUEST_TYPE_ID = '1') -- NEW
     THEN
    
      SELECT SERVICE_REQUESTS_seq.NEXTVAL INTO v_recordid FROM DUAL;
      INSERT INTO EMAIL_INDEMNITY
        (REQUEST_ID,
         CORP_ID,
         ACCOUNT_NO,
         EMAIL,
         MOBILE,
         ACCOUNT_NAME,
         CREATED_BY,
         CREATED_DATE,
         RECORD_STATUS_ID,
         APPROVAL_STATUS_ID,
         REQUEST_TYPE_ID)
      VALUES
        (v_recordid,
         
         i_CORP_ID,
         i_ACCOUNT_NO,
         i_EMAIL,
         i_MOBILE,
         i_ACCOUNT_NAME,
         i_CREATED_BY,
         SYSDATE, --i_CREATED_DATE,
         v_recordstatus,
         v_approvalstatus,
         i_REQUEST_TYPE_ID);
    
    ELSE
      v_recordid := i_REQUEST_ID;
    
    END IF;
  
    v_response := cib_ibank_sr_pkg.logApproveralRequest('N/A',
                                                        i_CREATED_BY,
                                                        i_MENU_ID,
                                                        i_REQUEST_TYPE_ID,
                                                        v_recordid,
                                                        0,
                                                        i_CORP_ID,
                                                        p_auth_token_flag,
                                                        p_auth_token_sno,
                                                        p_context_url,
                                                        p_ip_mac_address,
                                                        p_session_id);
  
    --v_response := '00';
    if (instr(v_response, '00')) > 0 then
      commit;
    else
      rollback;
    end if;
    createAuditLog(i_CREATED_BY,
                   p_session_id,
                   'EMAIL_INDEMNITY-REQUEST', --event category
                   'recordid~' || v_recordid || '~~requestid~' ||
                   v_recordid, -- event details
                   p_context_url,
                   p_ip_mac_address,
                   i_MENU_ID,
                   i_REQUEST_TYPE_ID,
                   v_response,
                   v_recordid);
    return v_response;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_err_message := SQLERRM;
    
      logerror(DBMS_UTILITY.format_error_backtrace || v_err_message,
               'CIBANK.createChequeRequest');
    
      -- COMMIT;
      v_response := '99|OPERATION FAILED';
      RETURN getFriendlyExceptionMessage(v_err_message, i_MENU_ID);
    
  END;
    

END;